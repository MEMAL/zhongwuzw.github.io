<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>钟武的技术博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhongwuzw.github.io/"/>
  <updated>2017-07-27T15:27:13.000Z</updated>
  <id>https://zhongwuzw.github.io/</id>
  
  <author>
    <name>钟武</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>RxSwift之sentMessage、methodInvoked失效问题解决</title>
    <link href="https://zhongwuzw.github.io/2017/07/27/RxSwift%E4%B9%8BsentMessage%E3%80%81methodInvoked%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>https://zhongwuzw.github.io/2017/07/27/RxSwift之sentMessage、methodInvoked失效问题解决/</id>
    <published>2017-07-27T09:32:08.000Z</published>
    <updated>2017-07-27T15:27:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RxSwift的sentMessage、methodInvoked方法"><a href="#RxSwift的sentMessage、methodInvoked方法" class="headerlink" title="RxSwift的sentMessage、methodInvoked方法"></a>RxSwift的<code>sentMessage</code>、<code>methodInvoked</code>方法</h2><hr>
<p><a href="https://github.com/ReactiveX/RxSwift" target="_blank" rel="external">RxSwift</a>是<a href="https://github.com/Reactive-Extensions/Rx.NET" target="_blank" rel="external">Rx</a>的<code>Swift</code>版本，用来实现函数式、响应式编程。</p>
<p>具体<code>RxSwift</code>的很多用法不做介绍，接下来，只讨论<code>sentMessage</code>、<code>methodInvoked</code>这两个方法，其作用是返回一个<code>Observable&lt;[Any]</code>，可以作为观察者监控<code>NSObject</code>子类的某个<code>selector</code>，当执行该<code>selector</code>时，将在执行前、后分别执行注册了该<code>selector</code>的<code>sentMessage</code>、<code>methodInvoked</code>方法。</p>
<h2 id="sentMessage、methodInvoked实现原理"><a href="#sentMessage、methodInvoked实现原理" class="headerlink" title="sentMessage、methodInvoked实现原理"></a><code>sentMessage</code>、<code>methodInvoked</code>实现原理</h2><hr>
<p><code>sentMessage</code>、<code>methodInvoked</code>只针对某个实例起作用，其实现首先借鉴了<code>KVO</code>的实现方法，通过创建监听的对象的子类，然后重写方法的实现来实现。<code>sentMessage</code>、<code>methodInvoked</code>实现分两个版本，基础版、优化版。基础版通过<code>Swizzle``forwardInvocation:</code>、<code>respondsToSelector:</code>、<code>methodSignatureForSelector:</code>等函数，将所有需要观察的<code>selector</code>调用时进入<code>forwardInvocation:</code>流程，从而进行拦截，以实现通知；优化版则在基础班的基础上通过<code>Type Encoding</code>来做一个缓存优化，避免每次调用都进入转发的过程。</p>
<a id="more"></a>
<h2 id="sentMessage、methodInvoked遇到的问题"><a href="#sentMessage、methodInvoked遇到的问题" class="headerlink" title="sentMessage、methodInvoked遇到的问题"></a><code>sentMessage</code>、<code>methodInvoked</code>遇到的问题</h2><hr>
<p>在使用<code>sentMessage</code>、<code>methodInvoked</code>方法时，发现一个问题，当观察<code>iOS``Framework</code>提供的方法时，可以正常运行，但是当观察自己创建的类（<code>NSObject</code>的子类）的实例的方法时，却始终无法运行，查看整个运行机制，<code>Class</code>、<code>IMP</code>都被正确替换，但是调用方法时，却始终截取不到，这下才意识到，难道是被编译器优化掉了？导致没有走<code>Objective-C</code>的动态派发？<br>遂翻看<code>Apple</code>的<a href="https://developer.apple.com/library/content/documentation/Swift/Conceptual/BuildingCocoaApps/" target="_blank" rel="external">Using Swift with Cocoa and Objective-C</a>，有一段话是这么说的：</p>
<blockquote>
<p>“When Swift APIs are imported by the Objective-C runtime, there are no guarantees of dynamic dispatch for properties, methods, subscripts, or initializers. The Swift compiler may still devirtualize or inline member access to optimize the performance of your code, bypassing the Objective-C runtime.</p>
<p>You can use the dynamic modifier to require that access to members be dynamically dispatched through the Objective-C runtime. Requiring dynamic dispatch is rarely necessary. However, it is necessary when using APIs like key–value observing or the method_exchangeImplementations function in the Objective-C runtime, which dynamically replace the implementation of a method at runtime. If the Swift compiler inlined the implementation of the method or devirtualized access to it, the new implementation would not be used.”</p>
</blockquote>
<p>大概意思是当在<code>Swift</code>中使用<code>Objective-C</code>中定义的方法时，编译器不保证动态派发，会对其做优化来提高性能，导致的结果是，会使<code>KVO</code>、<code>Swizzling</code>等失效，要解决该问题，可以使用<code>dynamic</code>修饰符，使得方法强制进行<code>Objective-C</code>的动态派发。</p>
<p>这样，问题就解决了，原来是编译器优化搞的鬼。<br><a href="https://stackoverflow.com/questions/39708434/observable-for-selector-rxswift/45340883#45340883" target="_blank" rel="external">stackoverflow</a>上也有人提这个问题，我也进行了回答。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RxSwift的sentMessage、methodInvoked方法&quot;&gt;&lt;a href=&quot;#RxSwift的sentMessage、methodInvoked方法&quot; class=&quot;headerlink&quot; title=&quot;RxSwift的sentMessage、methodInvoked方法&quot;&gt;&lt;/a&gt;RxSwift的&lt;code&gt;sentMessage&lt;/code&gt;、&lt;code&gt;methodInvoked&lt;/code&gt;方法&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ReactiveX/RxSwift&quot;&gt;RxSwift&lt;/a&gt;是&lt;a href=&quot;https://github.com/Reactive-Extensions/Rx.NET&quot;&gt;Rx&lt;/a&gt;的&lt;code&gt;Swift&lt;/code&gt;版本，用来实现函数式、响应式编程。&lt;/p&gt;
&lt;p&gt;具体&lt;code&gt;RxSwift&lt;/code&gt;的很多用法不做介绍，接下来，只讨论&lt;code&gt;sentMessage&lt;/code&gt;、&lt;code&gt;methodInvoked&lt;/code&gt;这两个方法，其作用是返回一个&lt;code&gt;Observable&amp;lt;[Any]&lt;/code&gt;，可以作为观察者监控&lt;code&gt;NSObject&lt;/code&gt;子类的某个&lt;code&gt;selector&lt;/code&gt;，当执行该&lt;code&gt;selector&lt;/code&gt;时，将在执行前、后分别执行注册了该&lt;code&gt;selector&lt;/code&gt;的&lt;code&gt;sentMessage&lt;/code&gt;、&lt;code&gt;methodInvoked&lt;/code&gt;方法。&lt;/p&gt;
&lt;h2 id=&quot;sentMessage、methodInvoked实现原理&quot;&gt;&lt;a href=&quot;#sentMessage、methodInvoked实现原理&quot; class=&quot;headerlink&quot; title=&quot;sentMessage、methodInvoked实现原理&quot;&gt;&lt;/a&gt;&lt;code&gt;sentMessage&lt;/code&gt;、&lt;code&gt;methodInvoked&lt;/code&gt;实现原理&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;sentMessage&lt;/code&gt;、&lt;code&gt;methodInvoked&lt;/code&gt;只针对某个实例起作用，其实现首先借鉴了&lt;code&gt;KVO&lt;/code&gt;的实现方法，通过创建监听的对象的子类，然后重写方法的实现来实现。&lt;code&gt;sentMessage&lt;/code&gt;、&lt;code&gt;methodInvoked&lt;/code&gt;实现分两个版本，基础版、优化版。基础版通过&lt;code&gt;Swizzle``forwardInvocation:&lt;/code&gt;、&lt;code&gt;respondsToSelector:&lt;/code&gt;、&lt;code&gt;methodSignatureForSelector:&lt;/code&gt;等函数，将所有需要观察的&lt;code&gt;selector&lt;/code&gt;调用时进入&lt;code&gt;forwardInvocation:&lt;/code&gt;流程，从而进行拦截，以实现通知；优化版则在基础班的基础上通过&lt;code&gt;Type Encoding&lt;/code&gt;来做一个缓存优化，避免每次调用都进入转发的过程。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发-项目" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://zhongwuzw.github.io/tags/Swift/"/>
    
      <category term="RxSwift" scheme="https://zhongwuzw.github.io/tags/RxSwift/"/>
    
      <category term="Runtime" scheme="https://zhongwuzw.github.io/tags/Runtime/"/>
    
  </entry>
  
  <entry>
    <title>Swift3之Weak引用</title>
    <link href="https://zhongwuzw.github.io/2017/06/17/Swift%E4%B9%8BWeak%E5%BC%95%E7%94%A8/"/>
    <id>https://zhongwuzw.github.io/2017/06/17/Swift之Weak引用/</id>
    <published>2017-06-17T13:33:22.000Z</published>
    <updated>2017-06-19T16:06:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>由于不同的<code>Swift</code>版本引用计数实现会有不同，该文讨论的引用计数原理都基于<code>Swift3</code></p>
</blockquote>
<h2 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h2><hr>
<p>做<code>iOS</code>开发时经常会遇到循环引用，如果处理不当会导致内存泄露，我们通常会使用<code>weak reference</code>弱引用来解决该问题，因为弱引用不会<code>retain</code>对象，当对象引用计数变为0时，弱引用指针将会被赋<code>nil</code>。</p>
<h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><hr>
<p>通常如果实现弱引用，可以让每一个对象维护所有指向该对象的一个弱引用列表，当一个弱引用指向一个对象时，该引用被添加进列表，当弱引用重新赋值或生命期结束，则将其从列表中移除，当一个对象<code>dealloced</code>后，列表中的所有引用会被赋<code>nil</code>。在多线程环境中，需要对获得弱引用和释放对象的操作进行同步，以避免竞态条件，既当一个线程在释放最后一个强引用对象的同时，另一个线程正尝试加载该对象的弱引用。</p>
<p><code>Objective-C</code>实现的过程为，每一个弱引用是一个指向目标对象的指针，编译器会使用<code>helper</code>函数，来避免直接读写指针，确保读取弱引用对象时不会返回正在被释放的对象指针。</p>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><hr>
<p>接下来，我们将创建几个方法来观察弱引用的过程。<br>首先我们想要能够<code>dump</code>出一个对象的内存，如下方法将获取一块内存，将其分成指针大小的块，再将其内容转成16进制，以便于观察：</p>
<figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// Swift <span class="keyword">version</span>: Swift3</div><div class="line"></div><div class="line">func contents(<span class="keyword">ptr</span>: UnsafeRawPointer, _ length: Int) -&gt; String &#123;</div><div class="line">    <span class="keyword">let</span> wordPtr = <span class="keyword">ptr</span>.assumingMemoryBound(<span class="keyword">to</span>: UInt.self)</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> words = length / MemoryLayout<span class="symbol">&lt;UInt&gt;</span>.size</div><div class="line">    <span class="keyword">let</span> wordChars = MemoryLayout<span class="symbol">&lt;UInt&gt;</span>.size * <span class="number">2</span></div><div class="line">    </div><div class="line">    <span class="keyword">let</span> <span class="keyword">buffer</span> = UnsafeBufferPointer<span class="symbol">&lt;UInt&gt;</span>(<span class="keyword">star</span><span class="variable">t:</span> wordPtr, coun<span class="variable">t:</span> words)</div><div class="line">    <span class="keyword">let</span> wordStrings = <span class="keyword">buffer</span>.<span class="keyword">map</span>(&#123; word -&gt; String in</div><div class="line">        var wordString = String(word, radix: <span class="number">16</span>)</div><div class="line">        <span class="keyword">while</span> wordString.characters.<span class="built_in">count</span> &lt; wordChars &#123;</div><div class="line">            wordString = <span class="string">"0"</span> + wordString</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> wordString</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">return</span> wordStrings.joined(separator: <span class="string">" "</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>接下来，我们将创建一个<code>dumper</code>函数来打印一个对象实例的内容，参数为一个对象实例，函数返回一个闭包。在函数内部，会创建一个<code>UnsafeRawPointer</code>指针来指向对象，这样能确保不会进行引用计数的操作，且当对象被释放后，我们仍可以<code>dump</code>出指针所指向内存的内容。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Swift version: Swift3</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dumperFunc</span><span class="params">(<span class="number">_</span> obj: AnyObject)</span></span> -&gt; ((<span class="type">Void</span>) -&gt; <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">let</span> objString = <span class="type">String</span>(describing: obj)</div><div class="line">    <span class="keyword">let</span> ptr = <span class="built_in">unsafeBitCast</span>(obj, to: <span class="type">UnsafeRawPointer</span>.<span class="keyword">self</span>)</div><div class="line">    <span class="keyword">let</span> length = class_getInstanceSize(type(of: obj))</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="keyword">let</span> bytes = contents(ptr: ptr, length)</div><div class="line">        <span class="keyword">return</span> <span class="string">"<span class="subst">\(objString)</span> <span class="subst">\(ptr)</span>: <span class="subst">\(bytes)</span>"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如下有一个类，它有一个弱引用的属性<code>target</code>，同时，创建两个<code>dummy</code>属性，当<code>dump</code>内存内容时可以更清晰的识别：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakReferer</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> dummy1 = <span class="number">0x1234321012343210</span></div><div class="line">        <span class="keyword">weak</span> <span class="keyword">var</span> target: <span class="type">WeakTarget</span>?</div><div class="line">        <span class="keyword">var</span> dummy2: <span class="type">UInt</span> = <span class="number">0xabcdefabcdefabcd</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>接下来，创建一个该对象的实例，并<code>dump</code>出内存的内容：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">let referer = WeakReferer()</div><div class="line">let refererDump = dumperFunc(<span class="name">referer</span>)</div><div class="line">print(<span class="name">refererDump</span>())</div></pre></td></tr></table></figure>
<p>结果为：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x000060000004eb50: <span class="number">000000010</span>ebb0c50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>我们可以看到，<code>dummy1</code>位于第4块，<code>dummy2</code>位于第6块，弱引用位于他们中间，正如我们期待的，其内容为0.</p>
<p>现在我们给它赋一个值看看，我将通过一个<code>do</code>块来控制<code>target</code>的生命周期：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 因为<span class="keyword">target</span>是NSObject对象，所以需要改一下WeakReferer的<span class="keyword">target</span>属性的类型</div><div class="line"></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">        let <span class="keyword">target</span> = NSObject()</div><div class="line">        referer.<span class="keyword">target</span> = <span class="keyword">target</span></div><div class="line">        <span class="built_in">print</span>(<span class="keyword">target</span>)</div><div class="line">        <span class="built_in">print</span>(refererDump())</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;NSObject: <span class="number">0</span>x7fda<span class="number">6a21c6a0</span>&gt;</div><div class="line">    WeakReferer <span class="number">0</span>x00007fda6a000ad0: <span class="number">00000001050</span>a44a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00007</span>fda<span class="number">6a21c6a0</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>正如我们所看到的，<code>target</code>对象的指针直接存放在弱引用中。接下来，我们在<code>do</code>块结束之后再打印一下看看<code>target</code>释放后的情况：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">print(<span class="name">refererDump</span>())</div></pre></td></tr></table></figure>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">WeakReferer <span class="number">0</span>x00007ffe<span class="number">32300060</span>: <span class="number">000000010</span>cfb44a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>被赋值为了<code>nil</code>.</p>
<p>接下来，我们再测试一下将<code>target</code>赋值为一个纯<code>Swift</code>对象，看是不是和<code>Objective-C</code>的<code>NSObject</code>一样，如下为纯<code>Swift``target</code>：</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>再试一下，看看结果怎样：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">let referer = WeakReferer()</div><div class="line">let refererDump = dumperFunc(referer)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div><div class="line">do &#123;</div><div class="line">  let target = WeakTarget()</div><div class="line">  referer<span class="selector-class">.target</span> = target</div><div class="line">  print(refererDump())</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div></pre></td></tr></table></figure>
<p><code>target</code>开始为<code>nil</code>，然后赋给它一个值：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">000060800002</span>a9c2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>接下来，当<code>target</code>离开作用域，我们看看弱引用是否被赋<code>nil</code>：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">000060800002</span>a9c2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>咦，怎么没被赋<code>nil</code>，难道是<code>target</code>没有被释放，产生了内存泄露？我们给<code>target</code>对象加上析构函数看看：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;</div><div class="line">        <span class="keyword">deinit</span> &#123; <span class="built_in">print</span>(<span class="string">"WeakTarget deinit"</span>) &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>运行之前的代码，看看结果：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">000060800002</span>a9c2 abcdefabcdefabcd</div><div class="line">WeakTarget deinit</div><div class="line">SwiftLearn<span class="selector-class">.WeakReferer</span> <span class="number">0</span>x00006000002423a0: <span class="number">000000010538</span>bc50 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">000060800002</span>a9c2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>析构函数被调用了，但是弱引用并没有被赋<code>nil</code>，这跟我们印象中的<code>weak</code>运行过程有出入，我们接着访问一下该值，看是否会产生<code>crash</code>：</p>
<figure class="highlight fortran"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">let referer = WeakReferer()</div><div class="line">    let refererDump = dumperFunc(referer)</div><div class="line">    <span class="built_in">print</span>(refererDump())</div><div class="line">    <span class="keyword">do</span> &#123;</div><div class="line">        let <span class="keyword">target</span> = WeakTarget()</div><div class="line">        referer.<span class="keyword">target</span> = <span class="keyword">target</span></div><div class="line">        <span class="built_in">print</span>(refererDump())</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">print</span>(refererDump())</div><div class="line">    <span class="built_in">print</span>(referer.<span class="keyword">target</span>)</div></pre></td></tr></table></figure>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WeakReferer <span class="number">0x00007ff7aa20d</span>060: <span class="number">00000001047</span>a04a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div><div class="line">WeakReferer <span class="number">0x00007ff7aa20d</span>060: <span class="number">00000001047</span>a04a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00007f</span>f7aa2157f0 abcdefabcdefabcd</div><div class="line">WeakTarget deinit</div><div class="line">WeakReferer <span class="number">0x00007ff7aa20d</span>060: <span class="number">00000001047</span>a04a0 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00007f</span>f7aa2157f0 abcdefabcdefabcd</div><div class="line"><span class="literal">nil</span></div></pre></td></tr></table></figure>
<p>并没有产生<code>crash</code>，打印结果为<code>nil</code>。<br>让我们再仔细的分析一下，首先我们先给<code>WeakTarget</code>对象加上一个<code>dummy</code>属性，<code>dump</code>的时候能更方便的查看内存内容：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeakTarget</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> dummy = <span class="number">0x0123456789abcdef</span></div><div class="line"></div><div class="line">        <span class="keyword">deinit</span> &#123;</div><div class="line">            <span class="built_in">print</span>(<span class="string">"Weak target deinit"</span>)</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，我们将使用新的代码执行相同的过程并<code>dump</code>出每一步的对象内容：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">let referer = WeakReferer()</div><div class="line">let refererDump = dumperFunc(referer)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div><div class="line">let targetDump: (Void) -&gt; String</div><div class="line">do &#123;</div><div class="line">  let target = WeakTarget()</div><div class="line">  targetDump = dumperFunc(target)</div><div class="line">  print(targetDump())</div><div class="line">  </div><div class="line">  referer<span class="selector-class">.target</span> = target</div><div class="line">  </div><div class="line">  print(refererDump())</div><div class="line">  print(targetDump())</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(targetDump()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(referer.target)</span></span></div><div class="line"><span class="function"><span class="title">print</span><span class="params">(refererDump()</span></span>)</div><div class="line"><span class="function"><span class="title">print</span><span class="params">(targetDump()</span></span>)</div></pre></td></tr></table></figure>
<p>我们一个一个看一下输出的内容。一开始，<code>target</code>属性为<code>nil</code>:</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakReferer <span class="number">0</span>x0000<span class="number">608000243450</span>: <span class="number">000000010</span>cec4c58 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>给<code>target</code>属性设置一个对象实例，<code>target</code>对象实例的内容为：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000357e0</span>: <span class="number">000000010</span>cec4d48 <span class="number">0000000200000004</span> <span class="number">0123456789</span>abcdef</div></pre></td></tr></table></figure>
<p>将对象实例赋给<code>target</code>属性，我们能够看到<code>weak</code>属性已经被赋值了，赋的值为<code>target</code>对象地址+2字节，既对于<code>weak</code>指针，它并不直接指向对象的地址，而是指向对象的<code>side table</code>（下文会讲到<code>side table</code>的概念），<code>unowned``strong</code>引用会直接指向对象：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakReferer <span class="number">0</span>x0000<span class="number">608000243450</span>: <span class="number">000000010</span>cec4c58 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00006080000357</span>e2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p><code>target</code>对象的内容块中有一个字段自增了2：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000357e0</span>: <span class="number">000000010</span>cec4d48 <span class="number">0000000400000004</span> <span class="number">0123456789</span>abcdef</div></pre></td></tr></table></figure>
<p><code>target</code>被析构：</p>
<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">WeakTarget deinit</span></div></pre></td></tr></table></figure>
<p>我们看到引用的对象依然保持着<code>target</code>的指针：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakReferer <span class="number">0</span>x0000<span class="number">608000243450</span>: <span class="number">000000010</span>cec4c58 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">00006080000357</span>e2 abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p>看上去好像<code>target</code>依然还存活着，我们看到<code>target</code>对象的有一个字段减了2：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000357e0</span>: <span class="number">000000010</span>cec4d48 <span class="number">0000000200000002</span> <span class="number">0123456789</span>abcdef</div></pre></td></tr></table></figure>
<p>访问一下<code>target</code>属性，此时会产生<code>nil</code>，尽管内容中的指针并没有被赋<code>nil</code>:</p>
<figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="literal">nil</span></div></pre></td></tr></table></figure>
<p>我们再打印一下<code>referer</code>对象的内容，发现访问完<code>target</code>属性后，<code>target</code>字段被修改了，赋为了<code>nil</code>：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakReferer <span class="number">0</span>x0000<span class="number">608000243450</span>: <span class="number">000000010</span>cec4c58 <span class="number">0000000200000004</span> <span class="number">1234321012343210</span> <span class="number">0000000000000000</span> abcdefabcdefabcd</div></pre></td></tr></table></figure>
<p><code>target</code>对象现在完全被清除了：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000357e0</span>: <span class="number">000000010</span>cec3370 <span class="number">0000000200000008</span> <span class="number">000000010</span>cebe200</div></pre></td></tr></table></figure>
<p>从上面的运行过程，我们发现某些字段会被增/减，我们进行一些测试，来看一下有没有规律：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> target = <span class="type">WeakTarget</span>()</div><div class="line"><span class="keyword">let</span> targetDump = dumperFunc(target)</div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> a = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> b = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> <span class="built_in">c</span> = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> d = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">weak</span> <span class="keyword">var</span> e = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> f = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> g = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> h = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> i = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> j = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">  <span class="keyword">var</span> k = target</div><div class="line">  <span class="built_in">print</span>(targetDump())</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(targetDump())</div></pre></td></tr></table></figure>
<p>打印结果为：</p>
<figure class="highlight dns"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000200000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000400000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000600000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000800000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>a<span class="number">00000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000008</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c0000000c <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000010</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000014</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c<span class="number">00000018</span> <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000</span>c0000001c <span class="number">0123456789</span>abcdef</div><div class="line">SwiftLearn.WeakTarget <span class="number">0</span>x000060<span class="number">80000395a0</span>: <span class="number">000000010</span>e8aad40 <span class="number">0000000200000004</span> <span class="number">0123456789</span>abcdef</div><div class="line">WeakTarget deinit</div></pre></td></tr></table></figure>
<p>从结果，我们能够看到，对于每一个<code>weak</code>引用，第2个块中的第一个数会自增2；而每一个<code>strong</code>引用，第二个数会自增4.</p>
<p>总结一下：</p>
<ul>
<li>弱指针看起来就是普通的指针。</li>
<li>当一个弱引用对象的<code>deinit</code>执行后，对象并没有被释放，且弱引用指针也没有被赋<code>nil</code>。</li>
<li>当弱引用执行完<code>deinit</code>后，访问弱引用对象，则对象指针会被赋<code>nil</code>,且目标对象被释放。</li>
<li>弱引用对象对于每一个弱引用会包含一个引用计数（<code>unowned</code>计数和<code>weak</code>计数为同一个），且与强引用计数分开统计。 </li>
</ul>
<h2 id="Swift代码"><a href="#Swift代码" class="headerlink" title="Swift代码"></a>Swift代码</h2><hr>
<p>接下来，我们看一下<code>Swift</code>实现的源代码。<br><code>Swift</code>标准库表示一个在堆上的对象的结构体为：</p>
<figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// The Swift3 heap-object header.</span></div><div class="line"><span class="keyword">struct</span> HeapObject &#123;</div><div class="line">  <span class="comment">/// This is always a valid pointer to a metadata object.</span></div><div class="line">  HeapMetadata <span class="keyword">const</span> *metadata;</div><div class="line"></div><div class="line">  SWIFT_HEAPOBJECT_NON_OBJC_MEMBERS;</div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> allocate two words of metadata on 32-bit platforms</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus</span></div><div class="line">  HeapObject() = <span class="built_in">default</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Initialize a HeapObject header as appropriate for a newly-allocated object.</span></div><div class="line">  <span class="keyword">constexpr</span> HeapObject(HeapMetadata <span class="keyword">const</span> *newMetadata) </div><div class="line">    : metadata(newMetadata)</div><div class="line">    , refCounts(InlineRefCounts::Initialized)</div><div class="line">  &#123; &#125;</div><div class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p><code>Swift</code>的<code>metadata</code>字段等同于<code>Objective-C</code>的<code>isa</code>字段，事实上，他们是兼容的。接着，使用了一个宏来定义字段，该字段用来管理引用计数：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">///Swift默认为InlineRefCounts，当有弱引用指向该对象时，InlineRefCounts会变为SideTableRefCounts</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> SWIFT_HEAPOBJECT_NON_OBJC_MEMBERS       \</span></div><div class="line">  InlineRefCounts refCounts</div></pre></td></tr></table></figure>
<p>Swift增加引用计数的方法如下：</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Increment the reference count.</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">increment</span><span class="params">(<span class="keyword">uint32_t</span> inc = <span class="number">1</span>)</span> </span>&#123;</div><div class="line">  <span class="keyword">auto</span> oldbits = refCounts.load(SWIFT_MEMORY_ORDER_CONSUME);</div><div class="line">  RefCountBits newbits;</div><div class="line">  <span class="keyword">do</span> &#123;</div><div class="line">    newbits = oldbits;</div><div class="line">    <span class="keyword">bool</span> fast = newbits.incrementStrongExtraRefCount(inc);</div><div class="line">    <span class="keyword">if</span> (!fast)</div><div class="line">      <span class="keyword">return</span> incrementSlow(oldbits, inc);</div><div class="line">  &#125; <span class="keyword">while</span> (!refCounts.compare_exchange_weak(oldbits, newbits,</div><div class="line">                                            <span class="built_in">std</span>::memory_order_relaxed));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>由于引用计数的管理有两种类型<code>InlineRefCounts</code>、<code>SideTableRefCounts</code>，当对象只包含<code>strong</code>或<code>unowned</code>引用时，使用<code>InlineRefCounts</code>进行计数管理，如果对象拥有了<code>weak</code>引用，则会使用<code>SideTableRefCounts</code>来管理计数。所以如上增加引用计数的函数，会考虑两种情况，<code>fast</code>对应<code>InlineRefCounts</code>，<code>slow</code>对应<br><code>SideTableRefCounts</code>，为了避免竞态条件，使用了<code>compare_exchange_weak</code>来进行赋值。</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="class">HeapObject </span>&#123;</div><div class="line">  isa</div><div class="line">  <span class="class">InlineRefCounts </span>&#123;</div><div class="line">    atomic<span class="params">&lt;InlineRefCountBits&gt;</span> &#123;</div><div class="line">      strong RC + unowned RC + flags</div><div class="line">      OR</div><div class="line">      HeapObjectSideTableEntry*</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class">HeapObjectSideTableEntry </span>&#123;</div><div class="line">  <span class="class">SideTableRefCounts </span>&#123;</div><div class="line">    object pointer</div><div class="line">    atomic<span class="params">&lt;SideTableRefCountBits&gt;</span> &#123;</div><div class="line">      strong RC + unowned RC + weak RC + flags</div><div class="line">    &#125;</div><div class="line">  &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接下来，看一下<code>weak</code>引用自减计数的函数操作过程，函数内调用<code>decrementWeakShouldCleanUp</code>来进行位数的操作，其返回一个<code>bool</code>值，既当<code>weak</code>、<code>strong</code>、<code>unowned</code>计数都变为0时，<code>bool</code>值返回<code>true</code>，说明可以收回内存了，既调用<code>delete</code>释放内存。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">decrementWeak</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> assertions</span></div><div class="line">  <span class="comment">// <span class="doctag">FIXME:</span> optimize barriers</span></div><div class="line">  <span class="keyword">bool</span> cleanup = refCounts.decrementWeakShouldCleanUp();</div><div class="line">  <span class="keyword">if</span> (!cleanup)</div><div class="line">    <span class="keyword">return</span>;</div><div class="line"></div><div class="line">  <span class="comment">// Weak ref count is now zero. Delete the side table entry.</span></div><div class="line">  <span class="comment">// FREED -&gt; DEAD</span></div><div class="line">  assert(refCounts.getUnownedCount() == <span class="number">0</span>);</div><div class="line">  <span class="keyword">delete</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此时，我们应该就比较清楚了，即使<code>strong</code>或<code>unowned</code>的计数为0，如果还存在<code>weak</code>弱引用，<br>那么对象也不会被释放。</p>
<p>接下来，我们可以看一下加载弱引用的过程，<code>Swift</code>通过<code>HeapObject *swift::swift_weakTakeStrong(WeakReference *ref)</code>函数来实现，该函数通过间接调用，最终调用<code>nativeTakeStrongFromBits</code>函数，该函数内部首先会调用<code>getNativeOrNull</code>方法，该方法会从对象的<code>side table</code>中查询对象的计数，当没有<code>strong</code>引用时，说明该对象已经处于<code>DEINITING</code>状态，函数会返回<code>nullptr</code>，否则将调用<code>tryRetain</code>函数来尝试<code>strong</code>对象。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">HeapObject *<span class="title">nativeTakeStrongFromBits</span><span class="params">(WeakReferenceBits bits)</span> </span>&#123;</div><div class="line">  <span class="keyword">auto</span> side = bits.getNativeOrNull();</div><div class="line">  <span class="keyword">if</span> (side) &#123;</div><div class="line">    side-&gt;decrementWeak();</div><div class="line">    <span class="keyword">return</span> side-&gt;tryRetain();</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nullptr</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当对象实例的<code>deinit()</code>方法被调用时，内部会调用<code>swift_deallocObject</code>函数，而它会通过调用<code>canBeFreedNow</code>函数来判断是否需要释放内存，既满足没有<code>side table</code>，<code>unowned</code>引用为1，<code>strong</code>引用计数为0。</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">bool </span>canBeFreedNow() const &#123;</div><div class="line">auto <span class="keyword">bits </span>= refCounts.load(<span class="keyword">SWIFT_MEMORY_ORDER_CONSUME);</span></div><div class="line">return (!<span class="keyword">bits.hasSideTable() </span>&amp;&amp;</div><div class="line">          <span class="keyword">bits.getIsDeiniting() </span>&amp;&amp;</div><div class="line">          <span class="keyword">bits.getStrongExtraRefCount() </span>== <span class="number">0</span> &amp;&amp;</div><div class="line">          <span class="keyword">bits.getUnownedRefCount() </span>== <span class="number">1</span>)<span class="comment">;</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>综上，如果还存在<code>weak</code><br>弱引用，那么肯定还有<code>side table</code>表，即使没有<code>strong</code>引用，也不会被释放。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<ol>
<li>弱引用指向对象实例的<code>side table</code>地址。</li>
<li>与<code>Objective-C</code>管理引用计数的方式不同，<code>Swift</code>的弱引用计数与<code>strong</code>计数一起管理。</li>
<li><code>Swift</code>针对对象的析构和对象的释放进行了解耦，一个对象被析构后，会释放它的外部资源，但是有可能不会释放对象本身的内存。</li>
<li>当<code>Swift</code>对象的<code>strong</code>引用计数变为0但是<code>weak</code>计数大于0时，对象会被析构但是不会被释放内存。</li>
<li>当加载一个弱引用时，运行时会检查<code>target</code>的状态<br>，如果<code>target</code>已经是僵尸对象，那么会赋空<code>weak</code>引用，<code>weak</code>计数减一，并返回<code>nil</code>,这个过程是安全的，当<code>weak</code>引用计数变为0时，僵尸对象内存将被释放。</li>
</ol>
<p>最后总结一下<code>Swift</code>与<code>Objective-C</code>的区别：</p>
<ul>
<li><code>Swift</code>不需要维护<code>weak</code>列表，这可以简化代码和提升性能。</li>
<li>对于<code>Swift</code>的<code>weak</code>引用，实例对象会在<code>strong</code>引用计数变为0时，内存依然保留，直到所有的<code>weak</code>引用离开作用域。不过这个影响是很小的，因为虽然对象分配的内存依然保留，但是它所有的外部资源（如<code>Array</code>、<code>Dictionary</code>属性）会在<code>strong</code>引用计数变为0时被释放。</li>
<li>由于<code>Swift</code>的<code>weak</code>创建后，对象的引用计数管理会从<code>InlineRefCounts</code>替换为<code>SideTableRefCounts</code>，这也会带来一定的开销，所以如果可以，尽量使用<code>unowned</code>,<code>unowned</code>有点类似于<code>Objective-C</code>的<code>__unsafe_unretained</code>，如果<code>unowned</code>指向僵尸对象后再访问，会产生未定义行为。</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ol>
<li><a href="https://github.com/apple/swift/blob/7913e9821b814956d243e4e03cfe9ddc0e325bc2/stdlib/public/SwiftShims/HeapObject.h" target="_blank" rel="external">https://github.com/apple/swift/blob/7913e9821b814956d243e4e03cfe9ddc0e325bc2/stdlib/public/SwiftShims/HeapObject.h</a></li>
<li><a href="https://github.com/apple/swift/blob/860252fab41392b7de3218e58f7542cb1dc1ce16/stdlib/public/runtime/WeakReference.h" target="_blank" rel="external">https://github.com/apple/swift/blob/860252fab41392b7de3218e58f7542cb1dc1ce16/stdlib/public/runtime/WeakReference.h</a></li>
<li><a href="https://github.com/apple/swift/blob/b7d78853112c1279fc7bc5b85853779040f13703/stdlib/public/SwiftShims/RefCount.h" target="_blank" rel="external">https://github.com/apple/swift/blob/b7d78853112c1279fc7bc5b85853779040f13703/stdlib/public/SwiftShims/RefCount.h</a></li>
<li><a href="https://github.com/apple/swift/blob/b7d78853112c1279fc7bc5b85853779040f13703/stdlib/public/SwiftShims/RefCount.h#L123-#L187" target="_blank" rel="external">Swift对象生命周期状态机</a></li>
<li><a href="https://www.mikeash.com/pyblog/friday-qa-2015-12-11-swift-weak-references.html" target="_blank" rel="external">https://www.mikeash.com/pyblog/friday-qa-2015-12-11-swift-weak-references.html</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;由于不同的&lt;code&gt;Swift&lt;/code&gt;版本引用计数实现会有不同，该文讨论的引用计数原理都基于&lt;code&gt;Swift3&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;弱引用&quot;&gt;&lt;a href=&quot;#弱引用&quot; class=&quot;headerlink&quot; title=&quot;弱引用&quot;&gt;&lt;/a&gt;弱引用&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;做&lt;code&gt;iOS&lt;/code&gt;开发时经常会遇到循环引用，如果处理不当会导致内存泄露，我们通常会使用&lt;code&gt;weak reference&lt;/code&gt;弱引用来解决该问题，因为弱引用不会&lt;code&gt;retain&lt;/code&gt;对象，当对象引用计数变为0时，弱引用指针将会被赋&lt;code&gt;nil&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;实现过程&quot;&gt;&lt;a href=&quot;#实现过程&quot; class=&quot;headerlink&quot; title=&quot;实现过程&quot;&gt;&lt;/a&gt;实现过程&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;通常如果实现弱引用，可以让每一个对象维护所有指向该对象的一个弱引用列表，当一个弱引用指向一个对象时，该引用被添加进列表，当弱引用重新赋值或生命期结束，则将其从列表中移除，当一个对象&lt;code&gt;dealloced&lt;/code&gt;后，列表中的所有引用会被赋&lt;code&gt;nil&lt;/code&gt;。在多线程环境中，需要对获得弱引用和释放对象的操作进行同步，以避免竞态条件，既当一个线程在释放最后一个强引用对象的同时，另一个线程正尝试加载该对象的弱引用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Objective-C&lt;/code&gt;实现的过程为，每一个弱引用是一个指向目标对象的指针，编译器会使用&lt;code&gt;helper&lt;/code&gt;函数，来避免直接读写指针，确保读取弱引用对象时不会返回正在被释放的对象指针。&lt;/p&gt;
&lt;h2 id=&quot;实战&quot;&gt;&lt;a href=&quot;#实战&quot; class=&quot;headerlink&quot; title=&quot;实战&quot;&gt;&lt;/a&gt;实战&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;接下来，我们将创建几个方法来观察弱引用的过程。&lt;br&gt;首先我们想要能够&lt;code&gt;dump&lt;/code&gt;出一个对象的内存，如下方法将获取一块内存，将其分成指针大小的块，再将其内容转成16进制，以便于观察：&lt;/p&gt;
&lt;figure class=&quot;highlight vim&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// Swift &lt;span class=&quot;keyword&quot;&gt;version&lt;/span&gt;: Swift3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;func contents(&lt;span class=&quot;keyword&quot;&gt;ptr&lt;/span&gt;: UnsafeRawPointer, _ length: Int) -&amp;gt; String &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; wordPtr = &lt;span class=&quot;keyword&quot;&gt;ptr&lt;/span&gt;.assumingMemoryBound(&lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt;: UInt.self)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; words = length / MemoryLayout&lt;span class=&quot;symbol&quot;&gt;&amp;lt;UInt&amp;gt;&lt;/span&gt;.size&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; wordChars = MemoryLayout&lt;span class=&quot;symbol&quot;&gt;&amp;lt;UInt&amp;gt;&lt;/span&gt;.size * &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;buffer&lt;/span&gt; = UnsafeBufferPointer&lt;span class=&quot;symbol&quot;&gt;&amp;lt;UInt&amp;gt;&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;star&lt;/span&gt;&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; wordPtr, coun&lt;span class=&quot;variable&quot;&gt;t:&lt;/span&gt; words)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; wordStrings = &lt;span class=&quot;keyword&quot;&gt;buffer&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;map&lt;/span&gt;(&amp;#123; word -&amp;gt; String in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        var wordString = String(word, radix: &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; wordString.characters.&lt;span class=&quot;built_in&quot;&gt;count&lt;/span&gt; &amp;lt; wordChars &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            wordString = &lt;span class=&quot;string&quot;&gt;&quot;0&quot;&lt;/span&gt; + wordString&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wordString&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; wordStrings.joined(separator: &lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS开发-语言" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://zhongwuzw.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>GCD队列管理之YYDispatchQueuePool</title>
    <link href="https://zhongwuzw.github.io/2017/06/05/GCD%E9%98%9F%E5%88%97%E7%AE%A1%E7%90%86%E4%B9%8BYYDispatchQueuePool/"/>
    <id>https://zhongwuzw.github.io/2017/06/05/GCD队列管理之YYDispatchQueuePool/</id>
    <published>2017-06-05T13:33:44.000Z</published>
    <updated>2017-06-06T01:26:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p><code>iOS</code>中，我们经常使用<code>GCD</code>来进行并发操作，我们并不需要关心线程的管理，<code>Dispatch Queue</code>会自动帮我们处理线程的创建和释放，在极大的简化并发操作的同时，某些情况下，<code>Dispatch Queue</code>的滥用可能会导致应用挂起，如向并发队列中添加阻塞的<code>Block</code>，阻塞的<code>Block</code>会导致系统创建更多的线程来处理任务，而<code>GCD</code>线程池的最大线程数为64个，所以一旦达到最大值，应用将挂起。<br>接下来，我将列出一些解决方案，来更好的使用<code>Dispatch Queue</code>。</p>
<h2 id="YYDispatchQueue"><a href="#YYDispatchQueue" class="headerlink" title="YYDispatchQueue"></a>YYDispatchQueue</h2><hr>
<p><a href="https://github.com/ibireme/YYDispatchQueuePool" target="_blank" rel="external">YYDispatchQueue</a>的主要思想是使用串行队列来替换并发队列，可以为指定的<code>NSQualityOfService</code>创建一个队列池，由<code>YYDispatchQueuePool</code>对象来进行管理，每一种<code>NSQualityOfService</code>最多可以创建32个串行队列，通过<code>- (dispatch_queue_t)queue;</code>方法来获取可用队列，其采用<code>Round Robin</code>轮询算法。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-05%20%E4%B8%8B%E5%8D%8811.28.12.png" alt=""></p>
<p>除了可以创建队列池来管理并发外，还可以通过<code>C</code>的全局函数（<code>dispatch_queue_t YYDispatchQueueGetForQOS(NSQualityOfService qos)</code>）来获取特定的<code>NSQualityOfService</code>串行队列，队列由全局的队列池来管理，每一种<code>NSQualityOfService</code>的串行队列数与核数相同，这样可以尽可能的减少线程之间的上下文切换。</p>
<a id="more"></a>
<p><code>YYDispatchQueuePool</code>对象使用<code>YYDispatchContext``struct</code>来管理队列池，代码目前还存在内存泄露的问题，因为<code>struct</code>是在堆上分配的内存，最后使用<code>YYDispatchContextRelease</code>释放<code>context</code>时只释放了结构体成员的内存空间，而没有释放结构体自己申请的空间，解决方法如下注释，加上<code>free(context)</code>即可。</p>
<figure class="highlight cpp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> &#123;</div><div class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name;</div><div class="line">    <span class="keyword">void</span> **queues;</div><div class="line">    <span class="keyword">uint32_t</span> queueCount;</div><div class="line">    <span class="keyword">int32_t</span> counter;</div><div class="line">&#125; YYDispatchContext;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">YYDispatchContextRelease</span><span class="params">(YYDispatchContext *context)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (!context) <span class="keyword">return</span>;</div><div class="line">    <span class="keyword">if</span> (context-&gt;queues) &#123;</div><div class="line">        <span class="keyword">for</span> (NSUInteger i = <span class="number">0</span>; i &lt; context-&gt;queueCount; i++) &#123;</div><div class="line">            <span class="keyword">void</span> *queuePointer = context-&gt;queues[i];</div><div class="line">            <span class="keyword">dispatch_queue_t</span> <span class="built_in">queue</span> = (<span class="number">__b</span>ridge_transfer <span class="keyword">dispatch_queue_t</span>)(queuePointer);</div><div class="line">            <span class="keyword">const</span> <span class="keyword">char</span> *name = dispatch_queue_get_label(<span class="built_in">queue</span>);</div><div class="line">            <span class="keyword">if</span> (name) <span class="built_in">strlen</span>(name); <span class="comment">// avoid compiler warning</span></div><div class="line">            <span class="built_in">queue</span> = nil;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">free</span>(context-&gt;queues);</div><div class="line">        context-&gt;queues = <span class="literal">NULL</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (context-&gt;name) <span class="built_in">free</span>((<span class="keyword">void</span> *)context-&gt;name);</div><div class="line">    <span class="comment">//内存泄露，需添加  free(context);</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="NSOperationQueue"><a href="#NSOperationQueue" class="headerlink" title="NSOperationQueue"></a>NSOperationQueue</h2><hr>
<p>使用<code>NSOperationQueue</code>，设置<code>maxConcurrentOperationCount</code>来控制并发量。</p>
<h2 id="Dispatch-Semaphores"><a href="#Dispatch-Semaphores" class="headerlink" title="Dispatch Semaphores"></a>Dispatch Semaphores</h2><hr>
<p>使用<code>Dispatch Queue</code>时，可以用信号量来控制并发的数量，<code>GCD</code>提供信号量的支持，<code>dispatch_semaphore_t</code>用来表示信号量。在往队列添加任务之前，可以使用<code>dispatch_semaphore_wait</code>来获取信号量，成功获取后即可往队列中添加任务，当任务完成时，使用<code>dispatch_semaphore_signal</code>来释放信号量。</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 示例代码需要封装一下，不要直接在主线程或次级线程中直接调用dispatch_semaphore_wait，可能会引发UI挂起</span></div><div class="line"><span class="params">...</span></div><div class="line">dispatch_semaphore_t concurrencyLimitingSemaphore = dispatch_semaphore_create(limit);</div><div class="line"><span class="params">...</span></div><div class="line"></div><div class="line">dispatch_semaphore_wait(concurrencyLimitingSemaphore, DISPATCH_TIME_FOREVER);</div><div class="line">dispatch_async(someConcurrentQueue, ^&#123;</div><div class="line">    <span class="comment">/* work goes here */</span></div><div class="line">    dispatch_semaphore_signal(concurrencyLimitingSemaphore);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ol>
<li><a href="https://stackoverflow.com/questions/7213845/number-of-threads-created-by-gcd" target="_blank" rel="external">https://stackoverflow.com/questions/7213845/number-of-threads-created-by-gcd</a></li>
<li><a href="https://github.com/ibireme/YYDispatchQueuePool" target="_blank" rel="external">https://github.com/ibireme/YYDispatchQueuePool</a></li>
<li><a href="https://developer.apple.com/library/content/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW24" target="_blank" rel="external">https://developer.apple.com/library/content/documentation/General/Conceptual/ConcurrencyProgrammingGuide/OperationQueues/OperationQueues.html#//apple_ref/doc/uid/TP40008091-CH102-SW24</a></li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;iOS&lt;/code&gt;中，我们经常使用&lt;code&gt;GCD&lt;/code&gt;来进行并发操作，我们并不需要关心线程的管理，&lt;code&gt;Dispatch Queue&lt;/code&gt;会自动帮我们处理线程的创建和释放，在极大的简化并发操作的同时，某些情况下，&lt;code&gt;Dispatch Queue&lt;/code&gt;的滥用可能会导致应用挂起，如向并发队列中添加阻塞的&lt;code&gt;Block&lt;/code&gt;，阻塞的&lt;code&gt;Block&lt;/code&gt;会导致系统创建更多的线程来处理任务，而&lt;code&gt;GCD&lt;/code&gt;线程池的最大线程数为64个，所以一旦达到最大值，应用将挂起。&lt;br&gt;接下来，我将列出一些解决方案，来更好的使用&lt;code&gt;Dispatch Queue&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;YYDispatchQueue&quot;&gt;&lt;a href=&quot;#YYDispatchQueue&quot; class=&quot;headerlink&quot; title=&quot;YYDispatchQueue&quot;&gt;&lt;/a&gt;YYDispatchQueue&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/ibireme/YYDispatchQueuePool&quot;&gt;YYDispatchQueue&lt;/a&gt;的主要思想是使用串行队列来替换并发队列，可以为指定的&lt;code&gt;NSQualityOfService&lt;/code&gt;创建一个队列池，由&lt;code&gt;YYDispatchQueuePool&lt;/code&gt;对象来进行管理，每一种&lt;code&gt;NSQualityOfService&lt;/code&gt;最多可以创建32个串行队列，通过&lt;code&gt;- (dispatch_queue_t)queue;&lt;/code&gt;方法来获取可用队列，其采用&lt;code&gt;Round Robin&lt;/code&gt;轮询算法。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-06-05%20%E4%B8%8B%E5%8D%8811.28.12.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;除了可以创建队列池来管理并发外，还可以通过&lt;code&gt;C&lt;/code&gt;的全局函数（&lt;code&gt;dispatch_queue_t YYDispatchQueueGetForQOS(NSQualityOfService qos)&lt;/code&gt;）来获取特定的&lt;code&gt;NSQualityOfService&lt;/code&gt;串行队列，队列由全局的队列池来管理，每一种&lt;code&gt;NSQualityOfService&lt;/code&gt;的串行队列数与核数相同，这样可以尽可能的减少线程之间的上下文切换。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发-项目" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://zhongwuzw.github.io/tags/Objective-C/"/>
    
      <category term="GCD" scheme="https://zhongwuzw.github.io/tags/GCD/"/>
    
  </entry>
  
  <entry>
    <title>iOS浏览器-WebBrowser</title>
    <link href="https://zhongwuzw.github.io/2017/05/26/iOS%E6%B5%8F%E8%A7%88%E5%99%A8-WebBrowser/"/>
    <id>https://zhongwuzw.github.io/2017/05/26/iOS浏览器-WebBrowser/</id>
    <published>2017-05-26T10:22:11.000Z</published>
    <updated>2017-07-22T15:50:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>一款用于网页浏览的APP（Web Browser For iOS)。<a href="https://github.com/zhongwuzw/WebBrowser" target="_blank" rel="external">Github地址</a></p>
<h2 id="Features-功能"><a href="#Features-功能" class="headerlink" title="Features - 功能"></a>Features - 功能</h2><ol>
<li>多Tab页浏览(multi-tab browsing)</li>
<li>冷启动恢复浏览记录，包括当前页及前进后退页面(session restore, includes current page and backforward list)</li>
<li>书签、历史记录管理(bookmark、history manage)</li>
<li>页内查找(find in page)</li>
<li>点击标题栏进行页面访问或搜索(tap the title bar to  input url for surf or key to search)</li>
<li>自动监控剪切板<code>URL</code>，可在新窗口中打开</li>
</ol>
<h2 id="Usage-用法"><a href="#Usage-用法" class="headerlink" title="Usage - 用法"></a>Usage - 用法</h2><ol>
<li><code>clone</code> or download zip file.</li>
<li>Run command <code>carthage update --platform iOS</code></li>
<li>Just run WebBrowser.xcodeproj</li>
</ol>
<h2 id="Requirements-依赖"><a href="#Requirements-依赖" class="headerlink" title="Requirements - 依赖"></a>Requirements - 依赖</h2><ul>
<li>iOS 8.0 or higher</li>
<li>ARC</li>
<li><a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a></li>
</ul>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><h4 id="1-Home-Page-主页-："><a href="#1-Home-Page-主页-：" class="headerlink" title="1. Home Page (主页)："></a>1. Home Page (主页)：</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/home_scroll.gif" alt="home page"><br></p>


<h4 id="2-Multi-tab-多窗口-："><a href="#2-Multi-tab-多窗口-：" class="headerlink" title="2. Multi-tab (多窗口)："></a>2. Multi-tab (多窗口)：</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/home_tab_switch.gif" alt="tab"><br></p>

<p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/tab_manage.gif" alt="tab"><br></p>

<h4 id="3-Search-搜索-："><a href="#3-Search-搜索-：" class="headerlink" title="3. Search (搜索)："></a>3. Search (搜索)：</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/home_search.gif" alt="search"><br></p>

<h4 id="4-No-Image-Mode-无图模式"><a href="#4-No-Image-Mode-无图模式" class="headerlink" title="4. No Image Mode (无图模式)"></a>4. No Image Mode (无图模式)</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/no-image-mode.gif" alt="no image mode"><br></p>

<h4 id="5-History-历史"><a href="#5-History-历史" class="headerlink" title="5. History (历史)"></a>5. History (历史)</h4><ol>
<li>Long Press to select options. (长按记录可弹出选项按钮)</li>
<li>Tap to open history in current window.(点击记录会在当前窗口打开历史页面)<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/history.gif" alt="history"><br></p>

</li>
</ol>
<h4 id="6-Favorite-收藏"><a href="#6-Favorite-收藏" class="headerlink" title="6. Favorite (收藏)"></a>6. Favorite (收藏)</h4><h5 id="In-non-editing-mode-在非编辑模式下操作"><a href="#In-non-editing-mode-在非编辑模式下操作" class="headerlink" title="In non-editing mode (在非编辑模式下操作)"></a>In non-editing mode (在非编辑模式下操作)</h5><ol>
<li><p>Long press on directory to edit directory name in non-editing mode.(长按目录来编辑目录名字)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_edit_long_section.gif" alt="favorite"><br></p>
</li>
<li><p>Long press on bookmark item to edit bookmark’s url, name, directory in non-editing mode.(长按书签项来编辑书签的地址、名字、以及所在目录)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_long_edit_item.gif" alt="favorite"><br></p>

</li>
</ol>
<h5 id="In-editing-mode-在编辑模式下"><a href="#In-editing-mode-在编辑模式下" class="headerlink" title="In editing mode (在编辑模式下)"></a>In editing mode (在编辑模式下)</h5><ol>
<li><p>reorder, delete directory in editing mode.(删除、排序目录)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_edit_section.gif" alt="favorite"><br></p>
</li>
<li><p>click “新文件夹” button to add new directory in editing mode.(点击”新文件夹”按钮来创建新的目录)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_add_section.gif" alt="favorite"><br></p>
</li>
<li><p>reorder, delete bookmark in editing mode.(删除、排序书签)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_edit_item.gif" alt="favorite"><br></p>
</li>
<li><p>add new bookmark.(添加新书签)</p>
<p align="center"><br><img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/bookmark_add.gif" alt="favorite"><br></p>

</li>
</ol>
<h4 id="7-find-in-page-页内查找"><a href="#7-find-in-page-页内查找" class="headerlink" title="7. find in page (页内查找)"></a>7. find in page (页内查找)</h4><p align="center"><br>  <img src="https://raw.githubusercontent.com/zhongwuzw/WebBrowser/master/images/findinpage.gif" alt="find in page"><br></p>

<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><p>The MIT License (MIT)</p>
<p>Copyright (c) 2017 Zhong Wu</p>
<p>Permission is hereby granted, free of charge, to any person obtaining a copy<br>of this software and associated documentation files (the “Software”), to deal<br>in the Software without restriction, including without limitation the rights<br>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>copies of the Software, and to permit persons to whom the Software is<br>furnished to do so, subject to the following conditions:</p>
<p>The above copyright notice and this permission notice shall be included in all<br>copies or substantial portions of the Software.</p>
<p>THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<br>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<br>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE<br>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<br>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<br>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE<br>SOFTWARE.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一款用于网页浏览的APP（Web Browser For iOS)。&lt;a href=&quot;https://github.com/zhongwuzw/WebBrowser&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Github地址&lt;/a&gt;&lt;/p&gt;
&lt;h2 i
    
    </summary>
    
      <category term="iOS开发-项目" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://zhongwuzw.github.io/tags/Objective-C/"/>
    
      <category term="浏览器" scheme="https://zhongwuzw.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
      <category term="项目开发" scheme="https://zhongwuzw.github.io/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>WWDC-Session406-优化App启动时间</title>
    <link href="https://zhongwuzw.github.io/2017/05/01/WWDC-Session406-%E4%BC%98%E5%8C%96App%E5%90%AF%E5%8A%A8%E6%97%B6%E9%97%B4/"/>
    <id>https://zhongwuzw.github.io/2017/05/01/WWDC-Session406-优化App启动时间/</id>
    <published>2017-05-01T15:46:05.000Z</published>
    <updated>2017-06-17T15:55:36.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="理论"><a href="#理论" class="headerlink" title="理论"></a>理论</h2><hr>
<h3 id="Mach-O"><a href="#Mach-O" class="headerlink" title="Mach-O"></a>Mach-O</h3><h4 id="Mach-O相关术语"><a href="#Mach-O相关术语" class="headerlink" title="Mach-O相关术语"></a>Mach-O相关术语</h4><p><code>Mach-O</code>为<code>Mach Object</code>文件格式的缩写，它是一种用于可执行文件，目标代码，动态库，内核转储的文件格式。它包括多种文件类型：</p>
<ul>
<li><code>Executable</code>(可执行文件)：App的主二进制文件</li>
<li><code>Dylib</code>：动态库（如<code>DSO</code>、<code>DLL</code>)</li>
<li><code>Bundle</code>：不能被链接的动态库，只能通过<code>dlopen()</code>，用于<code>Mac OS</code>。</li>
</ul>
<p><code>Image</code>：可以是可执行文件、动态库或者<code>bundle</code>。<br><code>Framework</code>：动态库，包含资源和头文件。</p>
<h4 id="Mach-O-Image文件"><a href="#Mach-O-Image文件" class="headerlink" title="Mach-O Image文件"></a>Mach-O Image文件</h4><p>文件由多个<code>segment</code>(<code>段</code>)组成，每一个<code>段</code>由多个<code>page</code>(<code>页</code>)组成，<code>段</code>的大小为<code>页</code>大小的整数倍。如下图，<code>TEXT段</code>占3<code>页</code>，<code>DATA</code>、<code>LINKEDIT</code>分别占1<code>页</code>。<code>页</code>的大小取决于硬件，在<code>arm64</code>下，<code>页</code>大小为16K，其它则为4K。<br><img src="http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-02%20%E4%B8%8B%E5%8D%8810.24.03.png" alt=""></p>
<p>我们还可以从<code>section</code>(节)的角度来理解<code>段</code>,编译器对<code>section</code>是透明的，<code>section</code>仅仅是一个<code>段</code>的子区间，它没有任何的大小约束，但是<code>section</code>之间不会重叠。<br><img src="http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-02%20%E4%B8%8B%E5%8D%8810.41.36.png" alt=""></p>
<p>事实上，每一个二进制文件都包含<code>TEXT</code>、<code>DATA</code>、<code>LINKEDIT</code>这3个通用的<code>段</code>，<code>TEXT</code>位于文件的开始，它包括<code>Mach header</code>，机器指令，代码以及只读常量如C字符串，<code>DATA段</code>是可读写的，其包括所有的全局变量，静态变量等。<code>LINKEDIT</code>包含加载程序的<code>meta data</code>(元数据)。</p>
<a id="more"></a>
<h4 id="Mach-O-Universal-Files"><a href="#Mach-O-Universal-Files" class="headerlink" title="Mach-O Universal Files"></a>Mach-O Universal Files</h4><p>当我们在编译iOS应用时，会针对不同的设备架构编译出两个Mach-O文件，64位（arm64）、32位（如armv7s)，之后将这两个文件合并成一个文件，这个文件就叫<code>Mach-O universal file</code>。该文件包含一个<code>Fat header</code>，其包含所有架构的列表，并且其在文件中的偏移量。<code>header</code>占1<code>页</code>空间，后面，将讲述为什么需要占1<code>页</code>空间，其中涉及到虚拟内存的知识。<br><img src="http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-04%20%E4%B8%8A%E5%8D%8811.50.25.png" alt=""></p>
<h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>每一个进程都是一个逻辑地址空间，逻辑地址会被映射到RAM的物理页中，当然，这个映射并不是一对一的，逻辑地址不需要在一开始就映射到物理内存，多个逻辑地址也可以映射到相同的物理RAM。<br>如果逻辑地址没有映射到物理RAM，当访问该逻辑地址时，会发生缺页中断，这时，内核会暂停执行该线程，去处理缺页中断；当多个进程，不同的逻辑地址，被映射到相同的物理页时，这些进程就可以共享相同的bit（位），做到进程间共享。<br>还有一个特点是文件映射，通过mmap函数，可以不用将整个文件加载到RAM中，而把文件的片段映射到进程的内存地址中，所以，在访问没有映射的地址时，内核将生成缺页中断。<br>综上，我们可以总结出，动态库或<code>image</code>的<code>TEXT段</code>可以被映射到多个进程中，其是懒加载的（即使用mmap），且共享。<code>DATA段</code>是可读写的，所以采用了写时复制（COW，Copy-On-Write）的策略，即当有进程对<code>DATA</code>进行写时，才发生复制的操作，内核会拷贝被修改页到另一个物理RAM并将映射重定向该位置，这时，该进程就拥有了该<code>页</code>的拷贝，该拷贝页被称为<code>dirty page</code>，<code>dirty page</code>包含了进程的特定信息;内核可以重新生成的<code>page</code>称为<code>clean page</code>，当需要访问该页时，可以从磁盘重新读出，显然<code>dirty page</code>代价比<code>clean page</code>大。<br>接下来，将举一个实例来讲述一下Mach-O和虚拟内存之间的映射。如示例，有一个Mach-O文件，我们将其映射到内存中，而不是将其全部读入内存，如果全部读入内存，需占用8<code>页</code>，而使用映射，其中的ZeroFill将不需要占用空间，节省内存，为什么会不需要分配内存呢，原因就是大多数的全局变量初始化为0，所以可以对此进行优化，将所有为零的全局变量移到末尾，且不占用磁盘空间，当第一次访问ZeroFill<code>页</code>时，直接赋空，所以，其并不需要进行读操作。dyld一开始会读<code>Mach header</code>，由于其没有映射到物理页，内核将产生缺页中断，VM会读取文件的Mach-O文件的第一页到物理页中，并设置映射，这时，dyld就能开始读取<code>Mach header</code>，读取完<code>Mach header</code>后，<code>Mach header</code>会声称有一些信息保存在<code>LINKEDIT</code>中，需要读取，这时，dyld会跳到进程1的空间底部，进行<code>LINKEDIT</code>的读取，此时，由于内存中没有，内核会进行和之前读取<code>Mach header</code>时一样的操作，产生缺页中断，读取到物理内存并完成映射，处理完<code>LINKEDIT</code>后，<code>LINKEDIT</code>会告诉dyld，其需要对<code>DATA页</code>进行<code>fix-up</code>（调整）以便让该动态库可运行，此时，内核又会进行之前的操作，不过这次有一些不同，因为该动态库会对<code>DATA</code>进行修改，所以，此时会进行写时复制的操作，该<code>页</code>将变为<code>dirty page</code>，此时，内存中就存在两<code>页clean page</code>和一<code>页dirty page</code>。<br>此时，如果又有第二个进程加载相同的动态库，此时，在第二个进程中，dyld也会进行相同的步骤。<br>首先，它会进行<code>Mach header</code>的读取，由于该<code>页</code>已经在RAM中了，所以内核只是简单的将其映射重定向到该<code>页</code>，不需要进行IO，<code>LINKEDIT</code>的读取也是如此，此时到了<code>DATA页</code>，内核会查询RAM中是否存在该<code>DATA页</code>，且是<code>clean page</code>，如果找到，则重用，否则，重新进行读取操作，在该例中，<code>DATA页</code>是<code>dirty page</code>，所以需要再申请一个新的物理<code>页</code>来进行映射，进程2需修改<code>DATA页</code>，所以<code>DATA页</code>同样标识为<code>dirty page</code>。<br>最后，由于<code>LINKEDIT页</code>只有在dyld进行处理时需要，所以，一旦dyld完成处理，这些<code>LINKEDIT页</code>占用的空间就可以被收回。这样，这个例子，最终我们仅仅拥有2个<code>dirty page</code>，1个<code>clean</code>，共享的<code>page</code>（<code>LINKEDIT页</code>空间被收回）。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-04%20%E4%B8%8B%E5%8D%8811.18.15.png" alt=""></p>
<h3 id="exec"><a href="#exec" class="headerlink" title="exec()"></a>exec()</h3><p><code>exec</code>是一个系统调用，内核会清理地址空间，将需要运行的可执行文件映射到空间中，且是一个随机地址，接下来，从该地址到0x000000，将被标记为不可读、写和可执行，该区域的大小将不小于4KB（对于32位进程）或4GB（对于64位进程）。<br><img src="http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-04%20%E4%B8%8B%E5%8D%8811.51.10.png" alt=""><br>现代程序都会使用共享库，如Unix中so，所以，当内核完成进程的映射后，将会把dyld映射到另一个随机的地址，并让dyld来完成进程的启动。<br><img src="http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-04%20%E4%B8%8B%E5%8D%8811.59.02.png" alt=""><br>此时，dyld运行在进程中，并负责加载依赖的所有动态库，准备好并运行。<br>在整个dyld处理的过程中，需要如下图所示的几步，首先，dyld加载所有依赖的动态库（通过读取主可执行文件的<code>header</code>来获得依赖库列表），在加载时，存在某个动态库依赖其他动态库的情况，这个过程是递归执行的。一般，进程会加载100到400个动态库，幸运的是，这些库很多都是系统库，系统已经提前加载缓存了。<br><img src="http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-05%20%E4%B8%8B%E5%8D%886.24.44.png" alt=""><br>接下来是<code>rebasing</code>和<code>binding</code>，两者的区别是<code>rebasing</code>是当指针指向自己的<code>image</code>而做出调整（调整起来很简单，加一个offset就可以），<code>binding</code>是指针指向其他的<code>image</code>而做出调整。调整都是在<code>DATA页</code>中进行。<br>有人会问，为什么会需要进行调整呢。由于安全原因，所以不能直接修改指令，所以当一个动态库需要调用其它的动态库时，需要在其中加一个间接层，在<code>DATA段</code>中来创建一个指针指向调用的地址，这就涉及到指针的调整，dyld就负责这些操作。<br>Objective-C的类结构指针、方法指针等，也都是通过<code>rebasing</code>或<code>binding</code>来进行调整，由于Objective-C是动态语言，我们可以通过字符串来创建一个类实例，所以Objective-C Run time需要维护一个包括所有类名的映射。<br>使用过C++的开发者应该知道，C++存在Fragile基类的问题，Objective-C则没有这个问题，因为在加载时，dyld会动态调整所有实例变量的偏移。<br>处理完前面的操作，如果有C++，这个时候dyld会调用初始化器；如果有Objective-C，类别会被添加到方法列表中，且会调用<code>+load</code>方法，当然，我们已经不推荐使用它了，建议使用<code>+initialize</code>方法。<br>最终，我们才调用<code>main()</code>。</p>
<h2 id="将理论应用到实际"><a href="#将理论应用到实际" class="headerlink" title="将理论应用到实际"></a>将理论应用到实际</h2><hr>
<ul>
<li>通过设置环境变量<code>DYLD_PRINT_STATISTICS</code>，可以打印出dyld加载相关信息，包括每部分消耗的时间。</li>
<li>前面提到，app平均会有100到400个动态库，但是很多库，系统都已经加载了，但是，有些动态库是无法被系统提前加载的，就是我们内嵌在app中的动态库，所以，加载这些动态库时会带来一些消耗，想要解决这个问题，我们可以将多个动态库合并，可以使用使用静态库；还可以使用延迟加载，既通过<code>dlopen</code>，不过需要注意的是，<code>dlopen</code>会带来性能和正确性问题，因为它虽然做到了延迟，但是之后需要更多的操作。</li>
<li>减少Objective-C类对象和实例变量的数量，因为，如之前所说，数量太多，会增加<code>rebasing</code>或<code>binding</code>的时间。</li>
<li>减少C++虚函数的使用，因为虚函数会创建虚表，其需要在<code>DATA</code>中创建结构且需要进行调整。</li>
<li>使用Swift，Swift做了很多优化，避免了很多操作。</li>
<li>推荐用<code>+initialize</code>来替换<code>+load</code>。</li>
<li>不要在初始化器中起线程。</li>
<li><code>iOS11</code>后，可以通过<code>Instruments</code>来跟踪静态初始化器的时间。</li>
</ul>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<p><a href="https://developer.apple.com/videos/play/wwdc2016/406/?time=690" target="_blank" rel="external">Optimizing App Startup Time</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;理论&quot;&gt;&lt;a href=&quot;#理论&quot; class=&quot;headerlink&quot; title=&quot;理论&quot;&gt;&lt;/a&gt;理论&lt;/h2&gt;&lt;hr&gt;
&lt;h3 id=&quot;Mach-O&quot;&gt;&lt;a href=&quot;#Mach-O&quot; class=&quot;headerlink&quot; title=&quot;Mach-O&quot;&gt;&lt;/a&gt;Mach-O&lt;/h3&gt;&lt;h4 id=&quot;Mach-O相关术语&quot;&gt;&lt;a href=&quot;#Mach-O相关术语&quot; class=&quot;headerlink&quot; title=&quot;Mach-O相关术语&quot;&gt;&lt;/a&gt;Mach-O相关术语&lt;/h4&gt;&lt;p&gt;&lt;code&gt;Mach-O&lt;/code&gt;为&lt;code&gt;Mach Object&lt;/code&gt;文件格式的缩写，它是一种用于可执行文件，目标代码，动态库，内核转储的文件格式。它包括多种文件类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Executable&lt;/code&gt;(可执行文件)：App的主二进制文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Dylib&lt;/code&gt;：动态库（如&lt;code&gt;DSO&lt;/code&gt;、&lt;code&gt;DLL&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Bundle&lt;/code&gt;：不能被链接的动态库，只能通过&lt;code&gt;dlopen()&lt;/code&gt;，用于&lt;code&gt;Mac OS&lt;/code&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Image&lt;/code&gt;：可以是可执行文件、动态库或者&lt;code&gt;bundle&lt;/code&gt;。&lt;br&gt;&lt;code&gt;Framework&lt;/code&gt;：动态库，包含资源和头文件。&lt;/p&gt;
&lt;h4 id=&quot;Mach-O-Image文件&quot;&gt;&lt;a href=&quot;#Mach-O-Image文件&quot; class=&quot;headerlink&quot; title=&quot;Mach-O Image文件&quot;&gt;&lt;/a&gt;Mach-O Image文件&lt;/h4&gt;&lt;p&gt;文件由多个&lt;code&gt;segment&lt;/code&gt;(&lt;code&gt;段&lt;/code&gt;)组成，每一个&lt;code&gt;段&lt;/code&gt;由多个&lt;code&gt;page&lt;/code&gt;(&lt;code&gt;页&lt;/code&gt;)组成，&lt;code&gt;段&lt;/code&gt;的大小为&lt;code&gt;页&lt;/code&gt;大小的整数倍。如下图，&lt;code&gt;TEXT段&lt;/code&gt;占3&lt;code&gt;页&lt;/code&gt;，&lt;code&gt;DATA&lt;/code&gt;、&lt;code&gt;LINKEDIT&lt;/code&gt;分别占1&lt;code&gt;页&lt;/code&gt;。&lt;code&gt;页&lt;/code&gt;的大小取决于硬件，在&lt;code&gt;arm64&lt;/code&gt;下，&lt;code&gt;页&lt;/code&gt;大小为16K，其它则为4K。&lt;br&gt;&lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-02%20%E4%B8%8B%E5%8D%8810.24.03.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们还可以从&lt;code&gt;section&lt;/code&gt;(节)的角度来理解&lt;code&gt;段&lt;/code&gt;,编译器对&lt;code&gt;section&lt;/code&gt;是透明的，&lt;code&gt;section&lt;/code&gt;仅仅是一个&lt;code&gt;段&lt;/code&gt;的子区间，它没有任何的大小约束，但是&lt;code&gt;section&lt;/code&gt;之间不会重叠。&lt;br&gt;&lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202017-05-02%20%E4%B8%8B%E5%8D%8810.41.36.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;事实上，每一个二进制文件都包含&lt;code&gt;TEXT&lt;/code&gt;、&lt;code&gt;DATA&lt;/code&gt;、&lt;code&gt;LINKEDIT&lt;/code&gt;这3个通用的&lt;code&gt;段&lt;/code&gt;，&lt;code&gt;TEXT&lt;/code&gt;位于文件的开始，它包括&lt;code&gt;Mach header&lt;/code&gt;，机器指令，代码以及只读常量如C字符串，&lt;code&gt;DATA段&lt;/code&gt;是可读写的，其包括所有的全局变量，静态变量等。&lt;code&gt;LINKEDIT&lt;/code&gt;包含加载程序的&lt;code&gt;meta data&lt;/code&gt;(元数据)。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发-项目" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="优化" scheme="https://zhongwuzw.github.io/tags/%E4%BC%98%E5%8C%96/"/>
    
      <category term="WWDC" scheme="https://zhongwuzw.github.io/tags/WWDC/"/>
    
  </entry>
  
  <entry>
    <title>服务器之从裸机到可用</title>
    <link href="https://zhongwuzw.github.io/2017/03/14/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B9%8B%E4%BB%8E%E8%A3%B8%E6%9C%BA%E5%88%B0%E5%8F%AF%E7%94%A8/"/>
    <id>https://zhongwuzw.github.io/2017/03/14/服务器之从裸机到可用/</id>
    <published>2017-03-14T04:16:24.000Z</published>
    <updated>2017-04-24T15:03:47.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>对于服务器，程序员们还是很熟悉的，任何一个互联网产品，背后几乎都离不开服务器，所有的服务，背后都是通过服务器来提供的，接下来，我将列出从裸机到可用的基本步骤，示例的服务器为<code>HP ProLiant Gen9</code>，当然，其他的服务器如<code>IBM</code>等，基本步骤也都是类似的。</p>
<h2 id="配置管理口"><a href="#配置管理口" class="headerlink" title="配置管理口"></a>配置管理口</h2><hr>
<p>通常来说，这一步是都是要走的，通过配置管理口，可以远程管理服务器，不用去机房插显示器、键盘。<code>HP ProLiant Gen9</code>的管理口称为<code>iLO</code>口，开机初始化后进入系统配置，进行配置，一般来说，服务器都是使用静态IP，所以需要禁掉<code>DHCP</code>，并配置<code>IP</code>地址、网关、子网掩码。重启后生效，这样就能够进行远程控制了。</p>
<h2 id="做RAID"><a href="#做RAID" class="headerlink" title="做RAID"></a>做RAID</h2><hr>
<p><a href="https://en.wikipedia.org/wiki/RAID" target="_blank" rel="external">磁盘阵列</a>（Redundant Arrays of Independent Disks，RAID），是由独立磁盘构成的具有冗余能力的阵列，将数据切割成许多区段，分别放在各个硬盘上，同时有冗余，数据重构等安全服务。</p>
<p>做RAID有很多种方案，可以根据不同的需求，使用不同的方案，如RAID0（条带）、RAID1（镜像）、RAID5、RAID10、RAID50等（不同的方法，所要求的磁盘数也不一样），通常，对于存放数据的磁盘，会使用RAID10、RAID50。做完RAID后，就形成了逻辑分区。</p>
<p>当然，并不是说服务器一定要做RAID，不做RAID的服务器也能装系统。</p>
 <a id="more"></a>
<h2 id="装系统"><a href="#装系统" class="headerlink" title="装系统"></a>装系统</h2><hr>
<p>这一步，大家应该比较熟悉了，装系统，<code>Linux</code>、<code>CentOS</code>等，如果有<code>ISO</code>镜像，通过iLO管理口，挂载镜像，启动后，就能进行系统安装，系统安装的过程中，有一步操作是挂载点设置（系统会安装在之前配置好的一个逻辑分区中），一般来说，<code>Linux</code>系统最少有两个挂载点，分别是<code>/</code>根目录、<code>swap</code>交换分区，通常，也会挂载<code>/home</code>、<code>/usr</code>、<code>/var</code>、<code>/opt</code>等目录。</p>
<h2 id="挂载磁盘"><a href="#挂载磁盘" class="headerlink" title="挂载磁盘"></a>挂载磁盘</h2><hr>
<p>系统安装完后，对之前创建好的逻辑分区进行挂载，包括格式化、创建目录、挂载磁盘以及自动挂载配置。</p>
<h2 id="配置网口IP"><a href="#配置网口IP" class="headerlink" title="配置网口IP"></a>配置网口IP</h2><hr>
<p>整个安装过程，除了给<code>iLO</code>管理口配置<code>IP</code>地址，还要配置业务口，业务口一般使用光口（光纤传输），同样给其配置IP、网关、子网掩码等。</p>
<h2 id="完"><a href="#完" class="headerlink" title="完"></a>完</h2><hr>
<p>经过这几个步骤，系统就算完成了基本的搭建，当然，还有很多另外的操作，比如配置<code>yum</code>源、配置环境、系统优化等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;对于服务器，程序员们还是很熟悉的，任何一个互联网产品，背后几乎都离不开服务器，所有的服务，背后都是通过服务器来提供的，接下来，我将列出从裸机到可用的基本步骤，示例的服务器为&lt;code&gt;HP ProLiant Gen9&lt;/code&gt;，当然，其他的服务器如&lt;code&gt;IBM&lt;/code&gt;等，基本步骤也都是类似的。&lt;/p&gt;
&lt;h2 id=&quot;配置管理口&quot;&gt;&lt;a href=&quot;#配置管理口&quot; class=&quot;headerlink&quot; title=&quot;配置管理口&quot;&gt;&lt;/a&gt;配置管理口&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;通常来说，这一步是都是要走的，通过配置管理口，可以远程管理服务器，不用去机房插显示器、键盘。&lt;code&gt;HP ProLiant Gen9&lt;/code&gt;的管理口称为&lt;code&gt;iLO&lt;/code&gt;口，开机初始化后进入系统配置，进行配置，一般来说，服务器都是使用静态IP，所以需要禁掉&lt;code&gt;DHCP&lt;/code&gt;，并配置&lt;code&gt;IP&lt;/code&gt;地址、网关、子网掩码。重启后生效，这样就能够进行远程控制了。&lt;/p&gt;
&lt;h2 id=&quot;做RAID&quot;&gt;&lt;a href=&quot;#做RAID&quot; class=&quot;headerlink&quot; title=&quot;做RAID&quot;&gt;&lt;/a&gt;做RAID&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/RAID&quot;&gt;磁盘阵列&lt;/a&gt;（Redundant Arrays of Independent Disks，RAID），是由独立磁盘构成的具有冗余能力的阵列，将数据切割成许多区段，分别放在各个硬盘上，同时有冗余，数据重构等安全服务。&lt;/p&gt;
&lt;p&gt;做RAID有很多种方案，可以根据不同的需求，使用不同的方案，如RAID0（条带）、RAID1（镜像）、RAID5、RAID10、RAID50等（不同的方法，所要求的磁盘数也不一样），通常，对于存放数据的磁盘，会使用RAID10、RAID50。做完RAID后，就形成了逻辑分区。&lt;/p&gt;
&lt;p&gt;当然，并不是说服务器一定要做RAID，不做RAID的服务器也能装系统。&lt;/p&gt;
    
    </summary>
    
      <category term="系统" scheme="https://zhongwuzw.github.io/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="服务器" scheme="https://zhongwuzw.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
      <category term="系统" scheme="https://zhongwuzw.github.io/tags/%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>AppDelegate解耦之JSDecoupledAppDelegate</title>
    <link href="https://zhongwuzw.github.io/2017/02/09/AppDelegate%E8%A7%A3%E8%80%A6%E4%B9%8BJSDecoupledAppDelegate/"/>
    <id>https://zhongwuzw.github.io/2017/02/09/AppDelegate解耦之JSDecoupledAppDelegate/</id>
    <published>2017-02-09T06:52:34.000Z</published>
    <updated>2017-02-09T08:43:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="AppDelegate解耦"><a href="#AppDelegate解耦" class="headerlink" title="AppDelegate解耦"></a>AppDelegate解耦</h2><hr>
<p>说到<code>AppDelegate</code>，大家想必都不陌生，它作为应用(<code>UIApplication</code>)的委托对象，在<code>UIApplicationMain</code>方法中被创建，当发生应用相关事件时，提供开发者响应的机会。</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([AppDelegate <span class="keyword">class</span>]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>AppDelegate</code>是<code>UIResponder</code>的子类，应用将<code>AppDelegate</code>加入响应链中。<code>UIApplication</code>作为响应链中的最上层，当<code>UIApplication</code>任然无法处理特定事件时，会将事件转发给<code>AppDelegate</code>来处理。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/iOS_and_OSX_responder_chain_2x.png" width="500" height="" alt="" align="center"></p>
<p>当然，<code>AppDelegate</code>的主要职责还是响应应用事件，它满足<code>UIApplicationDelegate</code>协议，<code>UIApplicationDelegate</code>协议包含大量的委托方法，包括处理应用状态、状态恢复、后台下载数据、通知、URL Route等很多方面，这就会导致，随着程序的开发，<code>AppDelegate</code>将变得越来越臃肿，为了解决该问题，就需要进行解耦。</p>
<a id="more"></a>
<h2 id="JSDecoupledAppDelegate"><a href="#JSDecoupledAppDelegate" class="headerlink" title="JSDecoupledAppDelegate"></a>JSDecoupledAppDelegate</h2><hr>
<p><a href="https://github.com/JaviSoto/JSDecoupledAppDelegate" target="_blank" rel="external">JSDecoupledAppDelegate</a>的目的就是进行<code>AppDelegate</code>的解耦，接下来，将讲述一下实现原理。</p>
<p>首先为了实现解耦，需要将<code>AppDelegate</code>替换为定义好的<code>JSDecoupledAppDelegate</code>类（该类为单例模式），其相当于一个<code>Proxy</code>代理类，负责管理分发到不同的协议对象。<code>JSDecoupledAppDelegate</code>将<code>UIApplicationDelegate</code>协议进行了分类拆分，生成如下的多个协议，针对每个协议，<code>JSDecoupledAppDelegate</code>都有一个满足该协议的属性，如<code>@property (strong, nonatomic, nullable) id&lt;JSApplicationStateDelegate&gt; appStateDelegate;</code>，<code>appStateDelegate</code>用来存储满足<code>JSApplicationStateDelegate</code>协议的对象，当该协议定义的方法被调用时，将转发给委托对象进行处理。</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@<span class="keyword">protocol</span> JSApplicationStateDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationDefaultOrientationDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationBackgroundFetchDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationRemoteNotificationsDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationLocalNotificationsDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationStateRestorationDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationURLResourceOpeningDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationShortcutItemDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationHealthDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationProtectedDataDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationWatchInteractionDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationExtensionDelegate;</div><div class="line">@<span class="keyword">protocol</span> JSApplicationActivityContinuationDelegate;</div></pre></td></tr></table></figure>
<p>比如，我们需要处理应用状态相关事件，新建一个处理对象，满足<code>JSApplicationStateDelegate</code>协议，在对象中定义<code>+load</code>方法，将<code>JSDecoupledAppDelegate</code>的<code>appStateDelegate</code>属性赋给自己，如下所示，再在对象中实现<code>JSApplicationStateDelegate</code>方法，这样，当应用状态相关事件产生时，该对象就能收到相关事件。</p>
<figure class="highlight inform7"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">+ (void)load</div><div class="line">&#123;</div><div class="line">    <span class="comment">[JSDecoupledAppDelegate sharedAppDelegate]</span>.appStateDelegate = <span class="comment">[<span class="comment">[self alloc]</span> init]</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，就实现了<code>AppDelegate</code>的解耦，针对不同的应用事件类别，由不同的对象进行处理。</p>
<p>有的人就好奇了，<code>JSDecoupledAppDelegate</code>是怎么实现事件分发的呢？</p>
<p><code>JSDecoupledAppDelegate</code>重载了<code>- (BOOL)respondsToSelector:(SEL)aSelector</code>方法，为什么会选择重载这个方法呢，我们再来思考一下，平时我们实现<code>Delegate</code>委托方式时，当我们需调用委托对象的某个方法时，首先需要做的就是判断一下委托对象是否实现了该方法，即使用<code>respondsToSelector:</code>（如果不进行提前判断，当委托对象没有实现该方法时，将导致<code>Crash</code>），这也就不难解释为什么选择重载该方法了。</p>
<p>直接show code:</p>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">- (<span class="built_in">BOOL</span>)respondsToSelector:(SEL)aSelector</div><div class="line">&#123;</div><div class="line">    <span class="comment">//获取委托属性名，每个协议对应一个属性，如appStateDelegate</span></div><div class="line">    <span class="built_in">NSArray</span> *delegateProperties = JSApplicationDelegateProperties();</div><div class="line"></div><div class="line">    <span class="comment">// 1. 获取定义了aSelector的协议</span></div><div class="line">    __block <span class="built_in">BOOL</span> protocolFound = <span class="literal">NO</span>;</div><div class="line">    __block <span class="built_in">BOOL</span> delegateRespondsToSelector = <span class="literal">NO</span>;</div><div class="line"></div><div class="line">    [JSApplicationDelegateSubprotocols() enumerateObjectsUsingBlock:^(<span class="built_in">NSString</span> *protocolName, <span class="built_in">NSUInteger</span> idx, <span class="built_in">BOOL</span> *stop) &#123;</div><div class="line">        <span class="comment">//获取协议定义的方法</span></div><div class="line">        <span class="built_in">NSSet</span> *protocolMethods = JSSelectorListInProtocol(<span class="built_in">NSProtocolFromString</span>(protocolName));</div><div class="line"></div><div class="line">        <span class="keyword">const</span> <span class="built_in">BOOL</span> methodCorrespondsToThisProtocol = [protocolMethods containsObject:<span class="built_in">NSStringFromSelector</span>(aSelector)];</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (methodCorrespondsToThisProtocol)</div><div class="line">        &#123;</div><div class="line">            protocolFound = <span class="literal">YES</span>;</div><div class="line"></div><div class="line">            <span class="comment">// 2. 获取协议委托对象，如appStateDelegate属性</span></div><div class="line">            <span class="keyword">id</span> delegateObjectForProtocol = [<span class="keyword">self</span> valueForKey:delegateProperties[idx]];</div><div class="line">            </div><div class="line">            <span class="comment">//判断委托对象是否实现了该方法</span></div><div class="line">            delegateRespondsToSelector = [delegateObjectForProtocol respondsToSelector:aSelector];</div><div class="line"></div><div class="line">            *stop = <span class="literal">YES</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;];</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (protocolFound)</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 3. 返回委托对象是否能响应该方法</span></div><div class="line">        <span class="keyword">return</span> delegateRespondsToSelector;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">else</span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 4. 如不能响应，走缺省方法处理</span></div><div class="line">        <span class="keyword">return</span> [<span class="keyword">super</span> respondsToSelector:aSelector];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="终"><a href="#终" class="headerlink" title="终"></a>终</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;AppDelegate解耦&quot;&gt;&lt;a href=&quot;#AppDelegate解耦&quot; class=&quot;headerlink&quot; title=&quot;AppDelegate解耦&quot;&gt;&lt;/a&gt;AppDelegate解耦&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;说到&lt;code&gt;AppDelegate&lt;/code&gt;，大家想必都不陌生，它作为应用(&lt;code&gt;UIApplication&lt;/code&gt;)的委托对象，在&lt;code&gt;UIApplicationMain&lt;/code&gt;方法中被创建，当发生应用相关事件时，提供开发者响应的机会。&lt;/p&gt;
&lt;figure class=&quot;highlight objectivec&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; main(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[]) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;@autoreleasepool&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;UIApplicationMain&lt;/span&gt;(argc, argv, &lt;span class=&quot;literal&quot;&gt;nil&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;NSStringFromClass&lt;/span&gt;([AppDelegate &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;]));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;AppDelegate&lt;/code&gt;是&lt;code&gt;UIResponder&lt;/code&gt;的子类，应用将&lt;code&gt;AppDelegate&lt;/code&gt;加入响应链中。&lt;code&gt;UIApplication&lt;/code&gt;作为响应链中的最上层，当&lt;code&gt;UIApplication&lt;/code&gt;任然无法处理特定事件时，会将事件转发给&lt;code&gt;AppDelegate&lt;/code&gt;来处理。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/iOS_and_OSX_responder_chain_2x.png&quot; width = &quot;500&quot; height = &quot;&quot; alt=&quot;&quot; align=center /&gt;&lt;/p&gt;
&lt;p&gt;当然，&lt;code&gt;AppDelegate&lt;/code&gt;的主要职责还是响应应用事件，它满足&lt;code&gt;UIApplicationDelegate&lt;/code&gt;协议，&lt;code&gt;UIApplicationDelegate&lt;/code&gt;协议包含大量的委托方法，包括处理应用状态、状态恢复、后台下载数据、通知、URL Route等很多方面，这就会导致，随着程序的开发，&lt;code&gt;AppDelegate&lt;/code&gt;将变得越来越臃肿，为了解决该问题，就需要进行解耦。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发-项目" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E9%A1%B9%E7%9B%AE/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="源码分析" scheme="https://zhongwuzw.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="解耦" scheme="https://zhongwuzw.github.io/tags/%E8%A7%A3%E8%80%A6/"/>
    
  </entry>
  
  <entry>
    <title>Objective-C之performSelector编译器内存泄露警告</title>
    <link href="https://zhongwuzw.github.io/2017/01/19/Objective-C%E4%B9%8BperformSelector%E7%BC%96%E8%AF%91%E5%99%A8%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E8%AD%A6%E5%91%8A/"/>
    <id>https://zhongwuzw.github.io/2017/01/19/Objective-C之performSelector编译器内存泄露警告/</id>
    <published>2017-01-19T06:23:10.000Z</published>
    <updated>2017-01-19T07:44:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<blockquote>
<p>performSelector may cause a leak because its selector is unknown</p>
</blockquote>
<p>在<code>ARC</code>环境下，我们使用<code>-(id)performSelector:</code>方法时，编译器会提示可能导致内存泄露的警告。大家如果一直使用<code>ARC</code>进行<code>iOS</code>开发，没有经历<code>MRC</code>时期的话，可能心里会有疑问，为什么<code>Apple</code>提供的<code>API</code>会报警告呢，又为什么会报内存泄露的警告？接下来，将详细讨论该问题。</p>
<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><hr>
<p>其实，产生该问题的原因是<code>ARC</code>,运行时系统需要知道调用方法的返回值类型，我们知道，方法的返回值包括：<code>void</code>,<code>int</code>,<code>NSString *</code>,<code>id</code>等，<code>ARC</code>通常可以通过定义实例方法对象的头中获取信息。</p>
<p><code>ARC</code>对于返回值有3种处理情况：</p>
<ol>
<li>忽略非对象类型（<code>void</code>,<code>int</code>等）</li>
<li>当新建对象值不再需要时<code>release</code>（如<code>init</code>,<code>copy</code>或带有<code>ns_returns_retained</code>属性的方法）</li>
<li>不做任何处理，且假设返回的对象值会在局部作用域内有效（在最里层的<code>autorelease pool</code>结束之前都有效)</li>
</ol>
<p>调用<code>-(id)performSelector:</code>，编译器会假设调用方法的返回值是一个对象，且不会对返回值进行<code>retain</code>/<code>release</code>，所以，如果你调用如上讨论的第2种情况下的方法，将导致内存泄露，因为，调用的方法会返回一个新的对象。</p>
<p>如果<code>#SEL</code>返回值类型为<code>void</code>或非对象类型，是可以安全的使用<code>-(id)performSelector:</code>的。</p>
<a id="more"></a>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><hr>
<ol>
<li><p>使用编译器指令移除警告。(注意，该方法治标不治本，对于上面讨论的内存泄露情况，仍然存在）</p>
<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic push</span></div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic ignored <span class="meta-string">"-Warc-performSelector-leaks"</span></span></div><div class="line">[self performSelector: NSSelectorFromString(@<span class="string">"someMethod"</span>) withObject: <span class="literal">nil</span>];</div><div class="line"><span class="meta">#<span class="meta-keyword">pragma</span> clang diagnostic pop</span></div></pre></td></tr></table></figure>
</li>
<li><p>使用<code>NSInvocation</code>封装方法调用。</p>
</li>
<li><p>对于返回值为<code>void</code>,<code>int</code>等值类型，可以使用<code>- performSelector:withObject:afterDelay:</code>来执行，由于它不会在当前<code>RunLoop</code>时调用，所以会立即返回，且在接下来的某个<code>RunLoop</code>中执行，也就没有了返回值。也可以使用运行时方法<code>objc_msgSend(self, NSSelectorFromString(@&quot;someMethod&quot;));</code>。</p>
</li>
</ol>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ol>
<li><code>Swift</code>已经废弃了<code>-(id)performSelector:</code>方法。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;blockquote&gt;
&lt;p&gt;performSelector may cause a leak because its selector is unknown&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在&lt;code&gt;ARC&lt;/code&gt;环境下，我们使用&lt;code&gt;-(id)performSelector:&lt;/code&gt;方法时，编译器会提示可能导致内存泄露的警告。大家如果一直使用&lt;code&gt;ARC&lt;/code&gt;进行&lt;code&gt;iOS&lt;/code&gt;开发，没有经历&lt;code&gt;MRC&lt;/code&gt;时期的话，可能心里会有疑问，为什么&lt;code&gt;Apple&lt;/code&gt;提供的&lt;code&gt;API&lt;/code&gt;会报警告呢，又为什么会报内存泄露的警告？接下来，将详细讨论该问题。&lt;/p&gt;
&lt;h2 id=&quot;原因&quot;&gt;&lt;a href=&quot;#原因&quot; class=&quot;headerlink&quot; title=&quot;原因&quot;&gt;&lt;/a&gt;原因&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;其实，产生该问题的原因是&lt;code&gt;ARC&lt;/code&gt;,运行时系统需要知道调用方法的返回值类型，我们知道，方法的返回值包括：&lt;code&gt;void&lt;/code&gt;,&lt;code&gt;int&lt;/code&gt;,&lt;code&gt;NSString *&lt;/code&gt;,&lt;code&gt;id&lt;/code&gt;等，&lt;code&gt;ARC&lt;/code&gt;通常可以通过定义实例方法对象的头中获取信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ARC&lt;/code&gt;对于返回值有3种处理情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;忽略非对象类型（&lt;code&gt;void&lt;/code&gt;,&lt;code&gt;int&lt;/code&gt;等）&lt;/li&gt;
&lt;li&gt;当新建对象值不再需要时&lt;code&gt;release&lt;/code&gt;（如&lt;code&gt;init&lt;/code&gt;,&lt;code&gt;copy&lt;/code&gt;或带有&lt;code&gt;ns_returns_retained&lt;/code&gt;属性的方法）&lt;/li&gt;
&lt;li&gt;不做任何处理，且假设返回的对象值会在局部作用域内有效（在最里层的&lt;code&gt;autorelease pool&lt;/code&gt;结束之前都有效)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;调用&lt;code&gt;-(id)performSelector:&lt;/code&gt;，编译器会假设调用方法的返回值是一个对象，且不会对返回值进行&lt;code&gt;retain&lt;/code&gt;/&lt;code&gt;release&lt;/code&gt;，所以，如果你调用如上讨论的第2种情况下的方法，将导致内存泄露，因为，调用的方法会返回一个新的对象。&lt;/p&gt;
&lt;p&gt;如果&lt;code&gt;#SEL&lt;/code&gt;返回值类型为&lt;code&gt;void&lt;/code&gt;或非对象类型，是可以安全的使用&lt;code&gt;-(id)performSelector:&lt;/code&gt;的。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发-语言" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="Objective-C" scheme="https://zhongwuzw.github.io/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>SSO单点登录之CAS-Server</title>
    <link href="https://zhongwuzw.github.io/2016/12/27/SSO%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95%E4%B9%8BCAS-Server/"/>
    <id>https://zhongwuzw.github.io/2016/12/27/SSO单点登录之CAS-Server/</id>
    <published>2016-12-27T10:15:15.000Z</published>
    <updated>2017-06-15T02:02:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Prerequisites"><a href="#Prerequisites" class="headerlink" title="Prerequisites"></a>Prerequisites</h2><hr>
<ul>
<li><code>CAS Server 3.5.x.</code>，下文以<code>$CAS-SERVER</code>表示。</li>
<li><code>CAS Client 3.3.x.</code>，下文以<code>$CAS-CLIENT</code>表示。</li>
<li><code>Tomcat 7.x</code>，下文以<code>$CAS_TOMCAT_HOME</code>表示。</li>
<li><code>GateIn-3.8.1.Final-tomcat-7</code>，下文以<code>$GATEIN_HOME</code>表示。</li>
</ul>
<blockquote>
<p>最近公司需要对之前的多个Web应用系统进行整合，希望用户在登录某个应用系统时，能直接访问其他的Web应用系统，且不需要再次登录。既我们经常说的单点登录，最后，我选择了<a href="https://www.apereo.org/projects/cas/download-cas" target="_blank" rel="external"><code>CAS</code></a>，并将其整合进了<a href="http://gatein.jboss.org/" target="_blank" rel="external">GateIn portal</a>。接下来，将整理一下原理和整合步骤。<br>所有项目代码示例可在<a href="https://github.com/CAS-GateInPortal" target="_blank" rel="external">github</a>上下载。</p>
</blockquote>
<h2 id="CAS介绍"><a href="#CAS介绍" class="headerlink" title="CAS介绍"></a>CAS介绍</h2><hr>
<p><a href="https://www.apereo.org/projects/cas/download-cas" target="_blank" rel="external"><code>CAS</code></a>（Central Authentication Service）是<code>Yale</code>大学发起的一个开源项目，旨在为<code>Web</code>应用系统提供一种可靠的单点登录。单点登录，既在多个应用系统中，用户只需登录一次就可以访问所有相互信任的应用系统。<code>CAS Client</code>支持非常多的客户端，包括<code>JAVA、PHP、Ruby</code>等。</p>
<p>接下来，接介绍一下<code>CAS</code>系统。</p>
<h3 id="CAS-系统组成"><a href="#CAS-系统组成" class="headerlink" title="CAS 系统组成"></a>CAS 系统组成</h3><hr>
<p><code>CAS</code>系统架构由两部分组成，<code>CAS Server</code>、<code>CAS Clients</code>，两者可以通过多种协议进行通信。</p>
<a id="more"></a>
<h4 id="CAS-Server"><a href="#CAS-Server" class="headerlink" title="CAS Server"></a>CAS Server</h4><hr>
<p><code>CAS Server</code>是一个构建在<code>Spring Framework</code>上的<code>Java servlet</code>，通过分配和诊断<code>tickets</code>，负责认证用户以及授权。</p>
<h4 id="CAS-Clients"><a href="#CAS-Clients" class="headerlink" title="CAS Clients"></a>CAS Clients</h4><hr>
<p><code>CAS Clients</code>负责对用户的认证工作，<code>CAS Clients</code>负责处理对客户端受保护资源的访问请求，需要登录时，重定向到<code>CAS Server</code>。</p>
<p><code>CAS Clients</code>与受保护的客户端应用部署在一起，以<code>Filter</code>方式保护受保护的资源。</p>
<h3 id="CAS协议流程"><a href="#CAS协议流程" class="headerlink" title="CAS协议流程"></a>CAS协议流程</h3><hr>
<p>CAS协议流程如下图所示，展示了用户同时访问多个应用系统的流程。多个应用系统能实现单点登录的基本流程为，当用户首次访问需要登录才能访问的页面时，会自动重定向到<code>CAS Server</code>的登陆页面，成功认证完后，会在<code>CAS Server</code>的域中设置<code>CASTGC</code>的<code>Cookie</code>，最终登陆完成后，服务器会创建一个<code>session</code>会话，用于之后与应用系统的交互。当用户同时再登陆另外一个应用系统时，同样会跟之前一样，重定向到<code>CAS Server</code>的登陆页面，区别是此时已经有了<code>CAS Server</code>域中的<code>CASTGC</code>，重定向时会附带该<code>Cookie</code>，<code>CAS Server</code>验证之后返回一个<code>ticket</code>，之后浏览器重新请求原访问页面，并附带<code>ticket</code>参数，<code>CAS Server</code>诊断有效后，返回原应用系统的重定向，且设置该域的<code>session Cookie</code>，浏览器最后请求原页面，并附带<code>session Cookei</code>，应用系统诊断后返回请求内容。</p>
<p>需要注意的是，当成功登陆完某个系统后，如果继续再访问该系统的其他资源页面，是不需要再次与<code>CAS Server</code>进行交互的，应用系统将根据<code>session</code>直接进行诊断。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/cas_flow_diagram.png" alt=""></p>
<h2 id="GateIn-Portal集成CAS-Server"><a href="#GateIn-Portal集成CAS-Server" class="headerlink" title="GateIn Portal集成CAS Server"></a>GateIn Portal集成CAS Server</h2><hr>
<h3 id="部署CAS"><a href="#部署CAS" class="headerlink" title="部署CAS"></a>部署CAS</h3><hr>
<ol>
<li><p>打开<code>$CAS_TOMCAT_HOME/webapps/$CAS-SERVER/WEB-INF/deployerConfigContext.xml</code>，替换：</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="keyword">class</span>=<span class="string">"org.jasig.cas.authentication.handler.support.SimpleTestUsernamePasswordAuthenticationHandler"</span> /&gt;</div></pre></td></tr></table></figure>
<p>为如下：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.gatein.sso.cas.plugin.AuthenticationPlugin"</span>&gt;</div><div class="line">	   <span class="xml"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"gateInProtocol"</span>&gt;</span><span class="tag">&lt;<span class="name">value</span>&gt;</span>http<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">	   &lt;property name=<span class="string">"gateInHost"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>localhost<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">	   &lt;property name=<span class="string">"gateInPort"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">	   &lt;property name=<span class="string">"gateInContext"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>portal<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">	   &lt;property name=<span class="string">"httpMethod"</span>&gt;<span class="xml"><span class="tag">&lt;<span class="name">value</span>&gt;</span>POST<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/bean&gt;</span></div></pre></td></tr></table></figure>
<p> 如上所示，用来配置<code>GateIn Portal</code>的服务地址。</p>
</li>
<li><p>下载<code>GateIn SSO package</code>，<a href="https://repository.jboss.org/nexus/content/groups/public/org/gatein/sso/sso-packaging/1.4.1.Final/sso-packaging-1.4.1.Final.zip" target="_blank" rel="external">下载地址</a>，解压后，将其<code>cas/plugin/WEB-INF/lib</code>下的<code>jar</code>包拷贝到<code>$CAS_TOMCAT_HOME/webapps/$CAS-SERVER/WEB-INF/lib</code>目录。</p>
</li>
<li>默认，登出用户时<code>CAS Server</code>会展示一个<code>CAS</code>提供的登出页面，然后跳转回<code>Portal</code>页，如果想要保留原有<code>Portal</code>的登出，打开<code>$CAS_TOMCAT_HOME/webapps/$CAS-SERVER/WEB-INF/cas-servlet.xml</code>，添加<code>followServiceRedirects=&quot;true&quot;</code>参数：<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> &lt;bean id=<span class="string">"logoutController"</span>  class=<span class="string">"org.jasig.cas.web.LogoutController"</span></div><div class="line"><span class="selector-tag">p</span>:centralAuthenticationService-ref=<span class="string">"centralAuthenticationService"</span></div><div class="line"><span class="selector-tag">p</span>:logoutView=<span class="string">"casLogoutView"</span></div><div class="line"><span class="selector-tag">p</span>:warnCookieGenerator-ref=<span class="string">"warnCookieGenerator"</span></div><div class="line"><span class="selector-tag">p</span>:ticketGrantingTicketCookieGenerator-ref=<span class="string">"ticketGrantingTicketCookieGenerator"</span></div><div class="line"><span class="selector-tag">p</span>:followServiceRedirects=<span class="string">"true"</span>/&gt;</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="部署GateIn-Portal"><a href="#部署GateIn-Portal" class="headerlink" title="部署GateIn Portal"></a>部署GateIn Portal</h3><hr>
<ol>
<li><p>为了能让<code>Portal</code>使用<code>CAS Server</code>提供的单点登陆系统，首先配置<code>Portal</code>的<code>SSO</code>参数，在<code>$GATEIN_HOME/gatein/conf/configuration.properties</code>文件中，修改和添加如下内容：</p>
<figure class="highlight roboconf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">gatein.sso.enabled=true</div><div class="line">gatein.sso.callback.enabled=$&#123;<span class="attribute">gatein.sso.enabled&#125;</span></div><div class="line">gatein.sso.login.module.enabled=$&#123;gatein.sso.enabled&#125;</div><div class="line">gatein.sso.login.module.class=org.gatein.sso.agent.login.SSOLoginModule</div><div class="line">gatein.sso.server.url=http://localhost:8086/cas-server</div><div class="line">gatein<span class="variable">.sso</span><span class="variable">.portal</span><span class="variable">.url</span>=http://localhost:8080</div><div class="line">gatein<span class="variable">.sso</span><span class="variable">.filter</span><span class="variable">.logout</span><span class="variable">.class</span>=org<span class="variable">.gatein</span><span class="variable">.sso</span><span class="variable">.agent</span><span class="variable">.filter</span><span class="variable">.CASLogoutFilter</span></div><div class="line">gatein<span class="variable">.sso</span><span class="variable">.filter</span><span class="variable">.logout</span><span class="variable">.url</span>=$&#123;gatein<span class="variable">.sso</span><span class="variable">.server</span><span class="variable">.url</span>&#125;/logout</div><div class="line">gatein<span class="variable">.sso</span><span class="variable">.filter</span><span class="variable">.login</span><span class="variable">.sso</span><span class="variable">.url</span>=$&#123;gatein<span class="variable">.sso</span><span class="variable">.server</span><span class="variable">.url</span>&#125;/login?service=$&#123;gatein<span class="variable">.sso</span><span class="variable">.portal</span><span class="variable">.url</span>&#125;/@@portal<span class="variable">.container</span><span class="variable">.name</span>@@/initiatessologin</div></pre></td></tr></table></figure>
<p> 如上，为配置<code>CAS Server</code>的服务器信息等。</p>
</li>
<li><p>如果需要改变账户系统的存储方式， 比如改为<code>MySQL</code>数据库，还需要在<code>$GATEIN_HOME/gatein/conf/configuration.properties</code>文件中修改成如下所示，同时，下载<code>mysql-connect-java.jar``jar</code>包，放入<code>$GATEIN_HOME/lib</code>目录下。</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.name</span>=jdbcidm</div><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.driver</span>=com<span class="selector-class">.mysql</span><span class="selector-class">.jdbc</span><span class="selector-class">.Driver</span></div><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.url</span>=jdbc:mysql:<span class="comment">//localhost:3306/jdbcidm_$&#123;name&#125;</span></div><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.username</span>=root</div><div class="line">gatein<span class="selector-class">.idm</span><span class="selector-class">.datasource</span><span class="selector-class">.password</span>=<span class="number">123</span></div></pre></td></tr></table></figure>
<p> 在<code>$GATEIN_HOME/conf/server.xml</code>的<code>&lt;GlobalNamingResources&gt;&lt;/GlobalNamingResources&gt;</code>节点中声明绑定的数据源，添加如下，字段含义可参考<a href="https://www.exoplatform.com/docs/public/index.jsp?topic=%2FPLF35%2FADM.Configuration.Connect_To_A_Production_Database.html" target="_blank" rel="external">该文</a>，注意，数据库名必须为<code>jdbcidm_portal</code>，且需要提前手动创建，无法自动创建，但是<code>GateIn Portal</code>会自动创建用户相关表：</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Resource auth=<span class="string">"Container"</span> driverClassName=<span class="string">"com.mysql.jdbc.Driver"</span> <span class="built_in">log</span>Abandoned=<span class="string">"true"</span> maxActive=<span class="string">"20"</span> maxIdle=<span class="string">"10"</span> maxWait=<span class="string">"10000"</span> minEvictableIdleTimeMillis=<span class="string">"60000"</span> name=<span class="string">"exo-idm_portal"</span> password=<span class="string">"123"</span> removeAbandoned=<span class="string">"true"</span> removeAbandonedTimeout=<span class="string">"10"</span> <span class="built_in">type</span>=<span class="string">"javax.sql.DataSource"</span> url=<span class="string">"jdbc:mysql://localhost:3306/jdbcidm_portal"</span> username=<span class="string">"root"</span>/&gt;</div></pre></td></tr></table></figure>
<p> 在<code>GateIn Portal</code>与<code>CAS</code>整合后，账户系统将由<code>GateIn Portal</code>接管，也就是说，如果<code>GateIn Portal</code>服务没有开启，则<code>CAS Server</code>将无法进行认证。</p>
</li>
<li><p>在<code>$GATEIN_HOME/conf/server.xml</code>的<code>Host</code>元素下添加<code>ServletAccessValve</code>，如：</p>
 <figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;Host <span class="built_in">name</span>=<span class="string">"localhost"</span> appBase=<span class="string">"webapps"</span></div><div class="line">  unpackWARs=<span class="string">"true"</span> autoDeploy=<span class="string">"true"</span>&gt;</div><div class="line"> </div><div class="line">  &lt;Valve className=<span class="string">"org.gatein.sso.agent.tomcat.ServletAccessValve"</span> /&gt;</div><div class="line"> </div><div class="line">  &lt;!<span class="comment">-- SingleSignOn valve, share authentication between web applications</span></div><div class="line">  ...</div></pre></td></tr></table></figure>
<p> 其目的是开启<code>SSO</code>组件，将其加入<code>Catalina</code>容器的请求处理管道中，这样，<code>SSO</code>组件将有机会处理每一个<code>Request</code>请求。</p>
</li>
</ol>
<h2 id="修改portal项目根路径"><a href="#修改portal项目根路径" class="headerlink" title="修改portal项目根路径"></a>修改portal项目根路径</h2><hr>
<p><code>GateIn portal</code>项目的默认网址格式为：<code>{ip}:{port}/portal/*</code>，如果我们想把根路径的<code>portal</code>改成其他的，如<code>ots-portal</code>，并不能简单的像其他<code>Tomcat``webapp</code>一样，直接修改目录名即可，因为<code>portal</code>有多个应用依赖，且<code>portal</code>关键字还作为容器名等在整个生命周期中起作用，最终经过大量分析测试，实现了更名，接下来，将总结修改的配置文件：</p>
<ul>
<li><code>$GATEIN_HOME/conf/jaas.conf</code>：<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">  gatein-domain &#123;</div><div class="line">  <span class="keyword">org.exoplatform.web.login.FilterDisabledLoginModule </span>required</div><div class="line">    portalContainerName=ots-portal</div><div class="line">    realmName=gatein-domain<span class="comment">;</span></div><div class="line">  <span class="keyword">org.gatein.security.oauth.jaas.OAuthLoginModule </span>required</div><div class="line">    portalContainerName=ots-portal</div><div class="line">    realmName=gatein-domain<span class="comment">;</span></div><div class="line">  <span class="keyword">org.gatein.sso.integration.SSODelegateLoginModule </span>required</div><div class="line">    enabled=<span class="string">"#&#123;gatein.sso.login.module.enabled&#125;"</span></div><div class="line">    delegateClassName=<span class="string">"#&#123;gatein.sso.login.module.class&#125;"</span></div><div class="line">    portalContainerName=ots-portal</div><div class="line">    realmName=gatein-domain</div><div class="line">    password-stacking=useFirstPass<span class="comment">;</span></div><div class="line">  <span class="keyword">org.exoplatform.services.security.j2ee.TomcatLoginModule </span>required</div><div class="line">    portalContainerName=ots-portal</div><div class="line">    realmName=gatein-domain<span class="comment">;</span></div><div class="line">&#125;<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>$GATEIN_HOME/gatein/conf/configuration.xml</code>：<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">object-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>portal<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">object</span> <span class="attr">type</span>=<span class="string">"org.exoplatform.container.definition.PortalContainerDefinition"</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- The name of the portal container --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"name"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>ots-portal<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">field</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- The name of the context name of the rest web application --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"restContextName"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>rest<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">field</span>&gt;</span></div><div class="line">          <span class="comment">&lt;!-- The name of the realm --&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">field</span> <span class="attr">name</span>=<span class="string">"realmName"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">string</span>&gt;</span>gatein-domain<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">field</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">object</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">object-param</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>$GATEIN_HOME/webapps/ots-portal/WEB-INF/web.xml</code>：<figure class="highlight sqf"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;display-<span class="built_in">name</span>&gt;ots-portal&lt;/display-<span class="built_in">name</span>&gt;</div><div class="line">&lt;context-<span class="built_in">param</span>&gt;</div><div class="line">  &lt;<span class="built_in">param</span>-<span class="built_in">name</span>&gt;org.exoplatform.frameworks.jcr.command.web.fckeditor.digitalAssetsWorkspace&lt;/<span class="built_in">param</span>-<span class="built_in">name</span>&gt;</div><div class="line">  &lt;<span class="built_in">param</span>-value&gt;ots-portal&lt;/<span class="built_in">param</span>-value&gt;</div><div class="line">&lt;/context-<span class="built_in">param</span>&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><code>$GATEIN_HOME/webapps/ROOT/index.jsp</code>：<figure class="highlight vbscript-html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="xml"></span><span class="vbscript">&lt;%</span></div><div class="line"><span class="built_in">response</span>.setStatus(<span class="built_in">response</span>.SC_MOVED_TEMPORARILY);</div><div class="line"><span class="built_in">response</span>.setHeader(<span class="string">"Location"</span>, <span class="string">"/ots-portal"</span>);</div><div class="line">%&gt;<span class="xml"></span></div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>最后，当然同样需要将<code>portal</code>目录名改为<code>ots-portal</code>。</li>
</ul>
<p>如上修改之后，就可以通过网址<code>{ip}:{port}/ots-portal/*</code>来进行访问了。</p>
<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><hr>
<p>更改根目录之后，其认证相关信息存储的库名将由<code>jdbcidm_portal</code>变为<code>jdbcidm_ots-portal</code>。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><hr>
<ul>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-cas/" target="_blank" rel="external">https://www.ibm.com/developerworks/cn/opensource/os-cn-cas/</a></li>
<li><a href="https://www.exoplatform.com/docs/public/index.jsp?topic=%2FPLF35%2FADM.Configuration.Connect_To_A_Production_Database.html" target="_blank" rel="external">https://www.exoplatform.com/docs/public/index.jsp?topic=%2FPLF35%2FADM.Configuration.Connect_To_A_Production_Database.html</a></li>
<li><a href="https://repository.jboss.org/nexus/content/groups/public/org/gatein/sso/sso-packaging/1.4.1.Final/sso-packaging-1.4.1.Final.zip" target="_blank" rel="external">https://repository.jboss.org/nexus/content/groups/public/org/gatein/sso/sso-packaging/1.4.1.Final/sso-packaging-1.4.1.Final.zip</a></li>
<li><a href="http://www.cnblogs.com/vhua/p/cas_1.html" target="_blank" rel="external">http://www.cnblogs.com/vhua/p/cas_1.html</a></li>
<li><a href="https://developer.jboss.org/wiki/ChangeGateInContextPath" target="_blank" rel="external">https://developer.jboss.org/wiki/ChangeGateInContextPath</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Prerequisites&quot;&gt;&lt;a href=&quot;#Prerequisites&quot; class=&quot;headerlink&quot; title=&quot;Prerequisites&quot;&gt;&lt;/a&gt;Prerequisites&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;CAS Server 3.5.x.&lt;/code&gt;，下文以&lt;code&gt;$CAS-SERVER&lt;/code&gt;表示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;CAS Client 3.3.x.&lt;/code&gt;，下文以&lt;code&gt;$CAS-CLIENT&lt;/code&gt;表示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Tomcat 7.x&lt;/code&gt;，下文以&lt;code&gt;$CAS_TOMCAT_HOME&lt;/code&gt;表示。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;GateIn-3.8.1.Final-tomcat-7&lt;/code&gt;，下文以&lt;code&gt;$GATEIN_HOME&lt;/code&gt;表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;最近公司需要对之前的多个Web应用系统进行整合，希望用户在登录某个应用系统时，能直接访问其他的Web应用系统，且不需要再次登录。既我们经常说的单点登录，最后，我选择了&lt;a href=&quot;https://www.apereo.org/projects/cas/download-cas&quot;&gt;&lt;code&gt;CAS&lt;/code&gt;&lt;/a&gt;，并将其整合进了&lt;a href=&quot;http://gatein.jboss.org/&quot;&gt;GateIn portal&lt;/a&gt;。接下来，将整理一下原理和整合步骤。&lt;br&gt;所有项目代码示例可在&lt;a href=&quot;https://github.com/CAS-GateInPortal&quot;&gt;github&lt;/a&gt;上下载。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;CAS介绍&quot;&gt;&lt;a href=&quot;#CAS介绍&quot; class=&quot;headerlink&quot; title=&quot;CAS介绍&quot;&gt;&lt;/a&gt;CAS介绍&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://www.apereo.org/projects/cas/download-cas&quot;&gt;&lt;code&gt;CAS&lt;/code&gt;&lt;/a&gt;（Central Authentication Service）是&lt;code&gt;Yale&lt;/code&gt;大学发起的一个开源项目，旨在为&lt;code&gt;Web&lt;/code&gt;应用系统提供一种可靠的单点登录。单点登录，既在多个应用系统中，用户只需登录一次就可以访问所有相互信任的应用系统。&lt;code&gt;CAS Client&lt;/code&gt;支持非常多的客户端，包括&lt;code&gt;JAVA、PHP、Ruby&lt;/code&gt;等。&lt;/p&gt;
&lt;p&gt;接下来，接介绍一下&lt;code&gt;CAS&lt;/code&gt;系统。&lt;/p&gt;
&lt;h3 id=&quot;CAS-系统组成&quot;&gt;&lt;a href=&quot;#CAS-系统组成&quot; class=&quot;headerlink&quot; title=&quot;CAS 系统组成&quot;&gt;&lt;/a&gt;CAS 系统组成&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;CAS&lt;/code&gt;系统架构由两部分组成，&lt;code&gt;CAS Server&lt;/code&gt;、&lt;code&gt;CAS Clients&lt;/code&gt;，两者可以通过多种协议进行通信。&lt;/p&gt;
    
    </summary>
    
      <category term="Web开发" scheme="https://zhongwuzw.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="SSO" scheme="https://zhongwuzw.github.io/tags/SSO/"/>
    
      <category term="CAS" scheme="https://zhongwuzw.github.io/tags/CAS/"/>
    
      <category term="Portal" scheme="https://zhongwuzw.github.io/tags/Portal/"/>
    
  </entry>
  
  <entry>
    <title>iOS设置shadow*带来的离屏渲染</title>
    <link href="https://zhongwuzw.github.io/2016/12/22/iOS%E8%AE%BE%E7%BD%AEshadow-%E5%B8%A6%E6%9D%A5%E7%9A%84%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93/"/>
    <id>https://zhongwuzw.github.io/2016/12/22/iOS设置shadow-带来的离屏渲染/</id>
    <published>2016-12-22T07:23:11.000Z</published>
    <updated>2016-12-22T08:26:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><hr>
<p>在项目中，当我们想要设置<code>View</code>的阴影效果时，可以通过<code>shadow*</code>相关方法实现，如：</p>
<figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self.layer.<span class="keyword">shadowOffset </span>= CGSizeMake(<span class="number">4</span>, -<span class="number">2</span>)<span class="comment">;</span></div><div class="line">self.layer.<span class="keyword">shadowOpacity </span>= <span class="number">0</span>.<span class="number">5</span><span class="comment">;</span></div><div class="line">self.layer.<span class="keyword">shadowColor </span>= [[UIColor <span class="keyword">blackColor] </span>colorWithAlphaComponent:<span class="number">0</span>.<span class="number">5</span>].CGColor<span class="comment">;</span></div></pre></td></tr></table></figure>
<p>实现效果如下：<br><img src="http://oc54pu02q.bkt.clouddn.com/shadow.png" width="500" height="" alt="" align="center"></p>
<p>如上实现方式，有些情况下，你并不会发现有什么问题，但是一旦将其用在如<code>UITableViewCell</code>、<code>UICollectionViewCell</code>等时，你会发现，滑动时会导致大量掉帧的情况，其主要原因为，<code>shadow*</code>方法的使用将导致<code>Core Animation</code>进行离屏渲染，为了确定这一点，可以通过<code>Instruments</code>工具，选择<code>Core Animation</code>模板，选择开启<code>Color Offscreen-Rendered Yellow</code> <code>Debug</code>选项，当我们滑动<code>CollectionView</code>时，其帧率如下，产生了大量掉帧的情况，且正如我们所料，使用<code>shadow*</code>方法的视图被标黄，既使用了离屏渲染。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/bad-frame.png" width="500" height="" alt="" align="center"></p>
<p>帧率情况如上，可以看到丢帧率很高。</p>
<a id="more"></a>
<p><img src="http://oc54pu02q.bkt.clouddn.com/IMG_4639.PNG" width="500" height="" alt="" align="center"></p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><hr>
<p>有一种很简单的方式来解决该问题，既直接向<code>Core Animation</code>提供阴影形状，通过调用<code>setShadowPath</code>来提供一个<code>CGPath</code>给视图的<code>Layer</code>，（<code>CGPath</code>为任意你想生成的阴影的形状)，如：</p>
<figure class="highlight lua"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[myView.layer setShadowPath:<span class="string">[[UIBezierPath </span></div><div class="line">    bezierPathWithRect:myView.bounds] CGPath]];</div></pre></td></tr></table></figure>
<p>再次运行<code>Instruments</code>的<code>Core Animation</code>模板，能够看到，基本没有掉帧，滑动很流畅，且没有使用离屏渲染。</p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/good-frame.png" width="500" height="" alt="" align="center"></p>
<p><img src="http://oc54pu02q.bkt.clouddn.com/IMG_4638.PNG" width="500" height="" alt="" align="center"></p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<ul>
<li>当使用阴影的视图形状发生变化时，可以将阴影的设置代码放入<code>setFrame</code>、<code>layoutSubviews</code>等方法里。</li>
<li>当对视图的<code>bounds</code>进行动画时，默认其阴影是不会跟随进行动画的，但是可以通过如<code>CAKeyframeAnimation</code>来对其进行动画，因为我们已经知道了新旧两个<code>CGPath</code>。</li>
<li>能引发离屏渲染的情况除了设置<code>shadow</code>，还有很多，如<code>layer.mask</code>、<code>layer.shouldRasterize = YES</code>等，当然，除了离屏渲染，还有很多影响绘图性能的问题，如<code>Blending</code>、<code>Layout</code>，等。<br>详细情况可参考： <a href="http://stackoverflow.com/a/13649143/3552084" target="_blank" rel="external">http://stackoverflow.com/questions/13158796/what-triggers-offscreen-rendering-blending-and-layoutsubviews-in-ios</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在项目中，当我们想要设置&lt;code&gt;View&lt;/code&gt;的阴影效果时，可以通过&lt;code&gt;shadow*&lt;/code&gt;相关方法实现，如：&lt;/p&gt;
&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;self.layer.&lt;span class=&quot;keyword&quot;&gt;shadowOffset &lt;/span&gt;= CGSizeMake(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;, -&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;self.layer.&lt;span class=&quot;keyword&quot;&gt;shadowOpacity &lt;/span&gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;self.layer.&lt;span class=&quot;keyword&quot;&gt;shadowColor &lt;/span&gt;= [[UIColor &lt;span class=&quot;keyword&quot;&gt;blackColor] &lt;/span&gt;colorWithAlphaComponent:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;].CGColor&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实现效果如下：&lt;br&gt;&lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/shadow.png&quot; width = &quot;500&quot; height = &quot;&quot; alt=&quot;&quot; align=center /&gt;&lt;/p&gt;
&lt;p&gt;如上实现方式，有些情况下，你并不会发现有什么问题，但是一旦将其用在如&lt;code&gt;UITableViewCell&lt;/code&gt;、&lt;code&gt;UICollectionViewCell&lt;/code&gt;等时，你会发现，滑动时会导致大量掉帧的情况，其主要原因为，&lt;code&gt;shadow*&lt;/code&gt;方法的使用将导致&lt;code&gt;Core Animation&lt;/code&gt;进行离屏渲染，为了确定这一点，可以通过&lt;code&gt;Instruments&lt;/code&gt;工具，选择&lt;code&gt;Core Animation&lt;/code&gt;模板，选择开启&lt;code&gt;Color Offscreen-Rendered Yellow&lt;/code&gt; &lt;code&gt;Debug&lt;/code&gt;选项，当我们滑动&lt;code&gt;CollectionView&lt;/code&gt;时，其帧率如下，产生了大量掉帧的情况，且正如我们所料，使用&lt;code&gt;shadow*&lt;/code&gt;方法的视图被标黄，既使用了离屏渲染。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/bad-frame.png&quot; width = &quot;500&quot; height = &quot;&quot; alt=&quot;&quot; align=center /&gt;&lt;/p&gt;
&lt;p&gt;帧率情况如上，可以看到丢帧率很高。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发-UI" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-UI/"/>
    
    
      <category term="iOS开发-UI" scheme="https://zhongwuzw.github.io/tags/iOS%E5%BC%80%E5%8F%91-UI/"/>
    
      <category term="离屏渲染" scheme="https://zhongwuzw.github.io/tags/%E7%A6%BB%E5%B1%8F%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
  <entry>
    <title>源码分析之Alamofire</title>
    <link href="https://zhongwuzw.github.io/2016/12/14/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%B9%8BAlamofire/"/>
    <id>https://zhongwuzw.github.io/2016/12/14/源码分析之Alamofire/</id>
    <published>2016-12-14T09:26:46.000Z</published>
    <updated>2016-12-19T09:38:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><hr>
<p><code>Alamofire</code>是对<code>URLSession</code>的封装，针对普通请求，上传、下载等操作，提供对应的<code>Request</code>，其对象关系如下：</p>
<p> <img src="http://oc54pu02q.bkt.clouddn.com/25E6C99A-FDF4-4314-A41A-03E746BBA401.png" width="500" height="254" alt="" align="center"></p>
<p>每一个<code>Request</code>关联一个<code>TaskDelegate</code>，<code>TaskDelegate</code>用来处理<code>URLSessionTask</code>使用过程中的网络回调，<code>TaskDelegate</code>有一个<code>queue</code>成员，用来执行<code>task</code>完成后的回调处理，<code>completionHandler</code>默认会在主线程回调。<code>Alamofire</code>有一个<code>SessionDelegate</code>，对<code>Session</code>的所有网络回调做处理，并调用每一个<code>task</code>的<code>TaskDelegate</code>，正因为<code>SessionDelegate</code>只有一个实例，所以会涉及到线程安全的问题，对某些关键属性需要做竟态处理，如管理<code>Request</code>的字典。委托处理流程如下图所示：</p>
<p> <img src="http://oc54pu02q.bkt.clouddn.com/05A842ED-9D20-47AA-8609-282B95A36E7B.png" width="500" height="254" alt="" align="center"></p>
<a id="more"></a>
<p><code>TaskDelegate</code>是一个基类，<code>Alamofire</code>针对<code>HTTP</code>普通请求、下载、上传提供了相应的子类来进行处理。</p>
<p><code>Alamofire</code>实现过程中使用了大量的协议、泛型，来实现通用性，代码非常优雅。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;源码分析&quot;&gt;&lt;a href=&quot;#源码分析&quot; class=&quot;headerlink&quot; title=&quot;源码分析&quot;&gt;&lt;/a&gt;源码分析&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;Alamofire&lt;/code&gt;是对&lt;code&gt;URLSession&lt;/code&gt;的封装，针对普通请求，上传、下载等操作，提供对应的&lt;code&gt;Request&lt;/code&gt;，其对象关系如下：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/25E6C99A-FDF4-4314-A41A-03E746BBA401.png&quot; width = &quot;500&quot; height = &quot;254&quot; alt=&quot;&quot; align=center /&gt;&lt;/p&gt;
&lt;p&gt;每一个&lt;code&gt;Request&lt;/code&gt;关联一个&lt;code&gt;TaskDelegate&lt;/code&gt;，&lt;code&gt;TaskDelegate&lt;/code&gt;用来处理&lt;code&gt;URLSessionTask&lt;/code&gt;使用过程中的网络回调，&lt;code&gt;TaskDelegate&lt;/code&gt;有一个&lt;code&gt;queue&lt;/code&gt;成员，用来执行&lt;code&gt;task&lt;/code&gt;完成后的回调处理，&lt;code&gt;completionHandler&lt;/code&gt;默认会在主线程回调。&lt;code&gt;Alamofire&lt;/code&gt;有一个&lt;code&gt;SessionDelegate&lt;/code&gt;，对&lt;code&gt;Session&lt;/code&gt;的所有网络回调做处理，并调用每一个&lt;code&gt;task&lt;/code&gt;的&lt;code&gt;TaskDelegate&lt;/code&gt;，正因为&lt;code&gt;SessionDelegate&lt;/code&gt;只有一个实例，所以会涉及到线程安全的问题，对某些关键属性需要做竟态处理，如管理&lt;code&gt;Request&lt;/code&gt;的字典。委托处理流程如下图所示：&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/05A842ED-9D20-47AA-8609-282B95A36E7B.png&quot; width = &quot;500&quot; height = &quot;254&quot; alt=&quot;&quot; align=center /&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发-网络" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="源码分析" scheme="https://zhongwuzw.github.io/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
      <category term="Alamofire" scheme="https://zhongwuzw.github.io/tags/Alamofire/"/>
    
  </entry>
  
  <entry>
    <title>Swift之类型引用</title>
    <link href="https://zhongwuzw.github.io/2016/12/11/Swift%E4%B9%8B%E7%B1%BB%E5%9E%8B%E5%BC%95%E7%94%A8/"/>
    <id>https://zhongwuzw.github.io/2016/12/11/Swift之类型引用/</id>
    <published>2016-12-11T13:58:35.000Z</published>
    <updated>2016-12-12T06:20:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类型引用"><a href="#类型引用" class="headerlink" title="类型引用"></a>类型引用</h2><hr>
<p>在开发中，我们经常用到实例的类型，希望实例与其真正的对象类型关联，既面向对象中的多态性。接下来将通过一个例子来进行讨论，比如，定义一个<code>Dog</code>类，用来描述狗，如下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">whatDogsSay</span> : <span class="title">String</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"Woof"</span></div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">bark</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="built_in">print</span>(<span class="type">Dog</span>.whatDogsSay)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>Dog</code>类的<code>bark</code>为狗叫所定义的方法，实现中直接硬编码<code>Dog.whatDogsSay</code>，这种方法会很不灵活，尤其是其如果作为父类被子类时。</p>
<p>在<code>Swift</code>中，可以使用<code>type(of:)</code>方法来访问对象实际的类型，既会返回实例对象真正的类型，所以，可以对之前的<code>Dog</code>进行改进，如下：</p>
<figure class="highlight kotlin"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">whatDogsSay</span> : <span class="type">String &#123;</span></span></div><div class="line">        <span class="keyword">return</span> <span class="string">"Woof"</span></div><div class="line">    &#125;</div><div class="line">    func bark() &#123;</div><div class="line">        print(type(of:self).whatDogsSay)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoisyDog</span> : <span class="type">Dog &#123;</span></span></div><div class="line">    <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">var</span> <span class="title">whatDogsSay</span> : <span class="type">String &#123;</span></span></div><div class="line">        <span class="keyword">return</span> <span class="string">"Woof woof woof"</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上定义，结果如下：</p>
<figure class="highlight ceylon"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> nd = NoisyDog()</div><div class="line">nd.bark() <span class="comment">// Woof woof woof</span></div></pre></td></tr></table></figure>
<p>如果向<code>NoisyDog</code>实例发送<code>bark</code>消息，结果为”Woof woof woof”。这就是<code>type(of:)</code>方法的作用，他会指向实例真正的类型。<code>self</code>表示实例，类型为<code>NoisyDog</code>，所以<code>type(of:self)</code>返回<code>NoisyDog</code>类，所以会调用<code>NoisyDog</code>类的<code>whatDogsSay</code>类属性。</p>
<p>有时候，需要传递一个对象类型作为参数：</p>
<ul>
<li>声明对象的类型时，可以使用类型名加<code>.</code>再加关键字<code>Type</code>。</li>
<li><p>如果使用一个对象作为值时，比如，将类型赋值给一个变量或者作为参数值传递给函数时，可以使用类型名加<code>self</code>关键字，或者<code>type(of:)</code>方法。</p>
<a id="more"></a>
</li>
</ul>
<p>例如，有一个函数<code>dogTypeExpecter</code>，接收<code>Dog</code>类型作为参数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dogTypeExpecter</span><span class="params">(<span class="number">_</span> whattype:Dog.<span class="keyword">Type</span>)</span></span> &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用方式如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">dogTypeExpecter</span><span class="params">(Dog.self)</span></span></div></pre></td></tr></table></figure>
<p>或：</p>
<figure class="highlight lisp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">let d = Dog()</div><div class="line">dogTypeExpecter(<span class="name">type</span>(<span class="name">of</span><span class="symbol">:d</span>))</div><div class="line"></div><div class="line">dogTypeExpecter(<span class="name">NoisyDog</span>.self)</div><div class="line">let nd = NoisyDog()</div><div class="line">dogTypeExpecter(<span class="name">type</span>(<span class="name">of</span><span class="symbol">:nd</span>))</div></pre></td></tr></table></figure>
<p>这种情况经常出现在工厂方法中，既给定某个类型，创建该类型的实例，<code>Swift</code>中使用<code>init</code>来定义初始化器，如：</p>
<figure class="highlight dart"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name : <span class="built_in">String</span></div><div class="line">    init(name:<span class="built_in">String</span>) &#123;</div><div class="line">        self.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoisyDog</span> : <span class="title">Dog</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如下为一个工厂方法来创建<code>Dog</code>或<code>NoisyDog</code>，通过参数来指明类型：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">dogMakerAndNamer</span><span class="params">(<span class="number">_</span> whattype:Dog.<span class="keyword">Type</span>)</span></span> -&gt; <span class="type">Dog</span> &#123;</div><div class="line">    <span class="keyword">let</span> d = whattype.<span class="keyword">init</span>(name:<span class="string">"Fido"</span>) <span class="comment">// compile error</span></div><div class="line">    <span class="keyword">return</span> d</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上定义后，编译器会报错，原因是编译器无法确保<code>Dog</code>的每一个子类都会实现<code>init(name:)</code>初始化方法，所以，我们可以通过添加<code>required</code>关键字来强制<code>Dog</code>子类实现或继承该初始化方法。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name : <span class="type">String</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(name:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoisyDog</span> : <span class="title">Dog</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>调用结果：</p>
<figure class="highlight lasso"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> d = dogMakerAndNamer(Dog.<span class="built_in">self</span>) <span class="comment">// d is a Dog named Fido</span></div><div class="line"><span class="keyword">let</span> d2 = dogMakerAndNamer(NoisyDog.<span class="built_in">self</span>) <span class="comment">// d2 is a NoisyDog named Fido</span></div></pre></td></tr></table></figure>
<p>在类方法中，<code>self</code>代表类，在实例方法中，<code>self</code>表示类实例，在工厂方法中，我们在返回类型中使用了<code>Self</code>关键字，其具有动态性，代表返回的真正类型，其也可以用在实例方法的声明中。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> name : <span class="type">String</span></div><div class="line">    <span class="keyword">required</span> <span class="keyword">init</span>(name:<span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.name = name</div><div class="line">    &#125;</div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">makeAndName</span>() -&gt; <span class="title">Self</span> </span>&#123;</div><div class="line">        <span class="keyword">let</span> d = <span class="keyword">self</span>.<span class="keyword">init</span>(name:<span class="string">"Fido"</span>)</div><div class="line">        <span class="keyword">return</span> d</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoisyDog</span> : <span class="title">Dog</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><hr>
<p><code>type(of:)</code>：返回对象实例所指向的真正对象类型。<br><code>.Type</code>：在类型声明时使用，比如，在函数参数声明时，期望参数为<code>Dog</code>类型或其子类类型，可以写成<code>Dog.Type</code>。<br><code>.self</code>：代表一个类型，如，函数参数需要<code>Dog.Type</code>类型时，可以传递<code>Dog.self</code>。<br><code>Self</code>：在方法声明时，在返回类型中使用<code>Self</code>关键字，具有动态性。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<p>在<code>Swift</code>中，静态变量、静态方法可以使用<code>static</code>、<code>class</code>两种关键字，但是需要注意的是，<code>static</code>声明的无法重载，但是<code>class</code>关键字可以，不过<code>class</code>只能使用在类中，不能用在结构体、枚举等中。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类型引用&quot;&gt;&lt;a href=&quot;#类型引用&quot; class=&quot;headerlink&quot; title=&quot;类型引用&quot;&gt;&lt;/a&gt;类型引用&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;在开发中，我们经常用到实例的类型，希望实例与其真正的对象类型关联，既面向对象中的多态性。接下来将通过一个例子来进行讨论，比如，定义一个&lt;code&gt;Dog&lt;/code&gt;类，用来描述狗，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dog&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;whatDogsSay&lt;/span&gt; : &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Woof&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;bark&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;print&lt;/span&gt;(&lt;span class=&quot;type&quot;&gt;Dog&lt;/span&gt;.whatDogsSay)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;Dog&lt;/code&gt;类的&lt;code&gt;bark&lt;/code&gt;为狗叫所定义的方法，实现中直接硬编码&lt;code&gt;Dog.whatDogsSay&lt;/code&gt;，这种方法会很不灵活，尤其是其如果作为父类被子类时。&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;Swift&lt;/code&gt;中，可以使用&lt;code&gt;type(of:)&lt;/code&gt;方法来访问对象实际的类型，既会返回实例对象真正的类型，所以，可以对之前的&lt;code&gt;Dog&lt;/code&gt;进行改进，如下：&lt;/p&gt;
&lt;figure class=&quot;highlight kotlin&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Dog&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;whatDogsSay&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;String &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Woof&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    func bark() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(type(of:self).whatDogsSay)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NoisyDog&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;Dog &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;whatDogsSay&lt;/span&gt; : &lt;span class=&quot;type&quot;&gt;String &amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Woof woof woof&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上定义，结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight ceylon&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nd = NoisyDog()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;nd.bark() &lt;span class=&quot;comment&quot;&gt;// Woof woof woof&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果向&lt;code&gt;NoisyDog&lt;/code&gt;实例发送&lt;code&gt;bark&lt;/code&gt;消息，结果为”Woof woof woof”。这就是&lt;code&gt;type(of:)&lt;/code&gt;方法的作用，他会指向实例真正的类型。&lt;code&gt;self&lt;/code&gt;表示实例，类型为&lt;code&gt;NoisyDog&lt;/code&gt;，所以&lt;code&gt;type(of:self)&lt;/code&gt;返回&lt;code&gt;NoisyDog&lt;/code&gt;类，所以会调用&lt;code&gt;NoisyDog&lt;/code&gt;类的&lt;code&gt;whatDogsSay&lt;/code&gt;类属性。&lt;/p&gt;
&lt;p&gt;有时候，需要传递一个对象类型作为参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;声明对象的类型时，可以使用类型名加&lt;code&gt;.&lt;/code&gt;再加关键字&lt;code&gt;Type&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果使用一个对象作为值时，比如，将类型赋值给一个变量或者作为参数值传递给函数时，可以使用类型名加&lt;code&gt;self&lt;/code&gt;关键字，或者&lt;code&gt;type(of:)&lt;/code&gt;方法。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS开发-语言" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="Swift" scheme="https://zhongwuzw.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>解决HTTPS混合HTTP的问题</title>
    <link href="https://zhongwuzw.github.io/2016/12/02/%E8%A7%A3%E5%86%B3https%E6%B7%B7%E5%90%88http%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://zhongwuzw.github.io/2016/12/02/解决https混合http的问题/</id>
    <published>2016-12-02T04:13:44.000Z</published>
    <updated>2016-12-02T11:13:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTPS页面混合不安全的HTTP请求"><a href="#HTTPS页面混合不安全的HTTP请求" class="headerlink" title="HTTPS页面混合不安全的HTTP请求"></a>HTTPS页面混合不安全的HTTP请求</h2><hr>
<p>在启用<code>HTTPS</code>页面时，如果出现<code>HTTP</code>请求，那么浏览器会报错，如下：</p>
<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Mixed <span class="string">Content:</span> The page at ‘<span class="string">https:</span><span class="comment">//www.taobao.com/‘ was loaded over HTTPS, but requested an insecure image ‘http://g.alicdn.com/s.gif’. This content should also be served over HTTPS.</span></div></pre></td></tr></table></figure>
<p>既浏览器会<code>Block</code>掉不安全的<code>HTTP</code>请求，所以解决方法有三种：</p>
<ol>
<li>最简单的，将<code>HTTP</code>替换为<code>HTTPS</code>。</li>
<li>去掉<code>URL</code>中的<code>http://</code>或<code>https://</code>，将其替换为<code>//</code>，这样，浏览器就可以根据当前页面的请求方式来动态切换了。</li>
<li>如果涉及到第三方的资源，无法直接修改源代码，如腾讯公益404的<code>JavaScript</code>代码如下，<code>document.write</code>函数写入两个<code>JavaScript</code>文件，而这两个文件中包含了<code>HTTP</code>的请求。这个时候，我们可以在<code>&lt;head&gt;</code>中添加<code>&lt;meta http-equiv=&quot;Content-Security-Policy&quot; content=&quot;upgrade-insecure-requests&quot;&gt;</code>,浏览器会在加载<code>HTTP</code>资源时自动替换成<code>HTTPS</code>请求。</li>
</ol>
<figure class="highlight scala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> _base = '<span class="comment">//qzone.qq.com/gy/404/';</span></div><div class="line">document.write('&lt;scri' + <span class="symbol">'pt</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"text/javascript"</span> src=<span class="string">"' + _base + 'data.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/sc' + <span class="symbol">'ript</span>&gt;');</div><div class="line">document.write('&lt;scri' + <span class="symbol">'pt</span> <span class="class"><span class="keyword">type</span></span>=<span class="string">"text/javascript"</span> src=<span class="string">"' + _base + 'page.js"</span> charset=<span class="string">"utf-8"</span>&gt;&lt;/sc' + <span class="symbol">'ript</span>&gt;');</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTPS页面混合不安全的HTTP请求&quot;&gt;&lt;a href=&quot;#HTTPS页面混合不安全的HTTP请求&quot; class=&quot;headerlink&quot; title=&quot;HTTPS页面混合不安全的HTTP请求&quot;&gt;&lt;/a&gt;HTTPS页面混合不安全的HTTP请求&lt;/h2&gt;&lt;hr&gt;

    
    </summary>
    
      <category term="Web开发" scheme="https://zhongwuzw.github.io/categories/Web%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://zhongwuzw.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>crontab执行Shell脚本时的工作目录</title>
    <link href="https://zhongwuzw.github.io/2016/11/28/crontab%E6%89%A7%E8%A1%8CShell%E8%84%9A%E6%9C%AC%E6%97%B6%E7%9A%84%E5%B7%A5%E4%BD%9C%E7%9B%AE%E5%BD%95/"/>
    <id>https://zhongwuzw.github.io/2016/11/28/crontab执行Shell脚本时的工作目录/</id>
    <published>2016-11-28T09:30:00.000Z</published>
    <updated>2016-11-29T07:06:28.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="crontab执行Shell脚本时的工作目录"><a href="#crontab执行Shell脚本时的工作目录" class="headerlink" title="crontab执行Shell脚本时的工作目录"></a>crontab执行Shell脚本时的工作目录</h2><hr>
<p>由于工作需要，创建了一个<code>crontab</code>定时任务，用来在每天固定时间执行一个<code>Shell</code>脚本，在<code>Shell</code>脚本中，有对该脚本所在目录的相关文件进行操作的逻辑，在一开始实现时，对当前目录的文件操作时都是使用的相对目录，即<code>./*</code>。在终端直接<code>sh</code>执行时没有任何问题，正常结束，而一旦在<code>crontab</code>中定时执行时，就出现问题，如提示<code>file not found</code>等错误。</p>
<h2 id="解决工作目录问题"><a href="#解决工作目录问题" class="headerlink" title="解决工作目录问题"></a>解决工作目录问题</h2><hr>
<p>出现问题后，我在脚本中试着打印出<code>crontab</code>执行时的当前目录，如<code>curPath=$(pwd)</code>，执行后发现，打印出的结果为<code>$HOME</code>的目录，而非脚本所在的原始目录，这就造成了在脚本中使用相对路径时出现找不到的情况。</p>
<p>找到问题后，解决方法有两个：</p>
<ol>
<li>将相对路径替换为绝对路径。（ps：如脚本中包含某些<code>Shell</code>命令，且命令的某些参数为默认当前目录的，都需要显式的给出绝对路径）</li>
<li>在操作相对路径之前，使用<code>cd /....../</code>，在执行脚本时强制进入到该目录。</li>
</ol>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><hr>
<p>系统在执行定时任务时，是不会加载任何环境变量的，所以当脚本需要<code>Java</code>或其他环境变量时，可以通过在脚本中添加<code>source /etc/profile</code>命令来使配置生效。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;crontab执行Shell脚本时的工作目录&quot;&gt;&lt;a href=&quot;#crontab执行Shell脚本时的工作目录&quot; class=&quot;headerlink&quot; title=&quot;crontab执行Shell脚本时的工作目录&quot;&gt;&lt;/a&gt;crontab执行Shell脚本时的工作
    
    </summary>
    
      <category term="系统" scheme="https://zhongwuzw.github.io/categories/%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="Shell" scheme="https://zhongwuzw.github.io/tags/Shell/"/>
    
      <category term="crontab" scheme="https://zhongwuzw.github.io/tags/crontab/"/>
    
  </entry>
  
  <entry>
    <title>NSURLSession之使用Keep-Alive长连接</title>
    <link href="https://zhongwuzw.github.io/2016/11/12/NSURLSession%E4%B9%8B%E4%BD%BF%E7%94%A8keep-alive%E9%95%BF%E8%BF%9E%E6%8E%A5/"/>
    <id>https://zhongwuzw.github.io/2016/11/12/NSURLSession之使用keep-alive长连接/</id>
    <published>2016-11-12T14:13:57.000Z</published>
    <updated>2016-11-12T15:28:54.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HTTP-Keep-Alive"><a href="#HTTP-Keep-Alive" class="headerlink" title="HTTP Keep-Alive"></a>HTTP Keep-Alive</h2><hr>
<p><code>HTTP</code>的<code>Keep-Alive</code>，是<code>HTTP 1.1</code>默认的功能（<code>HTTP 1.0</code>可以在请求头中设置<code>Keep-Alive</code>来显式开启），其表示持久连接，以前我们所使用的<code>HTTP</code>请求，当发出请求并接收完响应后，将关闭<code>TCP</code>连接，所以，如果我们短时间内进行大量的<code>HTTP</code>请求的话，会导致过多的<code>TCP</code>连接建立、关闭消耗.</p>
<h2 id="HTTP-Keep-Alive-vs-TCP-KeepAlive"><a href="#HTTP-Keep-Alive-vs-TCP-KeepAlive" class="headerlink" title="HTTP Keep-Alive vs TCP KeepAlive"></a>HTTP Keep-Alive vs TCP KeepAlive</h2><hr>
<p>注意，我们目前说的都是<code>HTTP</code>的<code>Keep-Alive</code>，其实，<code>TCP</code>也有<code>KeepAlive</code>的概念，它解决的主要问题是，当连接建立后，如果没有数据传输，或者隔一段时间才发送一次数据时，如何来确定<code>Client</code>是否在线，连接是否需要保持，<code>TCP</code>解决方法为，当超过一段时间后，<code>TCP</code>会自动发送一个数据为空的报文给<code>Client</code>，如果对方回应了，则连接继续保持，否则，在重试多次无果后将关闭连接。</p>
<h2 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h2><hr>
<p><code>HTTP 1.1</code>引入了<code>Pipeline</code>,其基于<code>Keep-Alive</code>，既利用一个连接做多次请求，当<code>Client</code>提交多个请求时，不需要等第一个请求的响应接收完就能发起第二个请求，既实现类似于流水作业的功能。目前主流服务器都支持<code>Keep-Alive</code>和<code>Pipeline</code>。</p>
<h2 id="使用NSURLSession开启Keep-Alive、Pipeline"><a href="#使用NSURLSession开启Keep-Alive、Pipeline" class="headerlink" title="使用NSURLSession开启Keep-Alive、Pipeline"></a>使用NSURLSession开启Keep-Alive、Pipeline</h2><hr>
<a id="more"></a>
<ul>
<li><p>开启<code>NSURLSession</code>配置<code>NSURLSessionConfiguration</code>的<code>HTTPShouldUsePipelining</code>属性为<code>YES</code>。</p>
</li>
<li><p>开启<code>NSMutableURLRequest</code>的<code>HTTPShouldUsePipelining</code>为<code>YES</code>。（<code>NSMutableURLRequest</code>可以继承<code>NSURLSessionConfiguration</code>的配置，所以如果<code>NSURLSession</code>配置了，则每个请求就不再需要单独配置可。）</p>
</li>
<li><p>确保发出的请求在同一个<code>NSURLSession</code>中，因为每一个<code>NSURLSession</code>使用单独的连接池，所以如果<code>NSURLSession</code>不同，那么就无法利用<code>Keep-Alive</code>、<code>Pipeline</code>了。</p>
</li>
<li><p>如果请求开启了认证，则相同的认证才能利用<code>Keep-Alive</code>、<code>Pipeline</code>。</p>
</li>
</ul>
<h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><hr>
<ul>
<li><p>使用<code>SDWebImage</code>库的类别<code>UIImageView+WebCache</code>加载图片时，默认使用的共享的<code>NSURLSession</code>，且开启了<code>HTTPShouldUsePipelining</code>。</p>
</li>
<li><p>使用<code>AFNetworking</code>库时，每个<code>AFHTTPSessionManager</code>都会创建一个单独的<code>NSURLSession</code>。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;HTTP-Keep-Alive&quot;&gt;&lt;a href=&quot;#HTTP-Keep-Alive&quot; class=&quot;headerlink&quot; title=&quot;HTTP Keep-Alive&quot;&gt;&lt;/a&gt;HTTP Keep-Alive&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt;的&lt;code&gt;Keep-Alive&lt;/code&gt;，是&lt;code&gt;HTTP 1.1&lt;/code&gt;默认的功能（&lt;code&gt;HTTP 1.0&lt;/code&gt;可以在请求头中设置&lt;code&gt;Keep-Alive&lt;/code&gt;来显式开启），其表示持久连接，以前我们所使用的&lt;code&gt;HTTP&lt;/code&gt;请求，当发出请求并接收完响应后，将关闭&lt;code&gt;TCP&lt;/code&gt;连接，所以，如果我们短时间内进行大量的&lt;code&gt;HTTP&lt;/code&gt;请求的话，会导致过多的&lt;code&gt;TCP&lt;/code&gt;连接建立、关闭消耗.&lt;/p&gt;
&lt;h2 id=&quot;HTTP-Keep-Alive-vs-TCP-KeepAlive&quot;&gt;&lt;a href=&quot;#HTTP-Keep-Alive-vs-TCP-KeepAlive&quot; class=&quot;headerlink&quot; title=&quot;HTTP Keep-Alive vs TCP KeepAlive&quot;&gt;&lt;/a&gt;HTTP Keep-Alive vs TCP KeepAlive&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;注意，我们目前说的都是&lt;code&gt;HTTP&lt;/code&gt;的&lt;code&gt;Keep-Alive&lt;/code&gt;，其实，&lt;code&gt;TCP&lt;/code&gt;也有&lt;code&gt;KeepAlive&lt;/code&gt;的概念，它解决的主要问题是，当连接建立后，如果没有数据传输，或者隔一段时间才发送一次数据时，如何来确定&lt;code&gt;Client&lt;/code&gt;是否在线，连接是否需要保持，&lt;code&gt;TCP&lt;/code&gt;解决方法为，当超过一段时间后，&lt;code&gt;TCP&lt;/code&gt;会自动发送一个数据为空的报文给&lt;code&gt;Client&lt;/code&gt;，如果对方回应了，则连接继续保持，否则，在重试多次无果后将关闭连接。&lt;/p&gt;
&lt;h2 id=&quot;Pipeline&quot;&gt;&lt;a href=&quot;#Pipeline&quot; class=&quot;headerlink&quot; title=&quot;Pipeline&quot;&gt;&lt;/a&gt;Pipeline&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;&lt;code&gt;HTTP 1.1&lt;/code&gt;引入了&lt;code&gt;Pipeline&lt;/code&gt;,其基于&lt;code&gt;Keep-Alive&lt;/code&gt;，既利用一个连接做多次请求，当&lt;code&gt;Client&lt;/code&gt;提交多个请求时，不需要等第一个请求的响应接收完就能发起第二个请求，既实现类似于流水作业的功能。目前主流服务器都支持&lt;code&gt;Keep-Alive&lt;/code&gt;和&lt;code&gt;Pipeline&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;使用NSURLSession开启Keep-Alive、Pipeline&quot;&gt;&lt;a href=&quot;#使用NSURLSession开启Keep-Alive、Pipeline&quot; class=&quot;headerlink&quot; title=&quot;使用NSURLSession开启Keep-Alive、Pipeline&quot;&gt;&lt;/a&gt;使用NSURLSession开启Keep-Alive、Pipeline&lt;/h2&gt;&lt;hr&gt;
    
    </summary>
    
      <category term="iOS开发-网络" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="NSURLSession" scheme="https://zhongwuzw.github.io/tags/NSURLSession/"/>
    
      <category term="网络" scheme="https://zhongwuzw.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
  </entry>
  
  <entry>
    <title>Hadoop相关总结</title>
    <link href="https://zhongwuzw.github.io/2016/11/02/Hadoop%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <id>https://zhongwuzw.github.io/2016/11/02/Hadoop问题总结/</id>
    <published>2016-11-02T07:57:22.000Z</published>
    <updated>2016-11-07T10:41:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><hr>
<ol>
<li><p>命令行执行<code>Job</code>任务时，出现如下问题，原因为<code>MacOS</code>系统的文件系统大小写不敏感，导致在<code>unjar</code>包时报错，有命名冲突。</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> java<span class="selector-class">.io</span><span class="selector-class">.IOException</span>: Mkdirs failed to create /var/folders/zz/zyxvpxvq6csfxvn_n0000000000000/T/hadoop-unjar3745345762036287746/license</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.ensureDirectory</span>(RunJar<span class="selector-class">.java</span>:<span class="number">128</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.unJar</span>(RunJar<span class="selector-class">.java</span>:<span class="number">104</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.unJar</span>(RunJar<span class="selector-class">.java</span>:<span class="number">81</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.run</span>(RunJar<span class="selector-class">.java</span>:<span class="number">209</span>)</div><div class="line">	at org<span class="selector-class">.apache</span><span class="selector-class">.hadoop</span><span class="selector-class">.util</span><span class="selector-class">.RunJar</span><span class="selector-class">.main</span>(RunJar<span class="selector-class">.java</span>:<span class="number">136</span>)</div></pre></td></tr></table></figure>
<p> 解决方法为执行如下命令，删除<code>jar</code>文件中的这两个文件。</p>
 <figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">zip</span> -<span class="keyword">d</span> Documents/<span class="keyword">Test</span>.jar LICENSE</div><div class="line"><span class="keyword">zip</span> -<span class="keyword">d</span> Documents/<span class="keyword">Test</span>.jar META-<span class="keyword">INF</span>/LICENSE</div></pre></td></tr></table></figure>
</li>
</ol>
<ol>
<li>使用<code>Eclipse</code>导出可供<code>Hadoop</code>执行的<code>jar</code>包时，导出的类型应选择<code>Runnable JAR file</code>。</li>
</ol>
<ol>
<li><p>在集群上搭建<code>Hadoop</code>时，一切正常，为了<code>Debug</code>在本机搭建，使用<code>Pseudo-Distributed Mode</code>模式时，<code>node</code>的状态变为<code>unhealthy</code>，可以采取比较trick的方法来解决，既在<code>yarn-site.xml</code>中添加属性来扩大健康范围，如下：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    <span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>    </div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.disk-health-checker.min-healthy-disks<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">     <span class="tag">&lt;<span class="name">value</span>&gt;</span>100.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ol>
<a id="more"></a>
<h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><hr>
<ol>
<li>使用<code>Hadoop</code>命令执行<code>Job</code>示例：<br> <code>hadoop jar Documents/Test.jar hdfs://localhost:9000/user/zhongwu/sample.txt hdfs://localhost:9000/user/zhongwu/output111</code></li>
</ol>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><hr>
<ol>
<li><p><code>MapReduce</code>作业成为<code>job</code>，有两类节点控制着作业执行过程：一个<code>jobtracker</code>及一系列<code>tasktracker</code>。<code>jobtracker</code>通过调度<code>tasktracker</code>上运行的任务来协调所有运行在系统上的作业。<code>tasktracker</code>在运行任务的同时将运行报告发送给<code>jobtracker</code>，<code>jobtracker</code>由此记录每项作业任务的整体进度情况。如果其中一个任务失败，<code>jobtracker</code>可以在另外一个<code>tasktracker</code>节点上重新调度该任务。</p>
</li>
<li><p><code>HDFS</code>集群有两类节点以管理者-工作者模式运行，即一个<code>namenode</code>(管理者)和多个<code>datanode</code>(工作者)。<code>namenode</code>管理文件系统的命名空间。它维护着文件系统树及整颗树内所有的文件和目录。这些信息以两个文件形式永久保存在本地磁盘上：命名空间镜像文件和编辑日志文件。<code>namenode</code>也记录着每个文件中各个块所在的数据节点信息，但它并不永久保存块的位置信息，因为这些信息会在系统启动时由数据节点重建。<code>namenode</code>只需要响应块位置的请求，无需响应数据请求，否则随着客户端数量的增长，<code>namenode</code>会很快成为瓶颈。</p>
</li>
</ol>
<h2 id="配置参考"><a href="#配置参考" class="headerlink" title="配置参考"></a>配置参考</h2><hr>
<p><code>hdfs-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml-stylesheet type=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">  you may not use this file except in compliance with the License.</div><div class="line">  You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">  Unless required by applicable law or agreed to in writing, software</div><div class="line">  distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">  See the License for the specific language governing permissions and</div><div class="line">  limitations under the License. See accompanying LICENSE file.</div><div class="line">--&gt;</div><div class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span>tag</div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.name.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/name1<span class="tag">&lt;/<span class="name">value</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.data.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/data1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>mapred-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml-stylesheet type=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">  you may not use this file except in compliance with the License.</div><div class="line">  You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">  Unless required by applicable law or agreed to in writing, software</div><div class="line">  distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">  See the License for the specific language governing permissions and</div><div class="line">  limitations under the License. See accompanying LICENSE file.</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.framework.name<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>yarn<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapred.child.java.opts<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>-Xmx400m<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>dfs.permissions<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>false<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.input.fileinputformat.input.dir.recursive<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1:10020<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>mapreduce.jobhistory.webapp.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1:19888<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>core-site.xml</code></p>
<figure class="highlight dust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="xml"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span></div><div class="line"><span class="php"><span class="meta">&lt;?</span>xml-stylesheet type=<span class="string">"text/xsl"</span> href=<span class="string">"configuration.xsl"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">  you may not use this file except in compliance with the License.</div><div class="line">  You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">  Unless required by applicable law or agreed to in writing, software</div><div class="line">  distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">  See the License for the specific language governing permissions and</div><div class="line">  limitations under the License. See accompanying LICENSE file.</div><div class="line">--&gt;</div><div class="line"></div><div class="line"><span class="comment">&lt;!-- Put site-specific property overrides in this file. --&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>fs.defaultFS<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>hdfs://127.0.0.1:9000<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>/usr/local/Cellar/hadoop/tmp/hadoop-$<span class="template-variable">&#123;user.name&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">value</span>&gt;</span></span></div><div class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>yarn-site.xml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span><span class="meta">?&gt;</span></span></div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">  Licensed under the Apache License, Version 2.0 (the "License");</div><div class="line">  you may not use this file except in compliance with the License.</div><div class="line">  You may obtain a copy of the License at</div><div class="line"></div><div class="line">    http://www.apache.org/licenses/LICENSE-2.0</div><div class="line"></div><div class="line">  Unless required by applicable law or agreed to in writing, software</div><div class="line">  distributed under the License is distributed on an "AS IS" BASIS,</div><div class="line">  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</div><div class="line">  See the License for the specific language governing permissions and</div><div class="line">  limitations under the License. See accompanying LICENSE file.</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.aux-services<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>mapreduce_shuffle<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.address<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1:8032<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.resourcemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.resource.memory-mb<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>8090<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.hostname<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>127.0.0.1<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.log.server.url<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>http://127.0.0.1:19888/jobhistory/logs/<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.disk-health-checker.min-healthy-disks<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>0.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">property</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">value</span>&gt;</span>100.0<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;命令行执行&lt;code&gt;Job&lt;/code&gt;任务时，出现如下问题，原因为&lt;code&gt;MacOS&lt;/code&gt;系统的文件系统大小写不敏感，导致在&lt;code&gt;unjar&lt;/code&gt;包时报错，有命名冲突。&lt;/p&gt;
 &lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Exception &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; thread &lt;span class=&quot;string&quot;&gt;&quot;main&quot;&lt;/span&gt; java&lt;span class=&quot;selector-class&quot;&gt;.io&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.IOException&lt;/span&gt;: Mkdirs failed to create /var/folders/zz/zyxvpxvq6csfxvn_n0000000000000/T/hadoop-unjar3745345762036287746/license&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	at org&lt;span class=&quot;selector-class&quot;&gt;.apache&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.hadoop&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.util&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.RunJar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.ensureDirectory&lt;/span&gt;(RunJar&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	at org&lt;span class=&quot;selector-class&quot;&gt;.apache&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.hadoop&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.util&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.RunJar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.unJar&lt;/span&gt;(RunJar&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;104&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	at org&lt;span class=&quot;selector-class&quot;&gt;.apache&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.hadoop&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.util&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.RunJar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.unJar&lt;/span&gt;(RunJar&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;81&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	at org&lt;span class=&quot;selector-class&quot;&gt;.apache&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.hadoop&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.util&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.RunJar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.run&lt;/span&gt;(RunJar&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;209&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	at org&lt;span class=&quot;selector-class&quot;&gt;.apache&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.hadoop&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.util&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.RunJar&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.main&lt;/span&gt;(RunJar&lt;span class=&quot;selector-class&quot;&gt;.java&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;136&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 解决方法为执行如下命令，删除&lt;code&gt;jar&lt;/code&gt;文件中的这两个文件。&lt;/p&gt;
 &lt;figure class=&quot;highlight stata&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;d&lt;/span&gt; Documents/&lt;span class=&quot;keyword&quot;&gt;Test&lt;/span&gt;.jar LICENSE&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;zip&lt;/span&gt; -&lt;span class=&quot;keyword&quot;&gt;d&lt;/span&gt; Documents/&lt;span class=&quot;keyword&quot;&gt;Test&lt;/span&gt;.jar META-&lt;span class=&quot;keyword&quot;&gt;INF&lt;/span&gt;/LICENSE&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;使用&lt;code&gt;Eclipse&lt;/code&gt;导出可供&lt;code&gt;Hadoop&lt;/code&gt;执行的&lt;code&gt;jar&lt;/code&gt;包时，导出的类型应选择&lt;code&gt;Runnable JAR file&lt;/code&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在集群上搭建&lt;code&gt;Hadoop&lt;/code&gt;时，一切正常，为了&lt;code&gt;Debug&lt;/code&gt;在本机搭建，使用&lt;code&gt;Pseudo-Distributed Mode&lt;/code&gt;模式时，&lt;code&gt;node&lt;/code&gt;的状态变为&lt;code&gt;unhealthy&lt;/code&gt;，可以采取比较trick的方法来解决，既在&lt;code&gt;yarn-site.xml&lt;/code&gt;中添加属性来扩大健康范围，如下：&lt;/p&gt;
 &lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;php&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&amp;lt;?&lt;/span&gt;xml version=&lt;span class=&quot;string&quot;&gt;&quot;1.0&quot;&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.disk-health-checker.min-healthy-disks&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;0.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;yarn.nodemanager.disk-health-checker.max-disk-utilization-per-disk-percentage&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;name&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;100.0&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;value&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;property&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;configuration&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="Hadoop" scheme="https://zhongwuzw.github.io/categories/Hadoop/"/>
    
    
      <category term="Hadoop" scheme="https://zhongwuzw.github.io/tags/Hadoop/"/>
    
  </entry>
  
  <entry>
    <title>UIWebView相关协议方法总结</title>
    <link href="https://zhongwuzw.github.io/2016/10/20/UIWebView%E7%9B%B8%E5%85%B3%E5%8D%8F%E8%AE%AE%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/"/>
    <id>https://zhongwuzw.github.io/2016/10/20/UIWebView相关协议方法总结/</id>
    <published>2016-10-20T01:59:55.000Z</published>
    <updated>2016-11-08T16:02:24.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="UIWebView-Private-Method"><a href="#UIWebView-Private-Method" class="headerlink" title="UIWebView Private Method"></a>UIWebView Private Method</h2><hr>
<ul>
<li>UIWebView dump method:<a href="https://github.com/nst/iOS-Runtime-Headers/blob/f7f2c13158ff4ecd15b92eefb5c5d365b126db05/Frameworks/UIKit.framework/UIWebView.h" target="_blank" rel="external">UIWebView.h</a></li>
<li>设置<code>UIWebView</code>在<code>WebThread</code>线程下进行渲染，不占用主线程，代码如下：<figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">[_webView <span class="string">performSelector:</span><span class="meta">@selector</span>(<span class="string">_setDrawInWebThread:</span>) <span class="string">withObject:</span><span class="meta">@YES</span>];</div><div class="line">[_webView <span class="string">performSelector:</span><span class="meta">@selector</span>(<span class="string">_setDrawsCheckeredPattern:</span>) <span class="string">withObject:</span><span class="meta">@YES</span>];</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="WebResourceLoadDelegate-Protocol"><a href="#WebResourceLoadDelegate-Protocol" class="headerlink" title="WebResourceLoadDelegate Protocol"></a>WebResourceLoadDelegate Protocol</h2><hr>
<ul>
<li><p><code>- (id)webView:(WebView *)sender identifierForInitialRequest:(NSURLRequest *)request fromDataSource:(WebDataSource *)dataSource</code></p>
<p>  该方法返回一个标识符对象，网页中的每一个资源都会调用该方法。资源包括网页中嵌入的图片、脚本、<code>CSS</code>、嵌入在<code>frame</code>中的页面。</p>
</li>
</ul>
<a id="more"></a>
<h2 id="UIWebViewDelegate-Protocol"><a href="#UIWebViewDelegate-Protocol" class="headerlink" title="UIWebViewDelegate Protocol"></a>UIWebViewDelegate Protocol</h2><hr>
<ul>
<li><p><code>- (BOOL)webView:(UIWebView *)webView shouldStartLoadWithRequest:(NSURLRequest *)request navigationType:(UIWebViewNavigationType)navigationType</code></p>
<p>  webView在加载一个frame之前会回调该方法，加载frame的情形包括加载新的页面、加载<code>iframe</code>的url时。<code>navigationType</code>变量是一个枚举值，标识用户的动作，如点击、提交表单、前进、重载、重新提交表单、以及其他，其他包括重定向等。（注意，调用该方法，并不代表会发生真正的服务器请求，比如<code>fragment</code>）</p>
</li>
<li><p><code>- (void)webViewDidFinishLoad:(UIWebView *)webView</code></p>
<p>  注意，该方法并不是表示webView完成了网页的加载，而是表示完成了一个frame的加载，所以可能会出现加载一个网页时被调用多次的情况。 </p>
</li>
<li><p><code>- (void)webViewDidStartLoad:(UIWebView *)webView</code></p>
<p>  当webView开始加载<code>frame</code>时调用，注意，该方法不管加载是否成功都会调用。</p>
</li>
</ul>
<h2 id="WebFrameLoadDelegate-Protocol"><a href="#WebFrameLoadDelegate-Protocol" class="headerlink" title="WebFrameLoadDelegate Protocol"></a>WebFrameLoadDelegate Protocol</h2><hr>
<ul>
<li><p><code>- (void)webView:(WebView *)sender didFinishLoadForFrame:(WebFrame *)frame</code></p>
<p>  当<code>frame</code>完成时调用，既<code>frame</code>的所有资源都已经加载完成。<code>WebFrame</code>封装了一个单独的<code>frame</code>元素，而一个完整的页面则由一个<code>WebFrame</code>的层级树组成，根<code>WebFrame</code>称为<code>main frame</code>，每一个<code>WebFrame</code>都对应一个<code>WebFrameView</code>，其用来显示<code>frame</code>的内容。</p>
</li>
</ul>
<ul>
<li><p><code>- (void)webView:(WebView *)sender didReceiveTitle:(NSString *)title forFrame:(WebFrame *)frame</code></p>
<p>  当<code>frame</code>获取到<code>title</code>时调用，该方法可能会被调用多次，想要及时更新标题的话可以实现该方法。</p>
</li>
</ul>
<h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><hr>
<ol>
<li>在请求资源数据时，由于是异步的，所以可能成功，也可能失败，因此<code>Data Sources</code>就分为<code>Provisional</code>和<code>Committed</code>。一开始，<code>data source</code>是<code>Provisional</code>的，因为还不知道页面是否会加载成功，只要有响应数据到来，<code>data source</code>就将变成<code>Committed</code>的。</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;UIWebView-Private-Method&quot;&gt;&lt;a href=&quot;#UIWebView-Private-Method&quot; class=&quot;headerlink&quot; title=&quot;UIWebView Private Method&quot;&gt;&lt;/a&gt;UIWebView Private Method&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;UIWebView dump method:&lt;a href=&quot;https://github.com/nst/iOS-Runtime-Headers/blob/f7f2c13158ff4ecd15b92eefb5c5d365b126db05/Frameworks/UIKit.framework/UIWebView.h&quot;&gt;UIWebView.h&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;设置&lt;code&gt;UIWebView&lt;/code&gt;在&lt;code&gt;WebThread&lt;/code&gt;线程下进行渲染，不占用主线程，代码如下：&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[_webView &lt;span class=&quot;string&quot;&gt;performSelector:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;_setDrawInWebThread:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;withObject:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@YES&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[_webView &lt;span class=&quot;string&quot;&gt;performSelector:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@selector&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;_setDrawsCheckeredPattern:&lt;/span&gt;) &lt;span class=&quot;string&quot;&gt;withObject:&lt;/span&gt;&lt;span class=&quot;meta&quot;&gt;@YES&lt;/span&gt;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;WebResourceLoadDelegate-Protocol&quot;&gt;&lt;a href=&quot;#WebResourceLoadDelegate-Protocol&quot; class=&quot;headerlink&quot; title=&quot;WebResourceLoadDelegate Protocol&quot;&gt;&lt;/a&gt;WebResourceLoadDelegate Protocol&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;- (id)webView:(WebView *)sender identifierForInitialRequest:(NSURLRequest *)request fromDataSource:(WebDataSource *)dataSource&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;  该方法返回一个标识符对象，网页中的每一个资源都会调用该方法。资源包括网页中嵌入的图片、脚本、&lt;code&gt;CSS&lt;/code&gt;、嵌入在&lt;code&gt;frame&lt;/code&gt;中的页面。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS开发-网络" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="UIWebView" scheme="https://zhongwuzw.github.io/tags/UIWebView/"/>
    
  </entry>
  
  <entry>
    <title>使用PyMySQL处理大结果集的方法</title>
    <link href="https://zhongwuzw.github.io/2016/10/13/%E4%BD%BF%E7%94%A8PyMySQL%E5%A4%84%E7%90%86%E5%A4%A7%E7%BB%93%E6%9E%9C%E9%9B%86%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://zhongwuzw.github.io/2016/10/13/使用PyMySQL处理大结果集的方法/</id>
    <published>2016-10-13T06:53:30.000Z</published>
    <updated>2016-10-23T03:09:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="使用PyMySQL处理大结果集的方法"><a href="#使用PyMySQL处理大结果集的方法" class="headerlink" title="使用PyMySQL处理大结果集的方法"></a>使用PyMySQL处理大结果集的方法</h2><hr>
<p>最近公司项目需要向别的数据库中获取数据并同步到自己的数据库，由于是别人的库，所以没法直接使用<code>Master-Slave</code>同步，最终选择Python脚本来获取。</p>
<p>选择了<a href="https://github.com/PyMySQL/PyMySQL" target="_blank" rel="external">PyMySQL</a>客户端库，按照其官方教程，代码比较简单，类似如下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">import pymysql.cursors</div><div class="line"></div><div class="line"><span class="comment"># Connect to the database</span></div><div class="line">connection = pymysql.connect(host=<span class="string">'localhost'</span>,</div><div class="line">                             user=<span class="string">'user'</span>,</div><div class="line">                             password=<span class="string">'passwd'</span>,</div><div class="line">                             db=<span class="string">'db'</span>,</div><div class="line">                             charset=<span class="string">'utf8mb4'</span>,</div><div class="line">                             cursorclass=pymysql.cursors.DictCursor)</div><div class="line"></div><div class="line"><span class="keyword">try</span>:</div><div class="line">    <span class="keyword">with</span> connection.cursor() <span class="keyword">as</span> cursor:</div><div class="line">        <span class="comment"># Read a single record</span></div><div class="line">        sql = <span class="string">"SELECT `id`, `password` FROM `users`"</span></div><div class="line">        cursor.execute(sql)</div><div class="line">        <span class="built_in">result</span> = cursor.fetchall()</div><div class="line">        print(<span class="built_in">result</span>)</div><div class="line"><span class="keyword">finally</span>:</div><div class="line">    connection.<span class="built_in">close</span>()</div></pre></td></tr></table></figure>
<p><code>PyMySQL</code>在获取数据时提供了<code>fetchone()</code>和<code>fetchall()</code>函数来获取结果集，后来调试的时候，发现，不管是哪种方法，都会一次将所有结果获取到，这在数据量很大时将会消耗大量内存，所以有考虑是否还有别的方法，比如<code>one-by-one</code>的迭代获取。</p>
<p>在查看<code>DictCursor</code>游标代码时，发现了<code>SSCursor</code>游标类，其注释如下，意在解决数据量大的问题，正合我意。</p>
<a id="more"></a>
<figure class="highlight mizar"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">class SSCursor(Cursor):</div><div class="line">    """</div><div class="line">    Unbuffered Cursor, mainly useful <span class="keyword">for</span> queries <span class="keyword">that</span> return a lot <span class="keyword">of</span> data,</div><div class="line">    <span class="keyword">or</span> <span class="keyword">for</span> connections to remote servers over a slow network.</div><div class="line"></div><div class="line">    Instead <span class="keyword">of</span> copying every row <span class="keyword">of</span> data into a buffer, this will fetch</div><div class="line">    rows <span class="keyword">as</span> needed. The upside <span class="keyword">of</span> this, <span class="keyword">is</span> the client uses much less memory,</div><div class="line">    <span class="keyword">and</span> rows are returned much faster when traveling over a slow network,</div><div class="line">    <span class="keyword">or</span> if the result <span class="keyword">set</span> <span class="keyword">is</span> very big.</div><div class="line"></div><div class="line">    There are limitations, though. The MySQL protocol doesn't support</div><div class="line">    returning the total number <span class="keyword">of</span> rows, so the only way to tell how many rows</div><div class="line">    there are <span class="keyword">is</span> to iterate over every row returned. Also, it currently isn't</div><div class="line">    possible to scroll backwards, <span class="keyword">as</span> only the current row <span class="keyword">is</span> held <span class="keyword">in</span> memory.</div><div class="line">    """</div></pre></td></tr></table></figure>
<p><code>DictCursor</code>游标类的方法返回都是一个迭代器，可以使用这个迭代器进行迭代获取，这样就不用一次将所有数据保存在内存中了。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">def</span> <span class="title">fetchall_unbuffered</span><span class="params">(self)</span>:</span></div><div class="line">    <span class="string">"""</span></div><div class="line">    Fetch all, implemented as a generator, which isn't to standard,</div><div class="line">    however, it doesn't make sense to return everything in a list, as that</div><div class="line">    would use ridiculous memory for large result sets.</div><div class="line">    """</div><div class="line">    <span class="keyword">return</span> iter(self.fetchone, <span class="keyword">None</span>)</div></pre></td></tr></table></figure>
<p>使用方法如下：</p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">import pymysql.cursors</div><div class="line">src_pc_database = pymysql.connect(host=<span class="string">'192.168.39.51'</span>, port=<span class="number">5151</span>, user=<span class="string">'*'</span>, password=<span class="string">'*'</span>,</div><div class="line">                               db=<span class="string">'testdataanalyse'</span>,</div><div class="line">                               charset=<span class="string">'utf8mb4'</span>, cursorclass=pymysql.cursors.SSDictCursor)</div><div class="line"></div><div class="line"><span class="keyword">with</span> src_pc_database.cursor() <span class="keyword">as</span> src_cursor:</div><div class="line">    sql = <span class="string">"select * from user"</span></div><div class="line">    src_cursor.execute(sql)</div><div class="line">    <span class="built_in">result</span> = src_cursor.fetchone()</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> <span class="built_in">result</span> is <span class="keyword">not</span> None:</div><div class="line">        <span class="built_in">result</span> = src_cursor.fetchone()</div><div class="line"></div><div class="line">src_pc_database.<span class="built_in">close</span>()</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;使用PyMySQL处理大结果集的方法&quot;&gt;&lt;a href=&quot;#使用PyMySQL处理大结果集的方法&quot; class=&quot;headerlink&quot; title=&quot;使用PyMySQL处理大结果集的方法&quot;&gt;&lt;/a&gt;使用PyMySQL处理大结果集的方法&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;最近公司项目需要向别的数据库中获取数据并同步到自己的数据库，由于是别人的库，所以没法直接使用&lt;code&gt;Master-Slave&lt;/code&gt;同步，最终选择Python脚本来获取。&lt;/p&gt;
&lt;p&gt;选择了&lt;a href=&quot;https://github.com/PyMySQL/PyMySQL&quot;&gt;PyMySQL&lt;/a&gt;客户端库，按照其官方教程，代码比较简单，类似如下：&lt;/p&gt;
&lt;figure class=&quot;highlight livecodeserver&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;import pymysql.cursors&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Connect to the database&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;connection = pymysql.connect(host=&lt;span class=&quot;string&quot;&gt;&#39;localhost&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                             user=&lt;span class=&quot;string&quot;&gt;&#39;user&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                             password=&lt;span class=&quot;string&quot;&gt;&#39;passwd&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                             db=&lt;span class=&quot;string&quot;&gt;&#39;db&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                             charset=&lt;span class=&quot;string&quot;&gt;&#39;utf8mb4&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                             cursorclass=pymysql.cursors.DictCursor)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt; connection.cursor() &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; cursor:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# Read a single record&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        sql = &lt;span class=&quot;string&quot;&gt;&quot;SELECT `id`, `password` FROM `users`&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        cursor.execute(sql)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;result&lt;/span&gt; = cursor.fetchall()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        print(&lt;span class=&quot;built_in&quot;&gt;result&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;finally&lt;/span&gt;:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    connection.&lt;span class=&quot;built_in&quot;&gt;close&lt;/span&gt;()&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;PyMySQL&lt;/code&gt;在获取数据时提供了&lt;code&gt;fetchone()&lt;/code&gt;和&lt;code&gt;fetchall()&lt;/code&gt;函数来获取结果集，后来调试的时候，发现，不管是哪种方法，都会一次将所有结果获取到，这在数据量很大时将会消耗大量内存，所以有考虑是否还有别的方法，比如&lt;code&gt;one-by-one&lt;/code&gt;的迭代获取。&lt;/p&gt;
&lt;p&gt;在查看&lt;code&gt;DictCursor&lt;/code&gt;游标代码时，发现了&lt;code&gt;SSCursor&lt;/code&gt;游标类，其注释如下，意在解决数据量大的问题，正合我意。&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="https://zhongwuzw.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="https://zhongwuzw.github.io/tags/Python/"/>
    
      <category term="MySQL" scheme="https://zhongwuzw.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>iOS相关tips</title>
    <link href="https://zhongwuzw.github.io/2016/10/10/iOS%E7%9B%B8%E5%85%B3tips/"/>
    <id>https://zhongwuzw.github.io/2016/10/10/iOS相关tips/</id>
    <published>2016-10-10T10:50:03.000Z</published>
    <updated>2017-04-16T14:59:24.000Z</updated>
    
    <content type="html"><![CDATA[<hr>
<h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><hr>
<ul>
<li><p>iOS8.3之后，通过iTunes、iFunBox等工具已无法直接访问应用的沙盒，如果需要让自己的应用能够通过其访问，必须在应用的<code>info.plist</code>中添加<code>UIFileSharingEnabled</code>关键字，并赋值为<code>YES</code>，这样，就能访问其<code>Documents</code>目录了(注意，其它目录还是无法访问)。</p>
</li>
<li><p>使用<code>UIWebView</code>时，发现在首次加载网页时，加载时间异常的长，其原因是服务器需要花费一定的时间来解析请求来自于哪个平台，比如<code>PC</code>、<code>iPhone</code>、<code>iPad</code>等，以针对不同的平台响应不同的页面布局，解决该问题的方法为客户端直接请求特定版本的页面，且设置请求的<code>UA</code>(<code>User Agent</code>)，如下代码：</p>
  <figure class="highlight clojure"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">[[NSUserDefaults standardUserDefaults] registerDefaults:@&#123;@<span class="string">"UserAgent"</span> : @<span class="string">"    Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1"</span>&#125;]<span class="comment">;</span></div></pre></td></tr></table></figure>
</li>
<li><p>在使用<code>UIBarButtonItem</code>，并对其使用<code>UIImage</code>赋值时，iOS7之后会对<code>UIImage</code>设置<code>tintColor</code>，从而改变图片的原值色，如果需要保留图片原色，可以对<code>UIImage</code>进行如下代码设置：</p>
  <figure class="highlight arduino"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UIImage *<span class="built_in">image</span> = [UIImage imageNamed:@<span class="string">"myImage.png"</span>];</div><div class="line"><span class="built_in">image</span> = [<span class="built_in">image</span> imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];</div></pre></td></tr></table></figure>
<a id="more"></a>
</li>
</ul>
<ul>
<li><p>iOS7之后，对于<code>UIViewController</code>的内容布局，默认会从屏幕顶部开始，这就会导致内容被状态栏所覆盖。<br> 如果<code>UIViewController</code>包含在<code>UINavigationController</code>下且<code>navigationBar</code>是可见的，那么可以使用如下代码来使内容布局不被状态栏覆盖：</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.edgesForExtendedLayout = <span class="built_in">UIRectEdgeNone</span>;</div></pre></td></tr></table></figure>
<p>  如果<code>navigationBar</code>不可见，那么就只能调整<code>UIVew</code>的位置了，向下移20 points。</p>
</li>
<li><p><code>UIWebView</code>加载页面时底部出现黑条问题解决方法：设置<code>UIWebView</code>的<code>backgroundColor</code>为<code>clearColor</code>，<code>opaque</code>为<code>NO</code>即可。</p>
</li>
<li><p>当我们使用<a href="https://github.com/Carthage/Carthage" target="_blank" rel="external">Carthage</a>作为依赖管理器时，安装库时，经常会执行<code>carthage update</code>命令，此时，不同的库，可能会生成多个平台的<code>frameworks</code>，如<code>iOS</code>，<code>macOS</code>，<code>watchOS</code>，<code>tvOS</code>，所以，如果我们的项目只需要使用到<code>iOS</code>的<code>framework</code>，那么可以在执行<code>update</code>命令时加上参数，如<code>carthage update --platform iOS</code></p>
</li>
<li><p>当在<code>UIWebView</code>中播放<code>audio</code>时，默认在应用进入后台或锁定等情况时，<code>audio</code>会暂停。解决方法为：</p>
<ul>
<li><p>在<code>info.plist</code>中加入键值对如下：</p>
 <figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="tag">&lt;<span class="name">key</span>&gt;</span>UIBackgroundModes<span class="tag">&lt;/<span class="name">key</span>&gt;</span></div><div class="line"> <span class="tag">&lt;<span class="name">array</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">string</span>&gt;</span>audio<span class="tag">&lt;/<span class="name">string</span>&gt;</span></div><div class="line"> <span class="tag">&lt;/<span class="name">array</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>设置<code>Audio Session</code>的类别，默认类别为<code>AVAudioSessionCategorySoloAmbient</code>,将类别设置为<code>AVAudioSessionCategoryPlayback</code>，代码如下:</p>
 <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">&lt;AVFoundation/AVFoundation.h&gt;</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;AudioToolbox/AudioToolbox.h&gt;</span></span></div><div class="line">     </div><div class="line"><span class="built_in">AVAudioSession</span> *audioSession = [<span class="built_in">AVAudioSession</span>  sharedInstance];</div><div class="line">     </div><div class="line"><span class="built_in">NSError</span> *setCategoryError = <span class="literal">nil</span>;</div><div class="line"><span class="built_in">BOOL</span> success = [audioSession setCategory:<span class="built_in">AVAudioSessionCategoryPlayback</span> error:&amp;setCategoryError];</div><div class="line"><span class="keyword">if</span> (!success) &#123; <span class="comment">/* handle the error condition */</span> &#125;</div><div class="line"> </div><div class="line"><span class="built_in">NSError</span> *activationError = <span class="literal">nil</span>;</div><div class="line">success = [audioSession setActive:<span class="literal">YES</span> error:&amp;activationError];</div><div class="line"><span class="keyword">if</span> (!success) &#123; <span class="comment">/* handle the error condition */</span> &#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<ul>
<li><p><em>非越狱</em>下获取设备安装的所有应用：</p>
  <figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Class c = <span class="built_in">NSClassFromString</span>(<span class="string">@"LSApplicationWorkspace"</span>);</div><div class="line"><span class="keyword">id</span> s = [(<span class="keyword">id</span>)c performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"defaultWorkspace"</span>)];</div><div class="line">    </div><div class="line"><span class="built_in">NSArray</span> *arr = [s performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"allInstalledApplications"</span>)];</div><div class="line">    </div><div class="line"><span class="keyword">for</span> (<span class="keyword">id</span> item <span class="keyword">in</span> arr) &#123;</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"applicationIdentifier"</span>)]); </div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"bundleVersion"</span>)]);</div><div class="line">    <span class="built_in">NSLog</span>(<span class="string">@"%@"</span>,[item performSelector:<span class="built_in">NSSelectorFromString</span>(<span class="string">@"shortVersionString"</span>)]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li><p>当使用<code>Core Foundation</code>时，当你是对象的拥有者时，需要调用<code>CFRelease</code>，这里需要注意的是，不能调用<code>CFRelease(NULL)</code>，会导致程序崩溃，所以，调用<code>CFRelease</code>前需先判断一下对象是否存在（当然，有些特定的release函数容许<code>NULL</code>参数，如<code>CGGradientRelease</code>)。</p>
</li>
<li><p><code>UITableViewCell</code>默认分割线会在左侧留出一定的间距，如果想调整分割线的左、右间距，可以通过调整<code>UITableView</code>的<code>separatorInset</code>属性。</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;h2 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips&quot;&gt;&lt;/a&gt;Tips&lt;/h2&gt;&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;iOS8.3之后，通过iTunes、iFunBox等工具已无法直接访问应用的沙盒，如果需要让自己的应用能够通过其访问，必须在应用的&lt;code&gt;info.plist&lt;/code&gt;中添加&lt;code&gt;UIFileSharingEnabled&lt;/code&gt;关键字，并赋值为&lt;code&gt;YES&lt;/code&gt;，这样，就能访问其&lt;code&gt;Documents&lt;/code&gt;目录了(注意，其它目录还是无法访问)。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用&lt;code&gt;UIWebView&lt;/code&gt;时，发现在首次加载网页时，加载时间异常的长，其原因是服务器需要花费一定的时间来解析请求来自于哪个平台，比如&lt;code&gt;PC&lt;/code&gt;、&lt;code&gt;iPhone&lt;/code&gt;、&lt;code&gt;iPad&lt;/code&gt;等，以针对不同的平台响应不同的页面布局，解决该问题的方法为客户端直接请求特定版本的页面，且设置请求的&lt;code&gt;UA&lt;/code&gt;(&lt;code&gt;User Agent&lt;/code&gt;)，如下代码：&lt;/p&gt;
  &lt;figure class=&quot;highlight clojure&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[[NSUserDefaults standardUserDefaults] registerDefaults:@&amp;#123;@&lt;span class=&quot;string&quot;&gt;&quot;UserAgent&quot;&lt;/span&gt; : @&lt;span class=&quot;string&quot;&gt;&quot;    Mozilla/5.0 (iPhone; CPU iPhone OS 10_0 like Mac OS X) AppleWebKit/602.1.38 (KHTML, like Gecko) Version/10.0 Mobile/14A300 Safari/602.1&quot;&lt;/span&gt;&amp;#125;]&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在使用&lt;code&gt;UIBarButtonItem&lt;/code&gt;，并对其使用&lt;code&gt;UIImage&lt;/code&gt;赋值时，iOS7之后会对&lt;code&gt;UIImage&lt;/code&gt;设置&lt;code&gt;tintColor&lt;/code&gt;，从而改变图片的原值色，如果需要保留图片原色，可以对&lt;code&gt;UIImage&lt;/code&gt;进行如下代码设置：&lt;/p&gt;
  &lt;figure class=&quot;highlight arduino&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;UIImage *&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt; = [UIImage imageNamed:@&lt;span class=&quot;string&quot;&gt;&quot;myImage.png&quot;&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt; = [&lt;span class=&quot;built_in&quot;&gt;image&lt;/span&gt; imageWithRenderingMode:UIImageRenderingModeAlwaysOriginal];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS开发-其它" scheme="https://zhongwuzw.github.io/categories/iOS%E5%BC%80%E5%8F%91-%E5%85%B6%E5%AE%83/"/>
    
    
      <category term="iOS" scheme="https://zhongwuzw.github.io/tags/iOS/"/>
    
      <category term="tips" scheme="https://zhongwuzw.github.io/tags/tips/"/>
    
  </entry>
  
  <entry>
    <title>修改Nginx的网站根目录</title>
    <link href="https://zhongwuzw.github.io/2016/09/24/%E8%B0%83%E6%95%B4Nginx%E7%9A%84%E7%BD%91%E7%AB%99%E6%A0%B9%E7%9B%AE%E5%BD%95/"/>
    <id>https://zhongwuzw.github.io/2016/09/24/调整Nginx的网站根目录/</id>
    <published>2016-09-24T10:43:30.000Z</published>
    <updated>2016-09-27T15:30:37.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修改Nginx的网站根目录"><a href="#修改Nginx的网站根目录" class="headerlink" title="修改Nginx的网站根目录"></a>修改Nginx的网站根目录</h2><hr>
<p>Nginx的默认网站文件保存在<code>nginx</code>的<code>html</code>目录下，由于我开发时都把项目放在自己的<code>workspace</code>里，所以准备更改网站根目录，更改方法为修改<code>nginx.conf</code>配置文件的<code>root</code>指令，<code>root</code>指令可以放在<code>http</code>、<code>server</code>、<code>location</code>块中，我选择把<code>root</code>指令放在<code>server</code>块中，如下所示：</p>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class">http </span>&#123;</div><div class="line">    include       mime.types;</div><div class="line">    default_type  application/octet-stream;</div><div class="line"></div><div class="line">    <span class="meta">#access_log  logs/access.log  main;</span></div><div class="line"></div><div class="line">    sendfile        on;</div><div class="line">    <span class="meta">#tcp_nopush     on;</span></div><div class="line">    </div><div class="line">    keepalive_timeout  <span class="number">65</span>;</div><div class="line"></div><div class="line">    <span class="meta">#gzip  on;</span></div><div class="line"></div><div class="line">    <span class="class">server </span>&#123;</div><div class="line">        listen       <span class="number">80</span>;</div><div class="line">        server_name  localhost;</div><div class="line">        <span class="comment">//配置root指令</span></div><div class="line">        root /Users<span class="meta-keyword">/zhongwu/</span>Documents<span class="meta-keyword">/workspace/</span>web;</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置完成后，执行<code>sudo ./nginx -s reload</code>命令，Nginx支持动态更新配置信息。</p>
<p>访问一下网页测一下，发现返回状态码403，既请求被服务器拒绝了，查看Nginx的<code>error.log</code>后，发现如下log，既Nginx没有打开该html文件的权限，所以得解决权限的问题。</p>
<figure class="highlight accesslog"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2016</span>/<span class="number">09</span>/<span class="number">24</span> <span class="number">17</span>:<span class="number">51</span>:<span class="number">39</span> <span class="string">[error]</span> <span class="number">16397</span>#<span class="number">0</span>: *<span class="number">15</span> open() <span class="string">"/Users/zhongwu/Documents/workspace/web/lounge.html"</span> failed (<span class="number">13</span>: Permission denied), client: <span class="number">127.0.0.1</span>, server: localhost, request: <span class="string">"<span class="keyword">GET</span> /lounge.html HTTP/1.1"</span>, host: <span class="string">"127.0.0.1"</span></div></pre></td></tr></table></figure>
<p>首先我们来了解Nginx的用户权限，Nginx的<code>master</code>进程是<code>root</code>权限，而<code>worker</code>进程默认是<code>nobody</code>用户，用户组同为<code>nobody</code>，由于请求的处理是由<code>worker</code>进程处理的，所以，需要修改<code>worker</code>的用户，将其修改为我的<code>workspace</code>目录的用户，方法为直接修改Nginx配置文件，在<code>nginx.conf</code>配置文件中添加<code>user  zhongwu staff;//zhongwu是我的workspace用户，staff是用户组</code>。<br>再访问以下，成功。</p>
<h2 id="解决127-0-0-1能访问，而localhost不能访问"><a href="#解决127-0-0-1能访问，而localhost不能访问" class="headerlink" title="解决127.0.0.1能访问，而localhost不能访问"></a>解决127.0.0.1能访问，而localhost不能访问</h2><hr>
<p>项目出现127.0.0.1能访问，而localhost却访问不了的问题，定位，应该是<code>dns</code>域名解析的问题，查看<code>/etc/hosts</code>文件，发现有一条记录为：<code>::1 localhost</code>，<code>::1</code>是<code>ipv6</code>的表示方法，将其改为<code>ipv4</code>的，既将<code>::1</code>替换为<code>127.0.0.1</code>，因为Nginx默认并没有开启监听<code>ipv6</code>地址。</p>
<p>再次访问，localhost就能访问了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;修改Nginx的网站根目录&quot;&gt;&lt;a href=&quot;#修改Nginx的网站根目录&quot; class=&quot;headerlink&quot; title=&quot;修改Nginx的网站根目录&quot;&gt;&lt;/a&gt;修改Nginx的网站根目录&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;Nginx的默认网站文件保存在&lt;code&gt;
    
    </summary>
    
      <category term="Nginx" scheme="https://zhongwuzw.github.io/categories/Nginx/"/>
    
    
      <category term="Nginx" scheme="https://zhongwuzw.github.io/tags/Nginx/"/>
    
      <category term="服务器" scheme="https://zhongwuzw.github.io/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
  </entry>
  
</feed>
