<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>钟武的技术博客</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-08-28T15:14:43.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>钟武</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>WebP图片格式iOS实例</title>
    <link href="http://yoursite.com/2016/08/26/WebP%E5%9B%BE%E7%89%87%E6%A0%BC%E5%BC%8FiOS%E5%AE%9E%E4%BE%8B/"/>
    <id>http://yoursite.com/2016/08/26/WebP图片格式iOS实例/</id>
    <published>2016-08-26T07:38:31.000Z</published>
    <updated>2016-08-28T15:14:43.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>俗话说，谷歌大法好，<code>WebP</code>是由谷歌公司推出的图片文件格式，支持有损、无损压缩。从<a href="https://developers.google.com/speed/webp/" target="_blank" rel="external">官方文档</a>，可以看到如下图所示的对比，大意就是压缩率比PNG、JPEG等高。腾讯也对<code>WebP</code>做了测试，测试链接请戳<a href="http://isux.tencent.com/introduction-of-webp.html" target="_blank" rel="external">这里</a>。现在，很多公司都已经开始使用<code>WebP</code>格式，国内如腾讯、淘宝、今日头条等等。</p>
<p> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160826-0@2x.png" width="500" height="" alt="" align="center"></p>
<h1 id="iOS-WebP-示例"><a href="#iOS-WebP-示例" class="headerlink" title="iOS WebP 示例"></a>iOS WebP 示例</h1><p>iOS原生肯定是不支持<code>WebP</code>格式的，接下来，将介绍三种方法来展示在iOS端如何支持<code>WebP</code>格式：</p>
<h2 id="编译源代码"><a href="#编译源代码" class="headerlink" title="编译源代码"></a>编译源代码</h2><p>从官网下载<code>WebP</code>库的源代码，下载地址请戳<a href="https://developers.google.com/speed/webp/download" target="_blank" rel="external">这里</a>，下载如下图所示的部分，下载后是一个<code>tar</code>文件，名字类似于<br> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160826-1@2x.png" width="500" height="" alt="" align="center"><br> <code>libwebp-0.5.1.tar</code>，创建一个<code>build</code>文件夹，将该压缩文件放到<code>build</code>目录，然后再创建一个<code>build.sh</code>的shell文件，该文件用来生成通用的<code>framework</code>，代码如下：</p>
 <a id="more"></a>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div></pre></td><td class="code"><pre><div class="line"> <span class="comment">#!/bin/sh</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># <span class="doctag">Note:</span> This build script assumes it can find the archive for libwebp </span></div><div class="line"><span class="comment"># in the current directory. You can download it from the following URL:</span></div><div class="line"><span class="comment">#  http://code.google.com/speed/webp/download.html</span></div><div class="line"><span class="comment">#</span></div><div class="line"><span class="comment"># The resulting framework will can be found in the current directory </span></div><div class="line"><span class="comment"># with the name WebP.framework</span></div><div class="line"><span class="comment">#</span></div><div class="line"></div><div class="line">SDK=9.3	<span class="comment">#改成自己的SDK版本</span></div><div class="line">PLATFORMS=<span class="string">"iPhoneSimulator iPhoneSimulator-64 iPhoneOS-V7 iPhoneOS-V7s iPhoneOS-ARM64"</span></div><div class="line">DEVELOPER=`xcode-select -print-path`</div><div class="line">TOPDIR=`<span class="built_in">pwd</span>`</div><div class="line">BUILDDIR=<span class="string">"<span class="variable">$TOPDIR</span>/tmp"</span></div><div class="line">FINALDIR=<span class="string">"<span class="variable">$TOPDIR</span>/WebP.framework"</span></div><div class="line">LIBLIST=<span class="string">''</span></div><div class="line">DEVROOT=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Toolchains/XcodeDefault.xctoolchain"</span></div><div class="line"></div><div class="line">mkdir -p <span class="variable">$BUILDDIR</span></div><div class="line">mkdir -p <span class="variable">$FINALDIR</span></div><div class="line">mkdir <span class="variable">$FINALDIR</span>/Headers/</div><div class="line"></div><div class="line"><span class="keyword">for</span> PLATFORM <span class="keyword">in</span> <span class="variable">$&#123;PLATFORMS&#125;</span></div><div class="line"><span class="keyword">do</span></div><div class="line">  <span class="keyword">if</span> [ <span class="string">"<span class="variable">$&#123;PLATFORM&#125;</span>"</span> == <span class="string">"iPhoneOS-V7"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"armv7"</span></div><div class="line">    HOST=<span class="variable">$&#123;ARCH&#125;</span>-apple-darwin</div><div class="line">  <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$&#123;PLATFORM&#125;</span>"</span> == <span class="string">"iPhoneOS-V7s"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"armv7s"</span></div><div class="line">    HOST=<span class="variable">$&#123;ARCH&#125;</span>-apple-darwin</div><div class="line">  <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$&#123;PLATFORM&#125;</span>"</span> == <span class="string">"iPhoneOS-ARM64"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"arm64"</span></div><div class="line">    HOST=<span class="string">"aarch64-apple-darwin"</span></div><div class="line">  <span class="keyword">elif</span> [ <span class="string">"<span class="variable">$&#123;PLATFORM&#125;</span>"</span> == <span class="string">"iPhoneSimulator-64"</span> ]</div><div class="line">  <span class="keyword">then</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"x86_64"</span></div><div class="line">    HOST=<span class="variable">$&#123;ARCH&#125;</span>-apple-darwin</div><div class="line">  <span class="keyword">else</span></div><div class="line">    SDKPATH=<span class="string">"<span class="variable">$&#123;DEVELOPER&#125;</span>/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator9.3.sdk/"</span>	<span class="comment">#改成自己的SDK版本</span></div><div class="line">    ARCH=<span class="string">"i386"</span></div><div class="line">    HOST=<span class="variable">$&#123;ARCH&#125;</span>-apple-darwin</div><div class="line">  <span class="keyword">fi</span></div><div class="line"></div><div class="line">  <span class="built_in">export</span> CC=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/cc</div><div class="line">  <span class="built_in">export</span> LD=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/ld</div><div class="line">  <span class="built_in">export</span> CPP=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/cpp</div><div class="line">  <span class="built_in">export</span> CXX=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/g++</div><div class="line">  <span class="built_in">export</span> AR=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/ar</div><div class="line">  <span class="built_in">export</span> AS=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/as</div><div class="line">  <span class="built_in">export</span> NM=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/nm</div><div class="line">  <span class="built_in">export</span> CXXCPP=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/cpp</div><div class="line">  <span class="built_in">export</span> RANLIB=<span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/ranlib</div><div class="line"></div><div class="line">  rm -rf libwebp-0.5.1	<span class="comment">#根据自己的libwebp版本</span></div><div class="line">  tar xzf libwebp-0.5.1.tar</div><div class="line">  <span class="built_in">cd</span> libwebp-0.5.1</div><div class="line"></div><div class="line">  sh autogen.sh</div><div class="line"></div><div class="line">  ROOTDIR=<span class="string">"/tmp/install.$$.<span class="variable">$&#123;ARCH&#125;</span>"</span></div><div class="line">  rm -rf <span class="string">"<span class="variable">$&#123;ROOTDIR&#125;</span>"</span></div><div class="line">  mkdir -p <span class="string">"<span class="variable">$&#123;ROOTDIR&#125;</span>"</span></div><div class="line"></div><div class="line">  <span class="built_in">export</span> LDFLAGS=<span class="string">"-arch <span class="variable">$&#123;ARCH&#125;</span> -miphoneos-version-min=7.0 -pipe -isysroot <span class="variable">$&#123;SDKPATH&#125;</span> -O3 -DNDEBUG"</span></div><div class="line">  <span class="built_in">export</span> CFLAGS=<span class="string">"-arch <span class="variable">$&#123;ARCH&#125;</span> -miphoneos-version-min=7.0 -pipe -isysroot <span class="variable">$&#123;SDKPATH&#125;</span> -O3 -DNDEBUG"</span></div><div class="line">  <span class="built_in">export</span> CXXFLAGS=<span class="string">"-arch <span class="variable">$&#123;ARCH&#125;</span> -miphoneos-version-min=7.0 -pipe -isysroot <span class="variable">$&#123;SDKPATH&#125;</span> -O3 -DNDEBUG"</span></div><div class="line"></div><div class="line">./configure --host=<span class="variable">$&#123;HOST&#125;</span> --prefix=<span class="variable">$&#123;ROOTDIR&#125;</span> --disable-shared --enable-static \</div><div class="line">            --enable-libwebpdecoder --enable-swap-16bit-csp --build=$(./config.guess)</div><div class="line">  make</div><div class="line">  make install</div><div class="line"></div><div class="line">  LIBLIST=<span class="string">"<span class="variable">$&#123;LIBLIST&#125;</span> <span class="variable">$&#123;ROOTDIR&#125;</span>/lib/libwebp.a"</span></div><div class="line">  cp -Rp <span class="variable">$&#123;ROOTDIR&#125;</span>/include/webp/* <span class="variable">$FINALDIR</span>/Headers/</div><div class="line"></div><div class="line">  <span class="built_in">cd</span> ..</div><div class="line"><span class="keyword">done</span></div><div class="line"></div><div class="line"><span class="variable">$&#123;DEVROOT&#125;</span>/usr/bin/lipo -create <span class="variable">$LIBLIST</span> -output <span class="variable">$FINALDIR</span>/WebP</div><div class="line"></div><div class="line">rm -rf libwebp-0.5.1</div><div class="line">rm -rf <span class="variable">$&#123;BUILDDIR&#125;</span></div></pre></td></tr></table></figure>
<p> 上面的代码需要注意的几个地方，就是<code>SDKPath</code>、<code>SDK</code>变量需改成自己Xcode的SDK的版本号，因为我这个实例用的是<code>libwebp-0.5.1</code>版本，如果用的是其他的版本，则需要把脚本中的所有<code>libwebp-0.5.1</code>替换成你自己的版本名。一切妥当后，执行<code>./build.sh</code>命令，最后会生成一个<code>WebP.framework</code>框架，将其添加到自己的项目中，然后在<code>Build Settings</code>的<code>Framework Search Paths</code>中添加<code>WebP.framework</code>框架所在的目录路径即可。</p>
<h2 id="直接使用官方编译好的framework"><a href="#直接使用官方编译好的framework" class="headerlink" title="直接使用官方编译好的framework"></a>直接使用官方编译好的<code>framework</code></h2><p> 直接使用官方编译好的<code>framework</code>，下载地址请戳<a href="https://developers.google.com/speed/webp/download" target="_blank" rel="external">这里</a>，下载如下如图所示的文件，下载完之后直接改名为<code>WebP.framework</code>，添加到项目中，同样，在<code>Build Settings</code>的<code>Framework Search Paths</code>中添加<code>WebP.framework</code>框架所在的目录路径即可。<br> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160826-2@2x.png" width="500" height="" alt="" align="center"></p>
<p> <em>项目示例请戳<a href="https://github.com/zhongwuzw/WebP-iOS-example" target="_blank" rel="external">这里</a>，欢迎Star。</em></p>
<h2 id="SDWebImage"><a href="#SDWebImage" class="headerlink" title="SDWebImage"></a>SDWebImage</h2><p><a href="https://github.com/rs/SDWebImage" target="_blank" rel="external">SDWebImage</a>支持<code>WebP</code>格式，但是默认不开启，需要添加SubSpecs，具体步骤参看<code>SDWebImage</code>官方说明。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;俗话说，谷歌大法好，&lt;code&gt;WebP&lt;/code&gt;是由谷歌公司推出的图片文件格式，支持有损、无损压缩。从&lt;a href=&quot;https://developers.google.com/speed/webp/&quot;&gt;官方文档&lt;/a&gt;，可以看到如下图所示的对比，大意就是压缩率比PNG、JPEG等高。腾讯也对&lt;code&gt;WebP&lt;/code&gt;做了测试，测试链接请戳&lt;a href=&quot;http://isux.tencent.com/introduction-of-webp.html&quot;&gt;这里&lt;/a&gt;。现在，很多公司都已经开始使用&lt;code&gt;WebP&lt;/code&gt;格式，国内如腾讯、淘宝、今日头条等等。&lt;/p&gt;
&lt;p&gt; &lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/QQ20160826-0@2x.png&quot; width = &quot;500&quot; height = &quot;&quot; alt=&quot;&quot; align=center /&gt;&lt;/p&gt;
&lt;h1 id=&quot;iOS-WebP-示例&quot;&gt;&lt;a href=&quot;#iOS-WebP-示例&quot; class=&quot;headerlink&quot; title=&quot;iOS WebP 示例&quot;&gt;&lt;/a&gt;iOS WebP 示例&lt;/h1&gt;&lt;p&gt;iOS原生肯定是不支持&lt;code&gt;WebP&lt;/code&gt;格式的，接下来，将介绍三种方法来展示在iOS端如何支持&lt;code&gt;WebP&lt;/code&gt;格式：&lt;/p&gt;
&lt;h2 id=&quot;编译源代码&quot;&gt;&lt;a href=&quot;#编译源代码&quot; class=&quot;headerlink&quot; title=&quot;编译源代码&quot;&gt;&lt;/a&gt;编译源代码&lt;/h2&gt;&lt;p&gt;从官网下载&lt;code&gt;WebP&lt;/code&gt;库的源代码，下载地址请戳&lt;a href=&quot;https://developers.google.com/speed/webp/download&quot;&gt;这里&lt;/a&gt;，下载如下图所示的部分，下载后是一个&lt;code&gt;tar&lt;/code&gt;文件，名字类似于&lt;br&gt; &lt;img src=&quot;http://oc54pu02q.bkt.clouddn.com/QQ20160826-1@2x.png&quot; width = &quot;500&quot; height = &quot;&quot; alt=&quot;&quot; align=center /&gt;&lt;br&gt; &lt;code&gt;libwebp-0.5.1.tar&lt;/code&gt;，创建一个&lt;code&gt;build&lt;/code&gt;文件夹，将该压缩文件放到&lt;code&gt;build&lt;/code&gt;目录，然后再创建一个&lt;code&gt;build.sh&lt;/code&gt;的shell文件，该文件用来生成通用的&lt;code&gt;framework&lt;/code&gt;，代码如下：&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
  </entry>
  
  <entry>
    <title>Swift之通过减少动态派发来提升性能</title>
    <link href="http://yoursite.com/2016/08/24/Swift%E4%B9%8B%E9%80%9A%E8%BF%87%E5%87%8F%E5%B0%91%E5%8A%A8%E6%80%81%E6%B4%BE%E5%8F%91%E6%9D%A5%E6%8F%90%E5%8D%87%E6%80%A7%E8%83%BD/"/>
    <id>http://yoursite.com/2016/08/24/Swift之通过减少动态派发来提升性能/</id>
    <published>2016-08-24T15:23:01.000Z</published>
    <updated>2016-08-25T03:30:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>Swift是OO（面向对象）的语言，所以少不了方法和属性的重载等特性，程序只能在运行时来确定具体的方法或属性来间接调用或间接访问，这就叫做动态派发。从性能上考虑，对于动态派发的方法，会有常量时间的运行时开销。接下来将介绍三种方法来移除这样的动态性，<code>final</code>，<code>private</code>，全模块优化（Whole Module Optimization），以此提升性能。</p>
<p>考虑下面的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> point = ( <span class="number">0.0</span>, <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">updatePoint</span><span class="params">(newPoint: <span class="params">(Double, Double)</span></span></span>, newVelocity: <span class="type">Double</span>) &#123;</div><div class="line">		point = newPoint</div><div class="line">		velocity = newVelocity</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(newP: <span class="params">(Double, Double)</span></span></span>, newV: <span class="type">Double</span>) &#123;</div><div class="line">		updatePoint(newP, newVelocity: newV)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="type">ParticleModel</span>()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0.0</span>, through: <span class="number">360</span>, by: <span class="number">1.0</span>) &#123;</div><div class="line">	p.update((i * sin(i), i), newV:i*<span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上述代码所示，调用过程为：</p>
<ol>
<li>调用变量<code>p</code>的<code>update</code>方法。</li>
<li>调用<code>p</code>的<code>updatePoint</code>方法。</li>
<li>获取<code>p</code>的元组类型变量<code>point</code>。</li>
<li>获取<code>p</code>的属性velocity。</li>
</ol>
<p>由于<code>ParticleModel</code>可以被子类，所以其方法和属性就能被重载，这就不可避免的需要使用动态调用。</p>
<p>在Swift中，动态调用是通过在一个方法表中找到方法然后执行间接的调用（类似于C++的虚函数表），对于这种先查找再调用的过程，其效率是要低于方法的直接调用，而且间接调用会阻止许多编译器优化，这将加重间接调用的开销。接下来将列举一些技巧来禁用动态派发的行为，以达到提升性能的目的。</p>
<a id="more"></a>
<h2 id="当属性、方法、或类不需要被重载时，可在其声明的地方加上final关键字"><a href="#当属性、方法、或类不需要被重载时，可在其声明的地方加上final关键字" class="headerlink" title="当属性、方法、或类不需要被重载时，可在其声明的地方加上final关键字"></a>当属性、方法、或类不需要被重载时，可在其声明的地方加上<code>final</code>关键字</h2><p>在属性，方法或类声明时加上<code>final</code>关键字，表示其不能被重载，这将允许编译器安全的移除动态派发。如下代码所示，<code>point</code>和<code>velocity</code>将直接从对象的存储属性中加载，<code>updatePoint()</code>方法将被直接调用；另外，<code>update()</code>依然会通过动态派发的方式来调用，这样，<code>ParticleModel</code>的子类就可以重载<code>update()</code>来自定义实现。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">final</span> <span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">final</span> <span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line"></div><div class="line">	<span class="keyword">final</span> <span class="function"><span class="keyword">func</span> <span class="title">updatePoint</span><span class="params">(newPoint: <span class="params">(Double, Double)</span></span></span>, newVelocity: <span class="type">Double</span>) &#123;</div><div class="line">		point = newPoint</div><div class="line">		velocity = newVelocity</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(newP: <span class="params">(Double, Double)</span></span></span>, newV: <span class="type">Double</span>) &#123;</div><div class="line">		updatePoint(newP, newVelocity: newV)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除了上面所示，在属性和方法声明前加<code>final</code>关键字，还可以直接在类上加<code>final</code>，表示该类将不能作为父类被子类化，隐含的表明该类的所有的方法和属性都是<code>final</code>的。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在属性、方法、或类声明前加private关键字，将限制其只能在同一个文件中被引用"><a href="#在属性、方法、或类声明前加private关键字，将限制其只能在同一个文件中被引用" class="headerlink" title="在属性、方法、或类声明前加private关键字，将限制其只能在同一个文件中被引用"></a>在属性、方法、或类声明前加<code>private</code>关键字，将限制其只能在同一个文件中被引用</h2><p>在声明前加<code>private</code>关键字，将限制其只能在当前文件中被引用，这将允许编译器在当前文件中找到所有潜在的重载声明，编译器会对这些<code>private</code>关键字的方法或属性进行优化，移除间接的方法调用以及属性访问。</p>
<p>假设在当前文件中没有类重载<code>ParticleModel</code>，那么编译器将移除所有带有<code>private</code>声明的动态派发调用。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">private</span> <span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line"></div><div class="line">	<span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">updatePoint</span><span class="params">(newPoint: <span class="params">(Double, Double)</span></span></span>, newVelocity: <span class="type">Double</span>) &#123;</div><div class="line">		point = newPoint</div><div class="line">		velocity = newVelocity</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(newP: <span class="params">(Double, Double)</span></span></span>, newV: <span class="type">Double</span>) &#123;</div><div class="line">		updatePoint(newP, newVelocity: newV)</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如上代码所示，<code>point</code>和<code>velocity</code>将直接访问，<code>updatePoint()</code>方法也将直接被调用，而<code>update()</code>方法由于没有加<code>private</code>关键字，依然是只能间接调用。<br>同样，<code>private</code>可以加在类的声明前，等同于类的所有方法和属性都将加上<code>private</code>关键字。</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line">	<span class="comment">// ...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="在使用internal的声明中通过使用Whole-Module-Optimization来隐式的推断出final"><a href="#在使用internal的声明中通过使用Whole-Module-Optimization来隐式的推断出final" class="headerlink" title="在使用internal的声明中通过使用Whole Module Optimization来隐式的推断出final"></a>在使用<code>internal</code>的声明中通过使用<code>Whole Module Optimization</code>来隐式的推断出<code>final</code></h2><p>默认的情况下，Xcode将单独编译源文件，这会限制编译器优化的程度，Xcode 7后，增加了<code>Whole Module Optimization</code>选项，它能允许编译器在同一个模块（Module）中分析所有的源文件来进行优化，可以在Xcode的<code>Building Settings</code>中开启该选项，如下图所示。<br> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160825-0@2x.png" width="500" height="" alt="" align="center"></p>
<p> 在开启<code>Whole Module Optimization</code>选项，且声明为<code>internal</code>(默认级别)的情况下，模块的所有文件将同时被编译，这将允许编译器对整个模块一起分析，并对<strong>没有被重载</strong>且声明为<code>internal</code>级别的类、方法或属性添加<code>final</code>关键字。<br> 如下代码所示，我们修改一下<code>ParticleModel</code>类，添加<code>public</code>关键字：</p>
 <figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParticleModel</span> </span>&#123;</div><div class="line">	<span class="keyword">var</span> point = ( x: <span class="number">0.0</span>, y: <span class="number">0.0</span> )</div><div class="line">	<span class="keyword">var</span> velocity = <span class="number">100.0</span></div><div class="line"></div><div class="line">	<span class="function"><span class="keyword">func</span> <span class="title">updatePoint</span><span class="params">(newPoint: <span class="params">(Double, Double)</span></span></span>, newVelocity: <span class="type">Double</span>) &#123;</div><div class="line">		point = newPoint</div><div class="line">		velocity = newVelocity</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">update</span><span class="params">(newP: <span class="params">(Double, Double)</span></span></span>, newV: <span class="type">Double</span>) &#123;</div><div class="line">		updatePoint(newP, newVelocity: newV)</div><div class="line">	&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="type">ParticleModel</span>()</div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">stride</span>(from: <span class="number">0.0</span>, through: times, by: <span class="number">1.0</span>) &#123;</div><div class="line">	p.update((i * sin(i), i), newV:i*<span class="number">1000</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 如上代码，当开启<code>Whole Module Optimization</code>选项的情况下，编译器能在属性<code>point</code>,<code>velotity</code>，以及<code>updatePoint()</code>方法上推断出<code>final</code>，既相当于在<code>point</code>、<code>velocity</code>、<code>updatePoint()</code>声明前加上<code>final</code>关键字，而<code>update()</code>方法由于是<code>public</code>级别，所以无法推断出<code>final</code>关键字，其仍将是间接调用。</p>
<h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><ul>
<li>当使用<code>private</code>或<code>final</code>关键字，或者在开启<code>Whole Module Optimization</code>选项，声明为<code>internal</code>级别的<strong>没有被重载</strong>的方法下，将直接调用，在编译时确定。</li>
<li>运行时决定的动态派发的情形包括：<ul>
<li>继承自<code>NSObject</code>或者方法有@objc前缀。</li>
<li>使用Swift的方法表的方式，除去上述情况下，将采用这种方式。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Swift是OO（面向对象）的语言，所以少不了方法和属性的重载等特性，程序只能在运行时来确定具体的方法或属性来间接调用或间接访问，这就叫做动态派发。从性能上考虑，对于动态派发的方法，会有常量时间的运行时开销。接下来将介绍三种方法来移除这样的动态性，&lt;code&gt;final&lt;/code&gt;，&lt;code&gt;private&lt;/code&gt;，全模块优化（Whole Module Optimization），以此提升性能。&lt;/p&gt;
&lt;p&gt;考虑下面的例子：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ParticleModel&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; point = ( &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt; )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; velocity = &lt;span class=&quot;number&quot;&gt;100.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;updatePoint&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(newPoint: &lt;span class=&quot;params&quot;&gt;(Double, Double)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, newVelocity: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		point = newPoint&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		velocity = newVelocity&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;update&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(newP: &lt;span class=&quot;params&quot;&gt;(Double, Double)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;, newV: &lt;span class=&quot;type&quot;&gt;Double&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;		updatePoint(newP, newVelocity: newV)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &lt;span class=&quot;type&quot;&gt;ParticleModel&lt;/span&gt;()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;stride&lt;/span&gt;(from: &lt;span class=&quot;number&quot;&gt;0.0&lt;/span&gt;, through: &lt;span class=&quot;number&quot;&gt;360&lt;/span&gt;, by: &lt;span class=&quot;number&quot;&gt;1.0&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	p.update((i * sin(i), i), newV:i*&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如上述代码所示，调用过程为：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用变量&lt;code&gt;p&lt;/code&gt;的&lt;code&gt;update&lt;/code&gt;方法。&lt;/li&gt;
&lt;li&gt;调用&lt;code&gt;p&lt;/code&gt;的&lt;code&gt;updatePoint&lt;/code&gt;方法。&lt;/li&gt;
&lt;li&gt;获取&lt;code&gt;p&lt;/code&gt;的元组类型变量&lt;code&gt;point&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;获取&lt;code&gt;p&lt;/code&gt;的属性velocity。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;由于&lt;code&gt;ParticleModel&lt;/code&gt;可以被子类，所以其方法和属性就能被重载，这就不可避免的需要使用动态调用。&lt;/p&gt;
&lt;p&gt;在Swift中，动态调用是通过在一个方法表中找到方法然后执行间接的调用（类似于C++的虚函数表），对于这种先查找再调用的过程，其效率是要低于方法的直接调用，而且间接调用会阻止许多编译器优化，这将加重间接调用的开销。接下来将列举一些技巧来禁用动态派发的行为，以达到提升性能的目的。&lt;/p&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift中使用Objective-C的Runtime</title>
    <link href="http://yoursite.com/2016/08/23/Swift%E4%B8%AD%E4%BD%BF%E7%94%A8Objective-C%E7%9A%84Runtime/"/>
    <id>http://yoursite.com/2016/08/23/Swift中使用Objective-C的Runtime/</id>
    <published>2016-08-23T07:41:47.000Z</published>
    <updated>2016-08-24T15:24:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Swift调用Objective-C的Runtime"><a href="#Swift调用Objective-C的Runtime" class="headerlink" title="Swift调用Objective-C的Runtime"></a>Swift调用Objective-C的Runtime</h1><hr>
<p>首先，我们来测试一下使用Swift代码来调用Objective-C Runtime的方法，首先创建两个类，用来做对比，一个是纯的Swift类，另一个继承自NSObject：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//纯Swift类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwiftClass</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> aBool = <span class="literal">true</span></div><div class="line">    <span class="keyword">var</span> aInt = <span class="number">3</span></div><div class="line">    <span class="keyword">var</span> aStrig = <span class="string">"sss"</span></div><div class="line">    <span class="keyword">var</span> aObject :<span class="type">AnyObject</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swiftTest</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//继承自NSObject的类</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwiftWithOCClass</span> :<span class="title">NSObject</span></span>&#123;</div><div class="line">    <span class="keyword">var</span> aBool = <span class="literal">true</span></div><div class="line">    <span class="keyword">var</span> aInt = <span class="number">3</span></div><div class="line">    <span class="keyword">var</span> aStrig = <span class="string">"sss"</span></div><div class="line">    <span class="keyword">var</span> aObject :<span class="type">AnyObject</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swiftTest</span><span class="params">(aCharacter:Character)</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">justTest</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>接下来，我们来创建一个方法，用来获取Class的方法和属性，代码如下：</p>
<figure class="highlight julia"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">func getMethodListAndProperties(cls:AnyClass) -&gt; <span class="built_in">Void</span> &#123;</div><div class="line">    var methodCount:<span class="built_in">UInt32</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> methodList = class_copyMethodList(cls, &amp;methodCount)</div><div class="line">    </div><div class="line">    //打印方法</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="built_in">Int</span>(methodCount) &#123;</div><div class="line">        <span class="keyword">let</span> method = methodList[i]</div><div class="line">        print(<span class="built_in">String</span>(<span class="built_in">UTF8String</span>:method_getTypeEncoding(method)))</div><div class="line">        print(<span class="built_in">String</span>(_sel:method_getName(method)))</div><div class="line">    &#125;</div><div class="line">    free(methodList)</div><div class="line">    </div><div class="line">    var propertiesCount:<span class="built_in">UInt32</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> propertiesList = class_copyPropertyList(cls, &amp;propertiesCount)</div><div class="line">    </div><div class="line">    //打印属性</div><div class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0.</span>.&lt;<span class="built_in">Int</span>(propertiesCount) &#123;</div><div class="line">        <span class="keyword">let</span> property = propertiesList[i]</div><div class="line">        print(<span class="built_in">String</span>(<span class="built_in">UTF8String</span>:property_getName(property)))</div><div class="line">        print(<span class="built_in">String</span>(<span class="built_in">UTF8String</span>:property_getAttributes(property)))</div><div class="line">    &#125;</div><div class="line">    free(propertiesList)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当调用<code>getMethodListAndProperties(SwiftWithOCClass)</code>方法时，其打印结果如下：</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//打印的方法</span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"B16@0:8"</span>)</span></span></div><div class="line">aBool</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v20@0:8B16"</span>)</span></span></div><div class="line">setABool:</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"q16@0:8"</span>)</span></span></div><div class="line">aInt</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v24@0:8q16"</span>)</span></span></div><div class="line">setAInt:</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"@16@0:8"</span>)</span></span></div><div class="line">aStrig</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v24@0:8@16"</span>)</span></span></div><div class="line">setAStrig:</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"@16@0:8"</span>)</span></span></div><div class="line">aObject</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v24@0:8@16"</span>)</span></span></div><div class="line">setAObject:</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"v16@0:8"</span>)</span></span></div><div class="line">justTest</div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"@?"</span>)</span></span></div><div class="line"><span class="selector-class">.cxx_destruct</span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"@16@0:8"</span>)</span></span></div><div class="line">init</div><div class="line"></div><div class="line"><span class="comment">//打印的属性</span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"aBool"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"TB,N,VaBool"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"aInt"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"Tq,N,VaInt"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"aStrig"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"T@\"NSString\",N,C,VaStrig"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"aObject"</span>)</span></span></div><div class="line"><span class="function"><span class="title">Optional</span><span class="params">(<span class="string">"T@,N,&amp;,VaObject"</span>)</span></span></div></pre></td></tr></table></figure>
<ul>
<li><p>当调用<code>getMethodListAndProperties(SwiftClass)</code>方法时，我们发现并没有打印结果，既没有获取到纯Swift类的属性和方法；而继承自<code>NSObject</code>的类SwiftWithOCClass则能够获取到属性和方法，翻阅官方文档（如下图），我们就能找到原因，通过继承<code>NSObject</code>，对象可以拥有运行时且可以被看成Objective-C对象。<br><img src="http://oc54pu02q.bkt.clouddn.com/QQ20160824-0@2x.png" width="500" height="" alt="" align="center"></p>
</li>
<li><p>我们不禁要问，对于纯Swift类，难道就没有办法使用Objective-C运行时了么？答案是否定的，我们可以使用<code>dynamic</code>修饰符，实验一下，在纯Swift类的属性aBool中加入<code>dynamic</code>修饰符，代码如下,我们发现，可以通过运行时找到aBool属性的两个访问器方法以及属性名。</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">SwiftClass</span> </span>&#123;</div><div class="line">    <span class="keyword">dynamic</span> <span class="keyword">var</span> aBool = <span class="literal">true</span></div><div class="line">    <span class="keyword">var</span> aInt = <span class="number">3</span></div><div class="line">    <span class="keyword">var</span> aStrig = <span class="string">"sss"</span></div><div class="line">    <span class="keyword">var</span> aObject :<span class="type">AnyObject</span>?</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">func</span> <span class="title">swiftTest</span><span class="params">()</span></span> &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//打印结果</span></div><div class="line"><span class="type">Optional</span>(<span class="string">"B16@0:8"</span>)</div><div class="line">aBool</div><div class="line"><span class="type">Optional</span>(<span class="string">"v20@0:8B16"</span>)</div><div class="line">setABool:</div><div class="line"><span class="type">Optional</span>(<span class="string">"aBool"</span>)</div><div class="line"><span class="type">Optional</span>(<span class="string">"TB,N,VaBool"</span>)</div></pre></td></tr></table></figure>
<ul>
<li>而当调用<code>getMethodListAndProperties(SwiftWithOCClass)</code>时，大多数方法都打印出来了，但有一个方法没获取到，为<code>func swiftTest(aCharacter:Character)</code>，原因是该方法的参数是Character类型，它是Swift特有的，无法转化(Bridge)为OC的类型，所以无法通过运行时获取到该方法。</li>
</ul>
<h1 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h1><hr>
<p>在使用Objective-C的Runtime时，经常会用到Method Swizzling技术，该技术通常在<code>load</code>方法中实现。而在Swift中不允许定义<code>load</code>方法，否则编译器会报错，所以，如果要实现Method Swizzling，有几种解决方案：</p>
<ul>
<li>在<code>initialize</code>中来实现，但是需要注意的是<code>initialize</code>可能会被调用多次，所以需要在<code>initialize</code>实现中做一些判断，比如判断是否是当前类，而不是子类，使用<code>dispatch_once</code>来进行操作。 </li>
<li>在App Delegate中实现Method Swizzling：在AppDelegate的<code>application(_:didFinishLaunchingWithOptions:)</code>方法中进行Method Swizzling。</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Swift调用Objective-C的Runtime&quot;&gt;&lt;a href=&quot;#Swift调用Objective-C的Runtime&quot; class=&quot;headerlink&quot; title=&quot;Swift调用Objective-C的Runtime&quot;&gt;&lt;/a&gt;Swift调用Objective-C的Runtime&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;首先，我们来测试一下使用Swift代码来调用Objective-C Runtime的方法，首先创建两个类，用来做对比，一个是纯的Swift类，另一个继承自NSObject：&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//纯Swift类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SwiftClass&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aBool = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aInt = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aStrig = &lt;span class=&quot;string&quot;&gt;&quot;sss&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aObject :&lt;span class=&quot;type&quot;&gt;AnyObject&lt;/span&gt;?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swiftTest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//继承自NSObject的类&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SwiftWithOCClass&lt;/span&gt; :&lt;span class=&quot;title&quot;&gt;NSObject&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aBool = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aInt = &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aStrig = &lt;span class=&quot;string&quot;&gt;&quot;sss&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; aObject :&lt;span class=&quot;type&quot;&gt;AnyObject&lt;/span&gt;?&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;swiftTest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(aCharacter:Character)&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;func&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;justTest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift的Designated和Convenience初始化器</title>
    <link href="http://yoursite.com/2016/08/19/Swift%E7%9A%84Designated%E5%92%8CConvenience%E5%88%9D%E5%A7%8B%E5%8C%96%E5%99%A8/"/>
    <id>http://yoursite.com/2016/08/19/Swift的Designated和Convenience初始化器/</id>
    <published>2016-08-19T07:46:48.000Z</published>
    <updated>2016-08-23T07:43:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在Swift中，为了确保类的存储属性都能有一个初始值，提供了几种初始化的方法，接下来将讨论一下Desinated(指定)、Convenience（便捷）初始化器。</p>
<h1 id="Designated（指定）初始化器"><a href="#Designated（指定）初始化器" class="headerlink" title="Designated（指定）初始化器"></a>Designated（指定）初始化器</h1><ul>
<li><p>之前使用过Objective-C的应该比较了解指定初始化器，很多类都提供了指定初始化器，如UIViewController的为：<code>- (instancetype)initWithNibName:(NSString *)nibName bundle:(NSBundle *)nibBundle</code>,UIView的<code>- (instancetype)initWithFrame:(CGRect)aRect</code>，其作用是该类或者其子类在初始化的过程中都会调用指定初始化器。</p>
</li>
<li><p>当在类中定义指定初始化器时，该初始化器会初始化该类的所有存储属性，且当该类是有父类时，<strong>必须</strong>调用父类的<strong>指定</strong>初始化器，注意顺序，先初始化该类自己定义的存储属性，再使用super来调用父类的指定初始化器，跌倒过来编译器会报错。</p>
</li>
</ul>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RecipeIngredient</span>: <span class="title">Food</span> </span>&#123;</div><div class="line">    <span class="keyword">var</span> quantity: <span class="type">Int</span></div><div class="line">    <span class="comment">//指定初始化器</span></div><div class="line">    <span class="keyword">init</span>(name: <span class="type">String</span>, quantity: <span class="type">Int</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.quantity = quantity</div><div class="line">        <span class="keyword">super</span>.<span class="keyword">init</span>(name: name) <span class="comment">//放在该类存储属性初始化之后</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">override</span> <span class="keyword">convenience</span> <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</div><div class="line">        <span class="keyword">self</span>.<span class="keyword">init</span>(name: name, quantity: <span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>每一个类都必须至少有一个指定初始化器。</li>
</ul>
<a id="more"></a>
<h1 id="Convenience（便捷）初始化器"><a href="#Convenience（便捷）初始化器" class="headerlink" title="Convenience（便捷）初始化器"></a>Convenience（便捷）初始化器</h1><ul>
<li>便捷初始化器需要带一个convenience修饰符，如下代码,在便捷初始化器的定义中，<strong>必须先调用其他的初始化器之后，再赋类的存储属性值</strong>。</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">convenience</span> <span class="selector-tag">init</span>(parameters) &#123;</div><div class="line">    statements</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p>便捷初始化器如果重载了父类的指定初始化器，则必须使用override修饰符。</p>
</li>
<li><p>如果子类提供了其父类的<strong>所有</strong>（注意：必须是所有的）指定初始化器的实现，实现有两种，一种是子类的存储属性都提供了默认值，且没有定义指定初始化器，则会自动集成父类的指定初始化器；另一种是在子类中重新定义，子类中重新定义的方法可以是便捷初始化器，既子类中的便捷初始化器可以重载父类的指定初始化器。这样子类就会自动继承父类的便捷初始化器。</p>
</li>
</ul>
<h1 id="指定初始化器和便捷初始化器之间的关系"><a href="#指定初始化器和便捷初始化器之间的关系" class="headerlink" title="指定初始化器和便捷初始化器之间的关系"></a>指定初始化器和便捷初始化器之间的关系</h1><p>指定初始化器和便捷初始化器之间的3个法则：</p>
<ol>
<li>指定初始化器必须调用其<strong><em>直接</em></strong>父类的指定初始化器。</li>
<li>便捷初始化器必须调用该类中其他的初始化器，其初始化器的类型不限。</li>
<li>在便捷初始化器的调用链中最后必须调用一个指定初始化器。</li>
</ol>
<p>最后，直接上官方文档的图示就会对上面的3个规则有比较清晰的认识：<br> <img src="http://oc54pu02q.bkt.clouddn.com/QQ20160819-0@2x.png" width="500" height="254" alt="" align="center"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在Swift中，为了确保类的存储属性都能有一个初始值，提供了几种初始化的方法，接下来将讨论一下Desinated(指定)、Convenience（便捷）初始化器。&lt;/p&gt;
&lt;h1 id=&quot;Designated（指定）初始化器&quot;&gt;&lt;a href=&quot;#Designated（指定）初始化器&quot; class=&quot;headerlink&quot; title=&quot;Designated（指定）初始化器&quot;&gt;&lt;/a&gt;Designated（指定）初始化器&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;之前使用过Objective-C的应该比较了解指定初始化器，很多类都提供了指定初始化器，如UIViewController的为：&lt;code&gt;- (instancetype)initWithNibName:(NSString *)nibName bundle:(NSBundle *)nibBundle&lt;/code&gt;,UIView的&lt;code&gt;- (instancetype)initWithFrame:(CGRect)aRect&lt;/code&gt;，其作用是该类或者其子类在初始化的过程中都会调用指定初始化器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;当在类中定义指定初始化器时，该初始化器会初始化该类的所有存储属性，且当该类是有父类时，&lt;strong&gt;必须&lt;/strong&gt;调用父类的&lt;strong&gt;指定&lt;/strong&gt;初始化器，注意顺序，先初始化该类自己定义的存储属性，再使用super来调用父类的指定初始化器，跌倒过来编译器会报错。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RecipeIngredient&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;Food&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; quantity: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//指定初始化器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;, quantity: &lt;span class=&quot;type&quot;&gt;Int&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.quantity = quantity&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(name: name) &lt;span class=&quot;comment&quot;&gt;//放在该类存储属性初始化之后&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;convenience&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(name: &lt;span class=&quot;type&quot;&gt;String&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(name: name, quantity: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;每一个类都必须至少有一个指定初始化器。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Swift" scheme="http://yoursite.com/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>知乎日报iOS</title>
    <link href="http://yoursite.com/2016/08/18/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5iOS/"/>
    <id>http://yoursite.com/2016/08/18/知乎日报iOS/</id>
    <published>2016-08-18T09:31:02.000Z</published>
    <updated>2016-08-23T07:43:29.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Disclaimer - 声明</strong><br><em>Zhihu</em> is a trademark of <em>Zhihu. Inc</em>. This app is not created nor endorsed by Zhihu Inc. All the information and content accessible through Zhihu Daily Purify are subject to Zhihu’s copyright and terms of use. This is a free app and does not charge for anything. All content are available for free from <a href="http://www.zhihu.com" target="_blank" rel="external">Zhihu</a>.</p>
<p>『知乎』是 <em>知乎. Inc</em> 的注册商标。本软件与其代码非由知乎创作或维护。软件中所包含的信息与内容皆违反版权与知乎用户协议。它是一个免费软件，使用它不收取您任何费用。其中的所有内容均可在<a href="http://www.zhihu.com" target="_blank" rel="external">知乎</a>获取。</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近工作工作不是很忙，所以准备开发项目练练手，之前发现了这个<em><a href="https://github.com/izzyleung/ZhihuDailyPurify/" target="_blank" rel="external">知乎日报API</a></em>,其提供了知乎日报的API地址，所以决定开发知乎日报。先上<em><a href="https://github.com/zhongwuzw/ZhihuDaily" target="_blank" rel="external">Github地址</a></em>，欢迎<em>Star、Issues、Pull Request</em>。</p>
<h1 id="展示"><a href="#展示" class="headerlink" title="展示"></a>展示</h1><h2 id="1-应用主页部分："><a href="#1-应用主页部分：" class="headerlink" title="1.应用主页部分："></a>1.应用主页部分：</h2><p><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo1.gif" alt=""><br><a id="more"></a></p>
<ul>
<li>主页中最上方的滚动条实现思路：该无限滚动条有很多实现方式，包括使用UIScrollView，添加3个子视图用于管理，每次滑动后都进行3个子视图内容的重新赋值。之前，我采用过这种思路，所以又想了另外一种方法，直接使用UICollectionView来实现，在第一个和最后一个数据源中添加最后一个、第一个数据，在scrollViewDidScroll中处理到达左右两边后的跳转即可，代码如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)scrollViewDidScroll:(<span class="built_in">UIScrollView</span> *)scrollView&#123;</div><div class="line">	[<span class="keyword">self</span> scrollCollectionViewToCorrectIndexPath];</div><div class="line">&#125;</div><div class="line"></div><div class="line">-(<span class="keyword">void</span>)scrollCollectionViewToCorrectIndexPath&#123;</div><div class="line">	<span class="keyword">float</span> contentOffsetWhenFullyScrolledRight = <span class="keyword">self</span>.frame.size.width * ([<span class="keyword">self</span>.dataArray count] <span class="number">-1</span>);</div><div class="line">	<span class="keyword">if</span> (<span class="keyword">self</span>.collectionView.contentOffset.x == contentOffsetWhenFullyScrolledRight) 	&#123;</div><div class="line">        <span class="built_in">NSIndexPath</span> *newIndexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:<span class="number">1</span> inSection:<span class="number">0</span>];</div><div class="line">        </div><div class="line">        [<span class="keyword">self</span>.collectionView scrollToItemAtIndexPath:newIndexPath atScrollPosition:<span class="built_in">UICollectionViewScrollPositionLeft</span> animated:<span class="literal">NO</span>];</div><div class="line">        </div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">self</span>.collectionView.contentOffset.x == <span class="number">0</span>)  &#123;</div><div class="line">        <span class="built_in">NSIndexPath</span> *newIndexPath = [<span class="built_in">NSIndexPath</span> indexPathForItem:([<span class="keyword">self</span>.dataArray count] <span class="number">-2</span>) inSection:<span class="number">0</span>];</div><div class="line">        </div><div class="line">        [<span class="keyword">self</span>.collectionView scrollToItemAtIndexPath:newIndexPath atScrollPosition:<span class="built_in">UICollectionViewScrollPositionLeft</span> animated:<span class="literal">NO</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>由于主页上方的无限滚动条是有UICollectionView来实现的，所以为了实现主页新闻页滑动时的动态放缩，直接在setFrame中invalidate collectionView的layout即可(一开始使用AutoLayout来调整，后来发现当快速滑动时会出现短时间错位的问题，所以只得使用setFrame)：</li>
</ul>
<figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-</span>(void)<span class="selector-tag">setFrame</span><span class="selector-pseudo">:(CGRect)frame</span>&#123;</div><div class="line">    <span class="selector-tag">if</span> (self.height != frame.size.height) &#123;</div><div class="line">        <span class="selector-attr">[self.collectionView.collectionViewLayout invalidateLayout]</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="selector-attr">[super setFrame:frame]</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>项目中多个页面实现了点击状态栏页面滑动到顶部的功能，实现方法无非就是先获取到点击状态栏时的事件，由于AppDelegate继承自UIResponder，所以能够响应事件，作为响应者链最顶层（响应者链如下图所示）的响应者，当前面的Responder无法处理事件而向上传递时，最后会到达AppDelegate，所以统一在AppDelegate中处理状态栏的点击，直接重写<code>- (void)touchesBegan:(NSSet&lt;UITouch *&gt; *)touches withEvent:(UIEvent *)event</code>方法，代码示例如下：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">-(<span class="keyword">void</span>)touchesBegan:(<span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *)touches withEvent:(<span class="built_in">UIEvent</span> *)event&#123;</div><div class="line">    [<span class="keyword">super</span> touchesBegan:touches withEvent:event];</div><div class="line">    </div><div class="line">    <span class="built_in">NSSet</span>&lt;<span class="built_in">UITouch</span> *&gt; *events = [event allTouches];</div><div class="line">    <span class="built_in">UITouch</span> *touch = [events anyObject];</div><div class="line">    <span class="built_in">CGPoint</span> location = [touch locationInView:<span class="keyword">self</span>.window];</div><div class="line">    <span class="built_in">CGRect</span> statusBarFrame = [<span class="built_in">UIApplication</span> sharedApplication].statusBarFrame;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (<span class="built_in">CGRectContainsPoint</span>(statusBarFrame, location)) &#123;</div><div class="line">        [[<span class="built_in">NSNotificationCenter</span> defaultCenter] postNotificationName:STATUS_BAR_TAP_NOTIFICATION object:<span class="literal">nil</span>];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://oc54pu02q.bkt.clouddn.com/responder_chain.png" alt="image"></p>
<ul>
<li>在使用Notification时需要注意的就是Observer对象一定要在自己被销毁之前remove掉Observer。还有一个注意的点就是Observer在接收到Notification执行时的线程与发出Notification的线程是一致的，所以如果存在子线程发Notification的情况，在Observer处理时不要直接操作UI。</li>
</ul>
<h2 id="2-新闻详细页部分："><a href="#2-新闻详细页部分：" class="headerlink" title="2.新闻详细页部分："></a>2.新闻详细页部分：</h2><p><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo2.gif" alt=""><br><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo3.gif" alt=""></p>
<ul>
<li>新闻主页和详细页部分使用了一个单例Manager来进行数据的管理，使用外观模式，Manager提供简洁的接口，如下代码：</li>
</ul>
<figure class="highlight objectivec"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">HomePageDataManager</span> : <span class="title">NSObject</span></span></div><div class="line"></div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">strong</span>) <span class="built_in">NSMutableArray</span>&lt;NewsListResponseModel *&gt; *homePageArray;</div><div class="line"><span class="keyword">@property</span> (<span class="keyword">nonatomic</span>, <span class="keyword">copy</span>) <span class="built_in">NSArray</span>&lt;TopNewsResponseModel *&gt; *topNewsArray;</div><div class="line"></div><div class="line">SYNTHESIZE_SINGLETON_FOR_CLASS_HEADER(HomePageDataManager)</div><div class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)getLatestNewsWithSuccess:(HttpClientSuccessBlock)success</div><div class="line">                                              fail:(HttpClientFailureBlock)fail;</div><div class="line">- (<span class="built_in">NSURLSessionDataTask</span> *)getPreviousNewsWithSuccess:(HttpClientSuccessBlock)success</div><div class="line">                                              fail:(HttpClientFailureBlock)fail;</div><div class="line">- (<span class="built_in">NSInteger</span>)numberofSections;</div><div class="line">- (<span class="built_in">NSInteger</span>)numberofRowsInSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line">- (NewsResponseModel *)modelForRowAtIndexPath:(<span class="built_in">NSIndexPath</span> *)indexPath;</div><div class="line">- (<span class="built_in">NSString</span> *)headerTitleForSection:(<span class="built_in">NSInteger</span>)section;</div><div class="line">- (<span class="built_in">NSInteger</span>)getPreviousNewsWithSection:(<span class="built_in">NSInteger</span> *)section currentID:(<span class="built_in">NSInteger</span>)currentID;</div><div class="line">- (<span class="built_in">NSInteger</span>)getNextNewsWithSection:(<span class="built_in">NSInteger</span> *)section currentID:(<span class="built_in">NSInteger</span>)currentID;</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<ul>
<li>因为在详细页可以进行新闻的上下切换，所以有可能更新数据源，这样，当返回到主页时，数据源可能已经更新，这个时候主页需要重新reload 数据，否则会导致崩溃。</li>
<li><p>详细页的上下切换动画实现，直接使用UIView提供的animateWithDuration方法，上下切换时只是View的切换，由同一个控制器管理。</p>
<h2 id="3-主题日报部分："><a href="#3-主题日报部分：" class="headerlink" title="3.主题日报部分："></a>3.主题日报部分：</h2><p><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo4.gif" alt=""></p>
</li>
<li><p>主题日报部分基本和主页类似，在主题日报列表中进行切换时，不再重新创建Controller以及UI，而是直接reload数据。</p>
<h2 id="4-夜间部分："><a href="#4-夜间部分：" class="headerlink" title="4.夜间部分："></a>4.夜间部分：</h2><p><img src="https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo5.gif" alt=""></p>
</li>
<li><p>夜间模式实现：使用UIView的Category，类别中使用Objective-C的关联对象来存储模式的配置项，并且作为Observer来监听夜间模式的切换。</p>
</li>
</ul>
<h2 id="Features-特性"><a href="#Features-特性" class="headerlink" title="Features - 特性"></a>Features - 特性</h2><ul>
<li>实现知乎日报大多数功能</li>
<li>没有广告</li>
</ul>
<h2 id="TODO-后续实现"><a href="#TODO-后续实现" class="headerlink" title="TODO - 后续实现"></a>TODO - 后续实现</h2><ul>
<li>网络状况切换管理</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Disclaimer - 声明&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Zhihu&lt;/em&gt; is a trademark of &lt;em&gt;Zhihu. Inc&lt;/em&gt;. This app is not created nor endorsed by Zhihu Inc. All the information and content accessible through Zhihu Daily Purify are subject to Zhihu’s copyright and terms of use. This is a free app and does not charge for anything. All content are available for free from &lt;a href=&quot;http://www.zhihu.com&quot;&gt;Zhihu&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;『知乎』是 &lt;em&gt;知乎. Inc&lt;/em&gt; 的注册商标。本软件与其代码非由知乎创作或维护。软件中所包含的信息与内容皆违反版权与知乎用户协议。它是一个免费软件，使用它不收取您任何费用。其中的所有内容均可在&lt;a href=&quot;http://www.zhihu.com&quot;&gt;知乎&lt;/a&gt;获取。&lt;/p&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近工作工作不是很忙，所以准备开发项目练练手，之前发现了这个&lt;em&gt;&lt;a href=&quot;https://github.com/izzyleung/ZhihuDailyPurify/&quot;&gt;知乎日报API&lt;/a&gt;&lt;/em&gt;,其提供了知乎日报的API地址，所以决定开发知乎日报。先上&lt;em&gt;&lt;a href=&quot;https://github.com/zhongwuzw/ZhihuDaily&quot;&gt;Github地址&lt;/a&gt;&lt;/em&gt;，欢迎&lt;em&gt;Star、Issues、Pull Request&lt;/em&gt;。&lt;/p&gt;
&lt;h1 id=&quot;展示&quot;&gt;&lt;a href=&quot;#展示&quot; class=&quot;headerlink&quot; title=&quot;展示&quot;&gt;&lt;/a&gt;展示&lt;/h1&gt;&lt;h2 id=&quot;1-应用主页部分：&quot;&gt;&lt;a href=&quot;#1-应用主页部分：&quot; class=&quot;headerlink&quot; title=&quot;1.应用主页部分：&quot;&gt;&lt;/a&gt;1.应用主页部分：&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/zhongwuzw/ZhihuDaily/master/images/demo1.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="iOS" scheme="http://yoursite.com/categories/iOS/"/>
    
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
      <category term="Objective-C" scheme="http://yoursite.com/tags/Objective-C/"/>
    
      <category term="知乎日报" scheme="http://yoursite.com/tags/%E7%9F%A5%E4%B9%8E%E6%97%A5%E6%8A%A5/"/>
    
      <category term="项目开发" scheme="http://yoursite.com/tags/%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/08/13/hello-world/"/>
    <id>http://yoursite.com/2016/08/13/hello-world/</id>
    <published>2016-08-13T14:20:45.000Z</published>
    <updated>2016-08-23T02:42:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World，以前在学习以及项目开发中学到的很多知识点，都会记录在我的印象笔记中，作为整理学习，但是现在，我要开始把我的一些积累放到我的这个小博客上，有问题欢迎大家指正，也附上我的<a href="https://github.com/zhongwuzw" target="_blank" rel="external">Github</a>地址。ps:近期我会整理一下我的印象笔记，将一些知识点放到博客上来。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Hello World，以前在学习以及项目开发中学到的很多知识点，都会记录在我的印象笔记中，作为整理学习，但是现在，我要开始把我的一些积累放到我的这个小博客上，有问题欢迎大家指正，也附上我的&lt;a href=&quot;https://github.com/zhongwuzw&quot; tar
    
    </summary>
    
      <category term="其它" scheme="http://yoursite.com/categories/%E5%85%B6%E5%AE%83/"/>
    
    
  </entry>
  
</feed>
